import os
import time
import logging
import requests
import re
import base64
import uuid
import json
from datetime import datetime
from io import BytesIO
from PIL import Image

from flask import Flask, request
from threading import Thread
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from types import SimpleNamespace

# === C·∫•u h√¨nh logging ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)

# === C·∫•u h√¨nh chung ===
TOKEN = os.environ.get("BOT_TOKEN", "7539540916:AAFH3TBho-13IT6RB_nynN1T9j83GizVDNo")
ADMIN_ID = int(os.environ.get("ADMIN_ID", 5819094246))
APP_URL = "https://zproject-111.onrender.com"

bot = telebot.TeleBot(TOKEN, threaded=False)
app = Flask(__name__)
START_TIME = time.time()

USER_IDS = set()
GROUP_INFOS = []
# T·ª´ ƒëi·ªÉn ƒë·ªÉ l∆∞u tr·ªØ th√¥ng tin ph·∫£n h·ªìi c·ªßa ng∆∞·ªùi d√πng (feedback_message_id: original_chat_id)
# ƒêi·ªÅu n√†y c·∫ßn thi·∫øt ƒë·ªÉ admin c√≥ th·ªÉ reply v√† bot bi·∫øt g·ª≠i v·ªÅ ƒë√¢u
bot.feedback_messages = {}

# Bi·∫øn to√†n c·ª•c ƒë·ªÉ ƒë·∫øm s·ªë l∆∞·ª£t t∆∞∆°ng t√°c
interaction_count = 0

# --- C·∫•u h√¨nh Requests v·ªõi Retry v√† Timeout chung ---
session = requests.Session()
retries = Retry(total=5, backoff_factor=1, status_forcelist=[502, 503, 504], allowed_methods=frozenset(['GET', 'POST']))
adapter = HTTPAdapter(max_retries=retries)
session.mount("https://", adapter)
session.mount("http://", adapter) # Th√™m c·∫£ http n·∫øu c√≥ request http
DEFAULT_TIMEOUT = 30 # ƒê·∫∑t timeout m·∫∑c ƒë·ªãnh l√† 30 gi√¢y cho t·∫•t c·∫£ c√°c request

# Ghi ƒë√® ph∆∞∆°ng th·ª©c request ƒë·ªÉ √°p d·ª•ng timeout m·∫∑c ƒë·ªãnh
class TimeoutSession(requests.Session):
    def request(self, method, url, **kwargs):
        kwargs.setdefault('timeout', DEFAULT_TIMEOUT)
        return super(TimeoutSession, self).request(method, url, **kwargs)

session = TimeoutSession()
session.mount("https://", adapter)
session.mount("http://", adapter)

# --- C·∫•u h√¨nh Gemini API v√† Prompt t·ª´ xa ---
GEMINI_API_KEY = "AIzaSyDpmTfFibDyskBHwekOADtstWsPUCbIrzE"
GEMINI_URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={GEMINI_API_KEY}"
REMOTE_PROMPT_URL = "https://zcode.x10.mx/prompt.json"
REMOTE_LOG_HOST = "https://zcode.x10.mx/save.php"

# --- URL ·∫£nh d√πng trong bot ---
NGL_SUCCESS_IMAGE_URL = "https://i.ibb.co/fV1srXJ8/9885878c-2a4b-4246-ae2e-fda17d735e2d.jpg"
# URL ·∫£nh cho l·ªánh /start
START_IMAGE_URL = "https://i.ibb.co/MkQ2pTjv/ca68c4b2-60dc-4eb1-9a20-ebf2cc5c557f.jpg"
NOTI_IMAGE_URL = "https://i.ibb.co/QvrB4zMB/ca68c4b2-2a4b-4246-ae2e-fda17d735e2d.jpg" # URL ·∫£nh cho th√¥ng b√°o m·∫∑c ƒë·ªãnh
TUONGTAC_IMAGE_URL = "https://i.ibb.co/YF4yRCBP/1751301092916.png" # URL ·∫£nh cho l·ªánh /tuongtac

# --- C√°c h√†m Dummy (C·∫ßn thay th·∫ø b·∫±ng logic th·ª±c t·∫ø c·ªßa b·∫°n) ---
def load_user_memory(user_id):
    """T·∫£i l·ªãch s·ª≠ tr√≤ chuy·ªán c·ªßa ng∆∞·ªùi d√πng."""
    # ƒê√¢y l√† h√†m dummy, h√£y thay th·∫ø b·∫±ng logic t·∫£i d·ªØ li·ªáu th·ª±c t·∫ø
    return []

def save_user_memory(user_id, memory):
    """L∆∞u l·ªãch s·ª≠ tr√≤ chuy·ªán c·ªßa ng∆∞·ªùi d√πng."""
    # ƒê√¢y l√† h√†m dummy, h√£y thay th·∫ø b·∫±ng logic l∆∞u d·ªØ li·ªáu th·ª±c t·∫ø
    pass

def format_html(text):
    """ƒê·ªãnh d·∫°ng vƒÉn b·∫£n th√†nh HTML, tr√°nh l·ªói k√Ω t·ª± ƒë·∫∑c bi·ªát."""
    # B·∫°n c√≥ th·ªÉ c·∫£i thi·ªán h√†m n√†y ƒë·ªÉ x·ª≠ l√Ω HTML t·ªët h∆°n n·∫øu c·∫ßn
    return text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;").replace('"', "&quot;").replace("'", "&#039;")

class gTTS:
    """Class dummy cho gTTS."""
    def __init__(self, text, lang="vi", slow=False):
        self.text = text
        self.lang = lang
        self.slow = slow
    def save(self, filename):
        # Logic l∆∞u file √¢m thanh dummy
        with open(filename, "wb") as f:
            f.write(b"dummy_audio_data")


# === ƒê·ªìng b·ªô nh√≥m/ng∆∞·ªùi d√πng t·ª´ API ===
def sync_chat_to_server(chat):
    """ƒê·ªìng b·ªô th√¥ng tin chat (ng∆∞·ªùi d√πng/nh√≥m) l√™n server t·ª´ xa."""
    if chat.type not in ["private", "group", "supergroup"]:
        return
    try:
        payload = {
            "id": chat.id,
            "type": chat.type,
            "title": getattr(chat, "title", ""),
            "username": getattr(chat, "username", "")
        }
        response = session.post("https://zcode.x10.mx/apizproject.php", json=payload) # S·ª≠ d·ª•ng session v·ªõi timeout m·∫∑c ƒë·ªãnh
        response.raise_for_status()
        logging.info(f"Synced chat {chat.id} to server")
    except Exception as e:
        logging.error(f"Error syncing chat {chat.id}: {e}")

def update_id_list_loop():
    """V√≤ng l·∫∑p ƒë·ªãnh k·ª≥ ƒë·ªÉ c·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi d√πng v√† nh√≥m t·ª´ API."""
    global USER_IDS, GROUP_INFOS
    while True:
        try:
            response = session.get("https://zcode.x10.mx/group-idchat.json") # S·ª≠ d·ª•ng session v·ªõi timeout m·∫∑c ƒë·ªãnh
            response.raise_for_status()
            data = response.json()
            new_users = set(data.get("users", []))
            new_groups = data.get("groups", [])
            if new_users != USER_IDS or new_groups != GROUP_INFOS:
                USER_IDS = new_users
                GROUP_INFOS = new_groups
                logging.info("Updated user and group lists")
        except Exception as e:
            logging.error(f"Error updating lists: {e}")
        time.sleep(30) # ƒê·ª£i 30 gi√¢y tr∆∞·ªõc khi c·∫≠p nh·∫≠t l·∫°i

# Kh·ªüi ch·∫°y lu·ªìng c·∫≠p nh·∫≠t ID
Thread(target=update_id_list_loop, daemon=True).start()

# --- H√†m h·ªó tr·ª£ cho /ask v√† callbacks ---
def build_reply_button(user_id, question, reply_id=None):
    """T·∫°o c√°c n√∫t ph·∫£n h·ªìi cho tin nh·∫Øn /ask."""
    safe_q = re.sub(r"[^\w\s]", "", question.strip())[:50]
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("üîÅ Tr·∫£ l·ªùi l·∫°i", callback_data=f"retry|{user_id}|{safe_q}"),
        InlineKeyboardButton("üîä Chuy·ªÉn sang Voice", callback_data=f"tts|{user_id}|{reply_id}") if reply_id else None
    )
    return markup

# Decorator ƒë·ªÉ tƒÉng interaction_count cho m·ªói l·ªánh
def increment_interaction_count(func):
    def wrapper(message, *args, **kwargs):
        global interaction_count
        interaction_count += 1
        return func(message, *args, **kwargs)
    return wrapper

# === L·ªÜNH X·ª¨ L√ù TIN NH·∫ÆN ===

@bot.message_handler(commands=["start"])
@increment_interaction_count
def start_cmd(message):
    """X·ª≠ l√Ω l·ªánh /start, hi·ªÉn th·ªã th√¥ng tin bot v√† c√°c li√™n k·∫øt."""
    sync_chat_to_server(message.chat)
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üë§ Admin", url="https://t.me/zproject2"),
        InlineKeyboardButton("üì¢ Th√¥ng B√°o", url="https://t.me/zproject3"),
        InlineKeyboardButton("üí¨ Chat", url="https://t.me/zproject4")
    )
    # C·∫≠p nh·∫≠t l·ªánh /start ƒë·ªÉ g·ª≠i k√®m ·∫£nh v√† caption nh∆∞ noti
    bot.send_photo(
        message.chat.id,
        photo=START_IMAGE_URL, # S·ª≠ d·ª•ng URL ·∫£nh m·ªõi cho /start
        caption="<b>üöÄ ZProject Bot</b>\n\n"
                "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi D·ªãch V·ª• Zproject Bot ƒê∆∞·ª£c Make B·ªüi @zproject2\n "
                "‚óè Ch√∫ng T√¥i C√≥ C√°c D·ªãch V·ª• Nh∆∞ Treo Bot 24/7 Gi√° C·ª±c R·∫ª H∆°n VPS v√† M√°y ·∫¢o \n‚óè B·∫°n C√≥ Th·ªÉ Li√™n H·ªá Telegram @zproject2.\n"
                "G√µ /help ƒë·ªÉ xem danh s√°ch c√°c l·ªánh.",
        reply_markup=markup,
        parse_mode="HTML",
        reply_to_message_id=message.message_id # ƒê·∫£m b·∫£o reply l·∫°i tin nh·∫Øn ng∆∞·ªùi d√πng
    )

@bot.message_handler(commands=["help"])
@increment_interaction_count
def help_command(message):
    """X·ª≠ l√Ω l·ªánh /help, hi·ªÉn th·ªã menu c√°c l·ªánh."""
    sync_chat_to_server(message.chat)
    help_text = (
        "<b>üìö Menu L·ªánh ZProject Bot</b>\n\n"
        "‚Ä¢  <code>/start</code> - Start Zproject Bot.\n"
        "‚Ä¢  <code>/help</code>  - Show Menu Zproject Bot.\n"
        "‚Ä¢  <code>/time</code>  - Uptime Zproject Bot.\n"
        "‚Ä¢  <code>/ask &lt;c√¢u h·ªèi&gt;</code> - H·ªèi AI ƒê∆∞·ª£c T√≠ch H·ª£p WormGpt V2.\n"
        "‚Ä¢  <code>/spamngl &lt;username&gt; &lt;tin_nh·∫Øn&gt; &lt;s·ªë_l·∫ßn&gt;</code> - Spam Ngl.\n"
        "‚Ä¢  <code>/noti &lt;n·ªôi dung&gt;</code> - <i>(Ch·ªâ Admin)</i> G·ª≠i th√¥ng b√°o.\n"
        "‚Ä¢  <code>/sever</code> - <i>(Ch·ªâ Admin)</i> Sever Bot.\n"
        "‚Ä¢  <code>/tuongtac</code> - Xem t·ªïng s·ªë l∆∞·ª£t t∆∞∆°ng t√°c c·ªßa bot.\n"
        "‚Ä¢  <code>/phanhoi</code> - G·ª≠i Ph·∫£n H·ªìi L·ªói Ho·∫∑c Ch·ª©c NƒÉng C·∫ßn C·∫£i Ti·∫øn."
    )
    bot.send_photo(
        chat_id=message.chat.id,
        photo=NGL_SUCCESS_IMAGE_URL, # S·ª≠ d·ª•ng ·∫£nh ƒë√£ c√≥
        caption=help_text,
        parse_mode="HTML",
        reply_to_message_id=message.message_id # ƒê·∫£m b·∫£o reply l·∫°i tin nh·∫Øn ng∆∞·ªùi d√πng
    )

@bot.message_handler(commands=["time"])
@increment_interaction_count
def time_cmd(message):
    """X·ª≠ l√Ω l·ªánh /time, hi·ªÉn th·ªã th·ªùi gian ho·∫°t ƒë·ªông c·ªßa bot."""
    sync_chat_to_server(message.chat)
    now = time.time()
    seconds = int(now - START_TIME)
    days = seconds // 86400
    hours = (seconds % 86400) // 3600
    minutes = (seconds % 3600) // 60
    sec = seconds % 60
    bot.reply_to(
        message,
        f"<blockquote>‚è±Ô∏è Bot ƒë√£ ho·∫°t ƒë·ªông ƒë∆∞·ª£c:\n<b>{days} ng√†y {hours} gi·ªù {minutes} ph√∫t {sec} gi√¢y</b></blockquote>",
        parse_mode="HTML"
    )

@bot.message_handler(commands=["tuongtac"])
@increment_interaction_count
def tuongtac_command(message):
    """X·ª≠ l√Ω l·ªánh /tuongtac, hi·ªÉn th·ªã t·ªïng s·ªë l∆∞·ª£t t∆∞∆°ng t√°c c·ªßa bot."""
    sync_chat_to_server(message.chat)
    
    reply_text = (
        f"<b>üìä TH·ªêNG K√ä ZPROJECT BOT</b>\n\n"
        f"‚óè T·ªïng Th·ªëng K√™ Zproject Bot.\n\n"
        f"<b>T·ªïng s·ªë l∆∞·ª£t t∆∞∆°ng t√°c:</b> <code>{interaction_count}</code>\n"
        f"<i>L∆∞u √Ω: S·ªë L∆∞·ª£t T∆∞∆°ng T√°c C√†ng Cao Ch·ª©ng T·ªè ƒê·ªô Uy T√≠n C·ªßa Bot üéâ.</i>"
    )
    
    bot.send_photo(
        chat_id=message.chat.id,
        photo=TUONGTAC_IMAGE_URL,
        caption=reply_text,
        parse_mode="HTML",
        reply_to_message_id=message.message_id
    )

@bot.message_handler(commands=["noti"])
@increment_interaction_count
def send_noti(message):
    """X·ª≠ l√Ω l·ªánh /noti, cho ph√©p Admin g·ª≠i th√¥ng b√°o k√®m ·∫£nh (t√πy ch·ªçn) t·ªõi t·∫•t c·∫£ ng∆∞·ªùi d√πng/nh√≥m."""
    if message.from_user.id != ADMIN_ID:
        return bot.reply_to(message, "üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.", parse_mode="HTML")

    text = message.text.replace("/noti", "").strip()

    photo_file_id = None
    if message.reply_to_message and message.reply_to_message.photo:
        photo_file_id = message.reply_to_message.photo[-1].file_id

    if not text and not photo_file_id:
        return bot.reply_to(message, "‚ö†Ô∏è S·ª≠ d·ª•ng: <code>/noti &lt;n·ªôi dung&gt;</code> ho·∫∑c reply v√†o ·∫£nh v√† d√πng <code>/noti &lt;n·ªôi dung&gt;</code>.", parse_mode="HTML")

    notify_caption = f"<b>[!] TH√îNG B√ÅO T·ª™ ADMIN DEPZAI CUTO</b>\n\n{text}" if text else "<b>[!] TH√îNG B√ÅO</b>"

    ok, fail = 0, 0
    failed_ids = []

    all_recipients = USER_IDS.union({g["id"] for g in GROUP_INFOS})

    for uid in all_recipients:
        try:
            if photo_file_id:
                bot.send_photo(
                    chat_id=uid,
                    photo=photo_file_id,
                    caption=notify_caption,
                    parse_mode="HTML"
                )
            else:
                bot.send_message(
                    chat_id=uid,
                    text=notify_caption,
                    parse_mode="HTML"
                )
            ok += 1
            time.sleep(0.1)
        except Exception as e:
            fail += 1
            failed_ids.append(uid)
            logging.error(f"Failed to send notification to {uid}: {e}")

    bot.reply_to(
        message,
        f"‚úÖ G·ª≠i th√†nh c√¥ng: {ok} tin nh·∫Øn.\n‚ùå G·ª≠i th·∫•t b·∫°i: {fail} tin nh·∫Øn.\n"
        f"Danh s√°ch ID th·∫•t b·∫°i: <code>{failed_ids}</code>",
        parse_mode="HTML"
    )

@bot.message_handler(commands=["spamngl"])
@increment_interaction_count
def spam_ngl_command(message):
    """X·ª≠ l√Ω l·ªánh /spamngl ƒë·ªÉ g·ª≠i tin nh·∫Øn ·∫©n danh t·ªõi NGL."""
    sync_chat_to_server(message.chat)

    args = message.text.split(maxsplit=3)

    if len(args) < 4:
        return bot.reply_to(message, "‚ö†Ô∏è S·ª≠ d·ª•ng: <code>/spamngl &lt;username&gt; &lt;tin_nhan&gt; &lt;s·ªë_l·∫ßn&gt;</code>", parse_mode="HTML")

    username = args[1]
    tinnhan = args[2]
    solan_str = args[3]

    try:
        solan = int(solan_str)
        # Gi·ªõi h·∫°n s·ªë l·∫ßn spam NGL t·ªëi ƒëa l√† 50
        if not (1 <= solan <= 50):
            return bot.reply_to(message, "‚ùó S·ªë l·∫ßn ph·∫£i t·ª´ 1 ƒë·∫øn 50.", parse_mode="HTML")
    except ValueError:
        return bot.reply_to(message, "‚ùó S·ªë l·∫ßn ph·∫£i l√† m·ªôt s·ªë h·ª£p l·ªá, kh√¥ng ph·∫£i k√Ω t·ª±.", parse_mode="HTML")

    ngl_api_url = f"https://zeusvr.x10.mx/ngl?api-key=dcbfree&username={username}&tinnhan={tinnhan}&solan={solan}"

    try:
        response = session.get(ngl_api_url) # S·ª≠ d·ª•ng session v·ªõi timeout m·∫∑c ƒë·ªãnh
        response.raise_for_status()
        data = response.json()

        if data.get("status") == "success":
            total_sent = data["data"].get("total_sent", 0)
            failed_count = data["data"].get("failed", 0)

            reply_text = (
                f"<blockquote><b>‚úÖ ƒê√£ Attack NGL Th√†nh C√¥ng!</b></blockquote>\n\n"
                f"<b>üë§ Username:</b> <code>{username}</code>\n"
                f"<b>üí¨ Tin nh·∫Øn:</b> <code>{tinnhan}</code>\n"
                f"<b>üî¢ S·ªë l·∫ßn g·ª≠i:</b> <code>{total_sent}</code>\n"
                f"<b>‚ùå Th·∫•t b·∫°i:</b> <code>{failed_count}</code>"
            )

            bot.send_photo(
                chat_id=message.chat.id,
                photo=NGL_SUCCESS_IMAGE_URL,
                caption=reply_text,
                parse_mode="HTML",
                reply_to_message_id=message.message_id # ƒê·∫£m b·∫£o reply l·∫°i tin nh·∫Øn ng∆∞·ªùi d√πng
            )
        else:
            error_message = data.get("message", "C√≥ l·ªói x·∫£y ra khi g·ªçi API NGL.")
            bot.reply_to(message, f"‚ùå L·ªói NGL API: {error_message}", parse_mode="HTML")

    except requests.exceptions.ReadTimeout as e:
        logging.error(f"L·ªói timeout khi g·ªçi NGL API: {e}")
        bot.reply_to(message, f"‚ùå L·ªói timeout: API NGL kh√¥ng ph·∫£n h·ªìi k·ªãp th·ªùi. Vui l√≤ng th·ª≠ l·∫°i sau.", parse_mode="HTML")
    except requests.exceptions.ConnectionError as e:
        logging.error(f"L·ªói k·∫øt n·ªëi khi g·ªçi NGL API: {e}")
        bot.reply_to(message, f"‚ùå L·ªói k·∫øt n·ªëi ƒë·∫øn NGL API: Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra l·∫°i sau.", parse_mode="HTML")
    except requests.exceptions.RequestException as e:
        logging.error(f"L·ªói chung khi g·ªçi NGL API: {e}")
        bot.reply_to(message, f"‚ùå L·ªói khi g·ªçi NGL API: <code>{e}</code>", parse_mode="HTML")
    except ValueError as e:
        logging.error(f"L·ªói ph√¢n t√≠ch JSON t·ª´ NGL API: {e}")
        bot.reply_to(message, "‚ùå L·ªói: Ph·∫£n h·ªìi API kh√¥ng h·ª£p l·ªá.", parse_mode="HTML")
    except Exception as e:
        logging.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi x·ª≠ l√Ω /spamngl: {e}")
        bot.reply_to(message, f"‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: <code>{e}</code>", parse_mode="HTML")

@bot.message_handler(commands=["phanhoi"])
@increment_interaction_count
def send_feedback_to_admin(message):
    """X·ª≠ l√Ω l·ªánh /phanhoi, cho ph√©p ng∆∞·ªùi d√πng g·ª≠i ph·∫£n h·ªìi ƒë·∫øn admin."""
    sync_chat_to_server(message.chat)
    feedback_text = message.text.replace("/phanhoi", "").strip()

    if not feedback_text:
        return bot.reply_to(message, "‚ö†Ô∏è Vui l√≤ng nh·∫≠p n·ªôi dung ph·∫£n h·ªìi. V√≠ d·ª•: <code>/phanhoi Bot b·ªã l·ªói ·ªü l·ªánh /ask</code>", parse_mode="HTML")

    # L·∫•y th√¥ng tin chi ti·∫øt c·ªßa ng∆∞·ªùi g·ª≠i
    user_info_for_admin = f"<a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a>"
    if message.from_user.last_name:
        user_info_for_admin += f" {message.from_user.last_name}"
    if message.from_user.username:
        user_info_for_admin += f" (@{message.from_user.username})"
    user_info_for_admin += f" (<code>{message.from_user.id}</code>)"

    chat_info_for_admin = f"ID Chat: <code>{message.chat.id}</code>\n" \
                          f"Lo·∫°i Chat: {message.chat.type}"
    if message.chat.type in ["group", "supergroup"]:
        chat_info_for_admin += f"\nT√™n Chat: {message.chat.title}"

    timestamp = datetime.now().strftime("%H:%M:%S ng√†y %d/%m/%Y")

    admin_notification = (
        f"<b>üìß PH·∫¢N H·ªíI M·ªöI T·ª™ NG∆Ø·ªúI D√ôNG</b>\n\n"
        f"<b>Ng∆∞·ªùi g·ª≠i:</b>\n{user_info_for_admin}\n"
        f"<b>Th√¥ng tin Chat:</b>\n{chat_info_for_admin}\n"
        f"<b>Th·ªùi gian:</b> <code>{timestamp}</code>\n\n"
        f"<b>N·ªôi dung ph·∫£n h·ªìi:</b>\n<blockquote>{format_html(feedback_text)}</blockquote>\n\n"
        f"<i>ƒê·ªÉ ph·∫£n h·ªìi l·∫°i ng∆∞·ªùi d√πng n√†y, h√£y reply tin nh·∫Øn n√†y v√† d√πng l·ªánh <code>/adminph &lt;n·ªôi dung ph·∫£n h·ªìi&gt;</code></i>"
    )

    try:
        sent_message_to_admin = bot.send_message(
            chat_id=ADMIN_ID,
            text=admin_notification,
            parse_mode="HTML",
            disable_web_page_preview=True # T·∫Øt preview ƒë·ªÉ tr√°nh l·ªói v·ªõi tg://user
        )
        # L∆∞u tr·ªØ mapping tin nh·∫Øn c·ªßa admin v·ªõi chat ID c·ªßa ng∆∞·ªùi d√πng v√† c√°c th√¥ng tin kh√°c
        bot.feedback_messages[sent_message_to_admin.message_id] = {
            'chat_id': message.chat.id,
            'user_id': message.from_user.id, # L∆∞u user ID ƒë·ªÉ tag
            'user_first_name': message.from_user.first_name, # L∆∞u t√™n ƒë·ªÉ tag
            'feedback_text': feedback_text # L∆∞u n·ªôi dung ph·∫£n h·ªìi g·ªëc
        }
        
        bot.reply_to(
            message,
            "‚úÖ C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i ph·∫£n h·ªìi! Admin s·∫Ω xem x√©t s·ªõm nh·∫•t c√≥ th·ªÉ.",
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"L·ªói khi g·ª≠i ph·∫£n h·ªìi ƒë·∫øn admin: {e}")
        bot.reply_to(message, "‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ª≠i ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i sau.", parse_mode="HTML")

@bot.message_handler(commands=["adminph"])
@increment_interaction_count
def admin_reply_to_feedback(message):
    """X·ª≠ l√Ω l·ªánh /adminph, cho ph√©p admin ph·∫£n h·ªìi l·∫°i ng∆∞·ªùi d√πng ƒë√£ g·ª≠i feedback."""
    if message.from_user.id != ADMIN_ID:
        return bot.reply_to(message, "üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.", parse_mode="HTML")

    if not message.reply_to_message:
        return bot.reply_to(message, "‚ö†Ô∏è B·∫°n c·∫ßn reply v√†o tin nh·∫Øn ph·∫£n h·ªìi c·ªßa ng∆∞·ªùi d√πng ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.", parse_mode="HTML")

    original_feedback_message_id = message.reply_to_message.message_id
    feedback_data = bot.feedback_messages.get(original_feedback_message_id)

    if not feedback_data:
        return bot.reply_to(message, "‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin chat c·ªßa ng∆∞·ªùi d√πng n√†y. C√≥ th·ªÉ tin nh·∫Øn qu√° c≈© ho·∫∑c bot ƒë√£ kh·ªüi ƒë·ªông l·∫°i.", parse_mode="HTML")

    user_chat_id = feedback_data['chat_id']
    user_id_to_tag = feedback_data['user_id']
    user_name_to_tag = feedback_data['user_first_name']
    original_feedback_text = feedback_data['feedback_text']

    admin_response_text = message.text.replace("/adminph", "").strip()

    if not admin_response_text:
        return bot.reply_to(message, "‚ö†Ô∏è Vui l√≤ng nh·∫≠p n·ªôi dung ph·∫£n h·ªìi c·ªßa admin. V√≠ d·ª•: <code>/adminph C·∫£m ∆°n b·∫°n, ch√∫ng t√¥i ƒë√£ kh·∫Øc ph·ª•c l·ªói.</code>", parse_mode="HTML")

    # T·∫°o tag ng∆∞·ªùi d√πng v√† hi·ªÉn th·ªã th√¥ng tin ph·∫£n h·ªìi g·ªëc
    user_tag = f"<a href='tg://user?id={user_id_to_tag}'>{user_name_to_tag}</a>"

    admin_reply_to_user = (
        f"<b>üë®‚Äçüíª Admin ƒë√£ ph·∫£n h·ªìi b·∫°n {user_tag}!</b>\n\n"
        f"<b>N·ªôi dung ph·∫£n h·ªìi c·ªßa b·∫°n:</b>\n"
        f"<blockquote>{format_html(original_feedback_text)}</blockquote>\n\n"
        f"<b>Ph·∫£n h·ªìi t·ª´ Admin:</b>\n"
        f"<blockquote>{format_html(admin_response_text)}</blockquote>\n\n"
        f"<i>N·∫øu b·∫°n c√≥ th√™m c√¢u h·ªèi, vui l√≤ng g·ª≠i ph·∫£n h·ªìi m·ªõi qua l·ªánh <code>/phanhoi</code>.</i>"
    )

    try:
        bot.send_message(
            chat_id=user_chat_id,
            text=admin_reply_to_user,
            parse_mode="HTML",
            disable_web_page_preview=True # T·∫Øt preview ƒë·ªÉ tr√°nh l·ªói v·ªõi tg://user
        )
        bot.reply_to(message, "‚úÖ ƒê√£ g·ª≠i ph·∫£n h·ªìi c·ªßa Admin ƒë·∫øn ng∆∞·ªùi d√πng th√†nh c√¥ng.", parse_mode="HTML")
        # X√≥a mapping sau khi ƒë√£ ph·∫£n h·ªìi ƒë·ªÉ tr√°nh d√πng l·∫°i (t√πy ch·ªçn)
        # del bot.feedback_messages[original_feedback_message_id]
    except Exception as e:
        logging.error(f"L·ªói khi g·ª≠i ph·∫£n h·ªìi c·ªßa admin ƒë·∫øn ng∆∞·ªùi d√πng {user_chat_id}: {e}")
        bot.reply_to(message, "‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ª≠i ph·∫£n h·ªìi c·ªßa Admin ƒë·∫øn ng∆∞·ªùi d√πng.", parse_mode="HTML")


@bot.message_handler(commands=["sever"])
@increment_interaction_count
def show_groups(message):
    """X·ª≠ l√Ω l·ªánh /sever, hi·ªÉn th·ªã danh s√°ch c√°c nh√≥m bot ƒëang tham gia (ch·ªâ Admin)."""
    if message.from_user.id != ADMIN_ID:
        return bot.reply_to(message, "üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.", parse_mode="HTML")
    if not GROUP_INFOS:
        return bot.reply_to(message, "üì≠ Hi·ªán t·∫°i bot ch∆∞a c√≥ th√¥ng tin v·ªÅ nh√≥m n√†o.", parse_mode="HTML")
    text = "<b>üì¶ Sever:</b>\n\n"
    for g in GROUP_INFOS:
        title = g.get("title", "Kh√¥ng r√µ t√™n nh√≥m")
        link = f"https://t.me/{g.get('username')}" if g.get("username") else "‚õî Kh√¥ng c√≥ link m·ªùi"
        text += f"üìå <b>{title}</b>\n{link}\n\n"
    bot.reply_to(message, text, parse_mode="HTML", disable_web_page_preview=True)

@bot.message_handler(commands=["ask"])
@increment_interaction_count
def ask_command(message):
    """X·ª≠ l√Ω l·ªánh /ask ƒë·ªÉ g·ª≠i c√¢u h·ªèi ƒë·∫øn Gemini AI. H·ªó tr·ª£ h·ªèi k√®m ·∫£nh."""
    sync_chat_to_server(message.chat)
    prompt = message.text.replace("/ask", "").strip()
    if not prompt:
        return bot.reply_to(message, "‚ùì B·∫°n ch∆∞a nh·∫≠p c√¢u h·ªèi r·ªìi ƒë√≥! Vui l√≤ng g√µ <code>/ask &lt;c√¢u h·ªèi c·ªßa b·∫°n&gt;</code>.", parse_mode="HTML")

    msg_status = bot.reply_to(message, "ü§ñ") # G·ª≠i tin nh·∫Øn "ƒëang x·ª≠ l√Ω" v√† l∆∞u ƒë·ªÉ c·∫≠p nh·∫≠t

    user_id = message.from_user.id
    user_name = message.from_user.first_name
    memory = load_user_memory(user_id)

    try:
        # S·ª≠ d·ª•ng session v·ªõi timeout m·∫∑c ƒë·ªãnh
        prompt_data = session.get(REMOTE_PROMPT_URL).json()
        system_prompt = prompt_data.get("prompt", "B·∫°n l√† AI th√¥ng minh v√† h·ªØu √≠ch.")
    except Exception as e:
        logging.error(f"L·ªói t·∫£i prompt t·ª´ xa: {e}")
        system_prompt = "B·∫°n l√† AI th√¥ng minh v√† h·ªØu √≠ch."

    history_block = ""
    if memory:
        for item in memory[-5:]: # Ch·ªâ l·∫•y 5 cu·ªôc h·ªôi tho·∫°i g·∫ßn nh·∫•t
            history_block += f"Ng∆∞·ªùi d√πng h·ªèi: {item['question']}\nAI: {item['answer']}\n"

    full_prompt = f"{system_prompt}\n\n[Ng·ªØ c·∫£nh tr∆∞·ªõc ƒë√≥ v·ªõi {user_name}]\n{history_block}\nNg∆∞·ªùi d√πng hi·ªán t·∫°i h·ªèi: {prompt}"

    headers = {"Content-Type": "application/json"}
    parts = [{"text": full_prompt}]
    image_attached = False

    if message.reply_to_message and message.reply_to_message.photo:
        try:
            photo = message.reply_to_message.photo[-1]
            file_info = bot.get_file(photo.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            image = Image.open(BytesIO(downloaded_file))
            buffer = BytesIO()
            # ƒê·∫£m b·∫£o l∆∞u ·∫£nh d∆∞·ªõi ƒë·ªãnh d·∫°ng JPEG ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi Gemini
            if image.mode in ("RGBA", "P"):
                image = image.convert("RGB")
            image.save(buffer, format="JPEG")
            base64_img = base64.b64encode(buffer.getvalue()).decode()
            parts.insert(0, {
                "inline_data": {
                    "mime_type": "image/jpeg",
                    "data": base64_img
                }
            })
            image_attached = True
        except Exception as e:
            logging.error(f"L·ªói x·ª≠ l√Ω ·∫£nh ƒë√≠nh k√®m: {e}")

    data = {"contents": [{"parts": parts}]}
    try:
        # S·ª≠ d·ª•ng session v·ªõi timeout m·∫∑c ƒë·ªãnh
        res = session.post(GEMINI_URL, headers=headers, json=data)
        res.raise_for_status()
        result = res.json()["candidates"][0]["content"]["parts"][0]["text"]
    except Exception as e:
        return bot.edit_message_text(
            f"‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ªçi API Gemini:\n<pre>{e}</pre>",
            msg_status.chat.id,
            msg_status.message_id,
            parse_mode="HTML"
        )

    entry = {
        "question": prompt,
        "answer": result,
        "created": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "with_image": image_attached,
        "name": user_name
    }
    memory.append(entry)
    save_user_memory(user_id, memory)

    try:
        # S·ª≠ d·ª•ng session v·ªõi timeout m·∫∑c ƒë·ªãnh
        session.post(
            f"{REMOTE_LOG_HOST}?uid={user_id}",
            data=json.dumps(memory, ensure_ascii=False),
            headers={"Content-Type": "application/json"}
        )
    except Exception as e:
        logging.error(f"L·ªói g·ª≠i log t·ª´ xa: {e}")

    formatted_result = format_html(result)

    reply_id = uuid.uuid4().hex[:6]
    markup = build_reply_button(user_id, prompt, reply_id)

    bot.voice_map = getattr(bot, "voice_map", {})
    bot.voice_map[reply_id] = result

    if len(formatted_result) > 4000:
        filename = f"zproject_{reply_id}.html"
        with open(filename, "w", encoding="utf-8") as f:
            f.write(f"<html><head><meta charset='utf-8'></head><body>{formatted_result}</body></html>")
        with open(filename, "rb") as f:
            bot.send_document(
                message.chat.id,
                f,
                caption="üìÑ Tr·∫£ l·ªùi d√†i qu√°, ƒë√¢y l√† file HTML nha!",
                parse_mode="HTML",
                reply_to_message_id=message.message_id # ƒê·∫£m b·∫£o reply l·∫°i tin nh·∫Øn ng∆∞·ªùi d√πng
            )
        os.remove(filename)
        bot.delete_message(msg_status.chat.id, msg_status.message_id) # X√≥a tin nh·∫Øn "ƒëang x·ª≠ l√Ω"
    else:
        bot.edit_message_text(
            f"ü§ñ <i>ZProject [WORMGPT] tr·∫£ l·ªùi:</i>\n\n<b>{formatted_result}</b>",
            msg_status.chat.id,
            msg_status.message_id,
            parse_mode="HTML",
            reply_markup=markup
        )

# --- N√öT CALLBACK ---

@bot.callback_query_handler(func=lambda call: call.data.startswith("retry|"))
def retry_button(call):
    """X·ª≠ l√Ω n√∫t 'Tr·∫£ l·ªùi l·∫°i' t·ª´ c√¢u h·ªèi /ask."""
    try:
        _, uid, question = call.data.split("|", 2)
        if str(call.from_user.id) != uid:
            return bot.answer_callback_query(call.id, "üö´ B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi y√™u c·∫ßu c√¢u h·ªèi n√†y.", show_alert=True)

        # T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng message gi·∫£ l·∫≠p ƒë·ªÉ truy·ªÅn v√†o ask_command
        msg = SimpleNamespace(
            chat=call.message.chat,
            message_id=call.message.message_id, # Gi·ªØ nguy√™n message_id c·ªßa tin nh·∫Øn ban ƒë·∫ßu
            text="/ask " + question,
            from_user=call.from_user,
            reply_to_message=None # Kh√¥ng c√≥ reply_to_message khi retry th√¥ng th∆∞·ªùng
        )

        bot.answer_callback_query(call.id, "üîÅ ƒêang th·ª≠ l·∫°i c√¢u h·ªèi...")
        # C·∫≠p nh·∫≠t tin nh·∫Øn ban ƒë·∫ßu th√†nh "ü§ñ" ƒë·ªÉ cho th·∫•y ƒëang x·ª≠ l√Ω
        bot.edit_message_text("ü§ñ", call.message.chat.id, call.message.message_id)
        ask_command(msg) # Call ask_command, n√≥ s·∫Ω t·ª± ƒë·ªông tƒÉng interaction_count
    except Exception as e:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è L·ªói khi th·ª≠ l·∫°i!", show_alert=True)
        logging.error(f"[RETRY] L·ªói: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("tts|"))
def tts_button(call):
    """X·ª≠ l√Ω n√∫t 'Chuy·ªÉn sang Voice' t·ª´ c√¢u tr·∫£ l·ªùi /ask."""
    try:
        parts = call.data.split("|")
        uid = parts[1]
        reply_id = parts[2]

        if str(call.from_user.id) != uid:
            return bot.answer_callback_query(call.id, "üö´ B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi y√™u c·∫ßu voice n√†y.", show_alert=True)

        answer = bot.voice_map.get(reply_id)
        if not answer:
            return bot.answer_callback_query(call.id, "‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu gi·ªçng n√≥i.", show_alert=True)

        clean_text = re.sub(r"<code>.*?</code>", "", answer, flags=re.DOTALL)
        clean_text = re.sub(r"<[^>]+>", "", clean_text)
        text_to_speak = clean_text.strip()

        if not text_to_speak or len(text_to_speak) < 5:
            return bot.answer_callback_query(call.id, "‚ùó N·ªôi dung qu√° ng·∫Øn ho·∫∑c r·ªóng ƒë·ªÉ chuy·ªÉn voice.", show_alert=True)

        filename = f"zproject_tts_{reply_id}.mp3"
        tts = gTTS(text=text_to_speak, lang="vi", slow=False)
        tts.save(filename)

        with open(filename, "rb") as f:
            bot.send_voice(call.message.chat.id, f, caption="üó£Ô∏è ƒê√¢y l√† Voice ZProject:v", reply_to_message_id=call.message.message_id) # Reply voice v√†o tin nh·∫Øn g·ªëc
        os.remove(filename)
        bot.answer_callback_query(call.id, "üéß Voice ƒë√£ ƒë∆∞·ª£c g·ª≠i!")
    except Exception as e:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è L·ªói khi t·∫°o voice.", show_alert=True)
        logging.error(f"[TTS] L·ªói: {e}")

# === Webhook Flask ===
@app.route("/")
def index():
    """Trang ch·ªß ƒë∆°n gi·∫£n cho bi·∫øt bot ƒëang ho·∫°t ƒë·ªông."""
    return "<h3>üõ∞Ô∏è ZProject Bot ƒëang ho·∫°t ƒë·ªông!</h3>"

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    """ƒêi·ªÉm cu·ªëi webhook ƒë·ªÉ nh·∫≠n c·∫≠p nh·∫≠t t·ª´ Telegram."""
    try:
        update = telebot.types.Update.de_json(request.data.decode("utf-8"))
        bot.process_new_updates([update])
        return "OK", 200
    except Exception as e:
        logging.error(f"L·ªói webhook: {e}")
        return "Error", 500

# === Kh·ªüi ch·∫°y Bot ===
if __name__ == "__main__":
    try:
        webhook_info = bot.get_webhook_info()
        current_webhook_url = f"{APP_URL}/{TOKEN}"
        if webhook_info.url != current_webhook_url:
            bot.remove_webhook()
            bot.set_webhook(url=current_webhook_url)
            logging.info(f"Webhook ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t t·ªõi: {current_webhook_url}")
        app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
    except Exception as e:
        logging.critical(f"L·ªói nghi√™m tr·ªçng khi kh·ªüi ƒë·ªông bot: {e}")
