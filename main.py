import os
import time
import logging
import requests
import re
import base64
import uuid
import json
from datetime import datetime
from io import BytesIO
from PIL import Image # ƒê·∫£m b·∫£o Pillow ƒë∆∞·ª£c c√†i ƒë·∫∑t n·∫øu d√πng ch·ª©c nƒÉng ·∫£nh
import random
import string
import threading # Th√™m import n√†y cho auto_delete_email

from flask import Flask, request
from threading import Thread
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from types import SimpleNamespace

# --- C·∫•u h√¨nh logging ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)

# --- C·∫•u h√¨nh chung ---
# L·∫•y BOT_TOKEN t·ª´ bi·∫øn m√¥i tr∆∞·ªùng, ho·∫∑c d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ (ch·ªâ ƒë·ªÉ ph√°t tri·ªÉn)
TOKEN = os.environ.get("BOT_TOKEN", "7539540916:AAENFBF2B2dyXLITmEC2ccgLYim2t9vxOQk") # THAY B·∫∞NG TOKEN BOT C·ª¶A B·∫†N
ADMIN_ID = int(os.environ.get("ADMIN_ID", 5819094246)) # THAY B·∫∞NG ID ADMIN C·ª¶A B·∫†N

# ƒê·∫£m b·∫£o APP_URL l√† URL thu·∫ßn t√∫y, kh√¥ng c√≥ Markdown
APP_URL = os.environ.get("APP_URL", "https://zproject-111.onrender.com") # THAY B·∫∞NG URL APP C·ª¶A B·∫†N

logging.info(f"APP_URL ƒë∆∞·ª£c c·∫•u h√¨nh: {APP_URL}")

bot = telebot.TeleBot(TOKEN, threaded=False)
app = Flask(__name__)
START_TIME = time.time()

USER_IDS = set()
GROUP_INFOS = []
# T·ª´ ƒëi·ªÉn ƒë·ªÉ l∆∞u tr·ªØ th√¥ng tin ph·∫£n h·ªìi c·ªßa ng∆∞·ªùi d√πng (feedback_message_id: original_chat_id)
# ƒêi·ªÅu n√†y c·∫ßn thi·∫øt ƒë·ªÉ admin c√≥ th·ªÉ reply v√† bot bi·∫øt g·ª≠i v·ªÅ ƒë√¢u
bot.feedback_messages = {}
# L∆∞u tr·ªØ c√°c ƒëo·∫°n code ƒë·ªÉ copy
bot.code_snippets = {}
# L∆∞u tr·ªØ c√°c c√¢u tr·∫£ l·ªùi ƒë·ªÉ chuy·ªÉn th√†nh voice
bot.voice_map = {}

# L∆∞u th√¥ng tin ng∆∞·ªùi d√πng Mail.tm (email, m·∫≠t kh·∫©u, token, th·ªùi gian h·∫øt h·∫°n)
user_data = {}
# L∆∞u tr·ªØ ID tin nh·∫Øn c·ªßa bot ƒë·ªÉ c√≥ th·ªÉ ch·ªânh s·ª≠a sau n√†y
# mail_message_id: {chat_id, user_id, type: 'mail_info' ho·∫∑c 'inbox'}
bot.mail_messages_state = {}


# Bi·∫øn to√†n c·ª•c ƒë·ªÉ ƒë·∫øm s·ªë l∆∞·ª£t t∆∞∆°ng t√°c
interaction_count = 0

# --- C·∫•u h√¨nh Requests v·ªõi Retry v√† Timeout chung ---
session = requests.Session()
retries = Retry(total=3, backoff_factor=1, status_forcelist=[502, 503, 504])
adapter = HTTPAdapter(max_retries=retries)
session.mount("https://", adapter)
session.mount("http://", adapter)

DEFAULT_TIMEOUT_GLOBAL = 30 # Timeout m·∫∑c ƒë·ªãnh cho c√°c request kh√°c
NGL_REQUEST_TIMEOUT = 15 # Timeout ri√™ng cho NGL (c√≥ th·ªÉ ƒë·∫∑t ng·∫Øn h∆°n ƒë·ªÉ b·ªè qua nhanh)

# Ghi ƒë√® ph∆∞∆°ng th·ª©c request ƒë·ªÉ √°p d·ª•ng timeout m·∫∑c ƒë·ªãnh, nh∆∞ng NGL s·∫Ω d√πng timeout ri√™ng
class TimeoutSession(requests.Session):
    def request(self, method, url, **kwargs):
        # Apply NGL_REQUEST_TIMEOUT if it's an NGL URL, otherwise use DEFAULT_TIMEOUT_GLOBAL
        if "zeusvr.x10.mx/ngl" in url:
            kwargs.setdefault('timeout', NGL_REQUEST_TIMEOUT)
        else:
            kwargs.setdefault('timeout', DEFAULT_TIMEOUT_GLOBAL)
        return super(TimeoutSession, self).request(method, url, **kwargs)

session = TimeoutSession()
session.mount("https://", adapter)
session.mount("http://", adapter)

# --- C·∫•u h√¨nh Gemini API v√† Prompt t·ª´ xa ---
GEMINI_API_KEY = "AIzaSyDpmTfFibDyskBHwekOADtstWsPUCbIrzE" # THAY B·∫∞NG KH√ìA API GEMINI C·ª¶A B·∫†N
GEMINI_URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={GEMINI_API_KEY}"
REMOTE_PROMPT_URL = "https://zcode.x10.mx/prompt.json"
REMOTE_LOG_HOST = "https://zcode.x10.mx/save.php"

# --- URL ·∫£nh d√πng trong bot ---
NGL_SUCCESS_IMAGE_URL = "https://i.ibb.co/fV1srXJ8/9885878c-2a4b-4246-ae2e-fda17d735e2d.jpg"
START_IMAGE_URL = "https://i.ibb.co/MkQ2pTjv/ca68c4b2-60dc-4eb1-9a20-ebf2cc5c577f.jpg"
NOTI_IMAGE_URL = "https://i.ibb.co/QvrB4zMB/ca68c4b2-2a4b-4246-ae2e-fda17d735e2d.jpg"
TUONGTAC_IMAGE_URL = "https://i.ibb.co/YF4yRCBP/1751301092916.png"

# --- C√°c h√†m Dummy (C·∫ßn thay th·∫ø b·∫±ng logic th·ª±c t·∫ø c·ªßa b·∫°n) ---
def load_user_memory(user_id):
    """T·∫£i l·ªãch s·ª≠ tr√≤ chuy·ªán c·ªßa ng∆∞·ªùi d√πng."""
    # ƒê√¢y l√† h√†m dummy, h√£y thay th·∫ø b·∫±ng logic t·∫£i d·ªØ li·ªáu th·ª±c t·∫ø
    return []

def save_user_memory(user_id, memory):
    """L∆∞u l·ªãch s·ª≠ tr√≤ chuy·ªán c·ªßa ng∆∞·ªùi d√πng."""
    # ƒê√¢y l√† h√†m dummy, h√£y thay th·∫ø b·∫±ng logic l∆∞u d·ªØ li·ªáu th·ª±c t·∫ø
    pass

def html_escape(text):
    """ƒê·ªãnh d·∫°ng vƒÉn b·∫£n th√†nh HTML, tr√°nh l·ªói k√Ω t·ª± ƒë·∫∑c bi·ªát."""
    return text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;").replace('"', "&quot;").replace("'", "&#039;")

class gTTS:
    """Class dummy cho gTTS. Thay th·∫ø b·∫±ng th∆∞ vi·ªán gTTS th·ª±c t·∫ø n·∫øu b·∫°n mu·ªën ch·ª©c nƒÉng n√†y ho·∫°t ƒë·ªông."""
    def __init__(self, text, lang="vi", slow=False):
        self.text = text
        self.lang = lang
        self.slow = slow
    def save(self, filename):
        logging.info(f"Dummy gTTS: Saving '{self.text[:50]}...' to {filename}")
        with open(filename, "wb") as f:
            f.write(b"dummy_audio_data")

# --- C√°c h√†m h·ªó tr·ª£ cho ch·ª©c nƒÉng Mail.tm ---

# T·∫°o chu·ªói ng·∫´u nhi√™n
def random_string(length=3):
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=length))

# T·ª± ƒë·ªông x√≥a email sau 10 ph√∫t
def auto_delete_email(user_id):
    time.sleep(600)  # 10 ph√∫t
    if user_id in user_data:
        # TH·ª∞C HI·ªÜN X√ìA T√ÄI KHO·∫¢N TR√äN MAIL.TM N·∫æU C√ì TH·ªÇ
        # V√≠ d·ª• (c·∫ßn l∆∞u account_id v√† token v√†o user_data khi t·∫°o mail):
        # try:
        #     account_info = user_data[user_id]
        #     if 'account_id' in account_info and 'token' in account_info:
        #         headers = {"Authorization": f"Bearer {account_info['token']}"}
        #         session.delete(f"https://api.mail.tm/accounts/{account_info['account_id']}", headers=headers)
        #         logging.info(f"ƒê√£ x√≥a t√†i kho·∫£n Mail.tm: {account_info['email']}")
        # except Exception as e:
        #     logging.error(f"L·ªói khi x√≥a t√†i kho·∫£n Mail.tm cho user {user_id}: {e}")

        del user_data[user_id]
        send_message_robustly(user_id, "‚è∞ Mail 10 ph√∫t c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n!")

# L·∫•y domain c√≥ s·∫µn t·ª´ API mail.tm
def get_domain():
    # S·ª≠ d·ª•ng session ƒë√£ c·∫•u h√¨nh c·ªßa ZProject bot
    try:
        r = session.get("https://api.mail.tm/domains")
        r.raise_for_status() # Ki·ªÉm tra l·ªói HTTP
        domains = r.json()["hydra:member"]
        # L·ªçc c√°c domain c√≥ isActive = True
        active_domains = [d for d in domains if d.get('isActive', False)]
        if active_domains:
            return random.choice(active_domains)["domain"] # Ch·ªçn ng·∫´u nhi√™n m·ªôt domain
        return None
    except requests.exceptions.RequestException as e: # B·∫Øt l·ªói requests c·ª• th·ªÉ
        logging.error(f"L·ªói khi l·∫•y domain t·ª´ Mail.tm: {e}")
        return None
    except Exception as e: # B·∫Øt c√°c l·ªói kh√°c
        logging.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi l·∫•y domain t·ª´ Mail.tm: {e}")
        return None

# ƒêƒÉng k√Ω v√† l·∫•y token
def create_temp_mail():
    domain = get_domain()
    if not domain:
        return None, None, None

    email = f"zproject_{random_string()}@{domain}"
    password = random_string(12)

    try:
        # T·∫°o t√†i kho·∫£n
        r_acc = session.post("https://api.mail.tm/accounts", json={
            "address": email,
            "password": password
        })
        r_acc.raise_for_status()

        # ƒêƒÉng nh·∫≠p ƒë·ªÉ l·∫•y token
        r_token = session.post("https://api.mail.tm/token", json={
            "address": email,
            "password": password
        })
        r_token.raise_for_status()

        token = r_token.json()['token']
        return email, password, token
    except Exception as e:
        logging.error(f"L·ªói khi t·∫°o/ƒëƒÉng nh·∫≠p mail.tm: {e}")
        return None, None, None

# H√†m x√¢y d·ª±ng c√°c n√∫t cho Mail.tm
def build_mail_buttons(user_id, state):
    markup = InlineKeyboardMarkup()
    # Th√™m user_id v√†o callback_data ƒë·ªÉ ki·ªÉm tra quy·ªÅn
    if state == 'mail_info':
        markup.row(InlineKeyboardButton("üì© Xem H·ªôp Th∆∞", callback_data=f"mailtm_inbox|{user_id}"))
    elif state == 'inbox':
        markup.row(
            InlineKeyboardButton("üîÑ L√†m M·ªõi", callback_data=f"mailtm_refresh|{user_id}"),
            InlineKeyboardButton("‚Ü©Ô∏è Quay L·∫°i", callback_data=f"mailtm_back|{user_id}")
        )
    return markup


# === ƒê·ªìng b·ªô nh√≥m/ng∆∞·ªùi d√πng t·ª´ API ===
def sync_chat_to_server(chat):
    """ƒê·ªìng b·ªô th√¥ng tin chat (ng∆∞·ªùi d√πng/nh√≥m) l√™n server t·ª´ xa."""
    if chat.type not in ["private", "group", "supergroup"]:
        return
    try:
        payload = {
            "id": chat.id,
            "type": chat.type,
            "title": getattr(chat, "title", ""),
            "username": getattr(chat, "username", "")
        }
        response = session.post("https://zcode.x10.mx/apizproject.php", json=payload, timeout=DEFAULT_TIMEOUT_GLOBAL)
        response.raise_for_status()
        logging.info(f"Synced chat {chat.id} to server")
    except Exception as e:
        logging.error(f"Error syncing chat {chat.id}: {e}")

def update_id_list_loop():
    """V√≤ng l·∫∑p ƒë·ªãnh k·ª≥ ƒë·ªÉ c·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi d√πng v√† nh√≥m t·ª´ API."""
    global USER_IDS, GROUP_INFOS
    while True:
        try:
            response = session.get("https://zcode.x10.mx/group-idchat.json", timeout=DEFAULT_TIMEOUT_GLOBAL)
            response.raise_for_status()
            data = response.json()
            new_users = set(data.get("users", []))
            new_groups = data.get("groups", [])
            if new_users != USER_IDS or new_groups != GROUP_INFOS:
                USER_IDS = new_users
                GROUP_INFOS = new_groups
                logging.info("Updated user and group lists")
        except Exception as e:
            logging.error(f"Error updating lists: {e}")
        time.sleep(10) # ƒê·ª£i 30 gi√¢y tr∆∞·ªõc khi c·∫≠p nh·∫≠t l·∫°i

# Kh·ªüi ch·∫°y lu·ªìng c·∫≠p nh·∫≠t ID
Thread(target=update_id_list_loop, daemon=True).start()

# --- H√†m h·ªó tr·ª£ cho /ask v√† callbacks ---
def build_reply_button(user_id, question, reply_id=None):
    """T·∫°o c√°c n√∫t ph·∫£n h·ªìi cho tin nh·∫Øn /ask."""
    # Gi·ªõi h·∫°n ƒë·ªô d√†i c·ªßa question ƒë·ªÉ tr√°nh l·ªói callback_data qu√° d√†i
    safe_q = (re.sub(r"[^\w\s]", "", question.strip())[:50] + '...') if len(question.strip()) > 50 else question.strip()
    
    markup = InlineKeyboardMarkup()
    buttons = [
        InlineKeyboardButton("üîÅ Tr·∫£ l·ªùi l·∫°i", callback_data=f"retry|{user_id}|{safe_q}")
    ]
    if reply_id:
        buttons.append(InlineKeyboardButton("üîä Chuy·ªÉn sang Voice", callback_data=f"tts|{user_id}|{reply_id}"))
    markup.row(*buttons)
    return markup

# Decorator ƒë·ªÉ tƒÉng interaction_count cho m·ªói l·ªánh
def increment_interaction_count(func):
    def wrapper(message, *args, **kwargs):
        global interaction_count
        interaction_count += 1 # TƒÉng s·ªë l∆∞·ª£t t∆∞∆°ng t√°c
        return func(message, *args, **kwargs)
    return wrapper

# H√†m g·ª≠i tin nh·∫Øn c√≥ x·ª≠ l√Ω l·ªói reply_to_message_id
def send_message_robustly(chat_id, text=None, photo=None, caption=None, reply_markup=None, parse_mode="HTML", reply_to_message_id=None, disable_web_page_preview=None):
    try:
        if photo:
            return bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption=caption,
                reply_markup=reply_markup,
                parse_mode=parse_mode,
                reply_to_message_id=reply_to_message_id
            )
        else:
            return bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode,
                reply_to_message_id=reply_to_message_id,
                disable_web_page_preview=disable_web_page_preview
            )
    except telebot.apihelper.ApiTelegramException as e:
        if "message to be replied not found" in str(e):
            logging.warning(f"Failed to reply to message {reply_to_message_id} in chat {chat_id}: {e}. Sending as new message.")
            if photo:
                return bot.send_photo(
                    chat_id=chat_id,
                    photo=photo,
                    caption=caption,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
            else:
                return bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode,
                    disable_web_page_preview=disable_web_page_preview
                )
        else:
            logging.error(f"Error sending message to chat {chat_id}: {e}")
            raise

# === L·ªÜNH X·ª¨ L√ù TIN NH·∫ÆN ===

@bot.message_handler(commands=["start"])
@increment_interaction_count
def start_cmd(message):
    """X·ª≠ l√Ω l·ªánh /start, hi·ªÉn th·ªã th√¥ng tin bot v√† c√°c li√™n k·∫øt."""
    sync_chat_to_server(message.chat)
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üë§ Admin", url="https://t.me/zproject2"),
        InlineKeyboardButton("üì¢ Th√¥ng B√°o", url="https://t.me/zproject3"),
        InlineKeyboardButton("üí¨ Chat", url="https://t.me/zproject4")
    )
    send_message_robustly(
        message.chat.id,
        photo=START_IMAGE_URL,
        caption="<b>üöÄ ZProject Bot</b>\n\n"
                "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi D·ªãch V·ª• Zproject Bot ƒê∆∞·ª£c Make B·ªüi @zproject2\n "
                "‚óè Ch√∫ng T√¥i C√≥ C√°c D·ªãch V·ª• Nh∆∞ Treo Bot 24/7 Gi√° C·ª±c R·∫ª H∆°n VPS v√† M√°y ·∫¢o \n‚óè B·∫°n C√≥ Th·ªÉ Li√™n H·ªá Telegram @zproject2.\n"
                "--> G√µ /phanhoi ƒê·ªÉ Ph·∫£n H·ªìi L·ªói Ho·∫∑c C·∫ßn C·∫£i Ti·∫øn G√¨ ƒê√≥ Cho Bot, V√≠ D·ª• <code>/phanhoi L·ªói ·ªû L·ªánh Ask 503.</code>\n"
                "--> G√µ /help ƒë·ªÉ xem danh s√°ch c√°c l·ªánh.",
        reply_markup=markup,
        parse_mode="HTML",
        reply_to_message_id=message.message_id
    )

@bot.message_handler(commands=["help"])
@increment_interaction_count
def help_command(message):
    """X·ª≠ l√Ω l·ªánh /help, hi·ªÉn th·ªã menu c√°c l·ªánh."""
    sync_chat_to_server(message.chat)
    help_text = (
        "<b>üìö Menu L·ªánh ZProject Bot</b>\n\n"
        "‚Ä¢  <code>/start</code> - Start Zproject Bot.\n"
        "‚Ä¢  <code>/help</code>  - Show Menu Zproject Bot.\n"
        "‚Ä¢  <code>/time</code>  - Uptime Zproject Bot.\n"
        "‚Ä¢  <code>/ask &lt;c√¢u h·ªèi&gt;</code> - H·ªèi AI ƒê∆∞·ª£c T√≠ch H·ª£p WormGpt V2.\n"
        "‚Ä¢  <code>/ngl &lt;username&gt; &lt;tin_nh·∫Øn&gt; &lt;s·ªë_l·∫ßn&gt;</code> - Spam Ngl.\n"
        "‚Ä¢  <code>/noti &lt;n·ªôi dung&gt;</code> - <i>(Ch·ªâ Admin)</i> G·ª≠i th√¥ng b√°o.\n"
        "‚Ä¢  <code>/sever</code> - <i>(Ch·ªâ Admin)</i> Sever Bot.\n"
        "‚Ä¢  <code>/tuongtac</code> - Xem t·ªïng s·ªë l∆∞·ª£t t∆∞∆°ng t√°c c·ªßa bot.\n"
        "‚Ä¢  <code>/phanhoi</code> - G·ª≠i Ph·∫£n H·ªìi L·ªói Ho·∫∑c Ch·ª©c NƒÉng C·∫ßn C·∫£i Ti·∫øn.\n"
        "‚Ä¢  <code>/mail10p</code> - T·∫°o mail 10 ph√∫t d√πng 1 l·∫ßn.\n"
        "‚Ä¢  <code>/hopthu</code> - Xem h·ªôp th∆∞ c·ªßa mail 10 ph√∫t ƒë√£ t·∫°o.\n"
        "‚Ä¢  <code>/xoamail10p</code> - X√≥a mail 10 ph√∫t hi·ªán t·∫°i c·ªßa b·∫°n." # Th√™m l·ªánh m·ªõi
    )
    send_message_robustly(
        chat_id=message.chat.id,
        photo=NGL_SUCCESS_IMAGE_URL,
        caption=help_text,
        parse_mode="HTML",
        reply_to_message_id=message.message_id
    )

@bot.message_handler(commands=["time"])
@increment_interaction_count
def time_cmd(message):
    """X·ª≠ l√Ω l·ªánh /time, hi·ªÉn th·ªã th·ªùi gian ho·∫°t ƒë·ªông c·ªßa bot."""
    sync_chat_to_server(message.chat)
    now = time.time()
    seconds = int(now - START_TIME)
    days = seconds // 86400
    hours = (seconds % 86400) // 3600
    minutes = (seconds % 3600) // 60
    sec = seconds % 60
    send_message_robustly(
        message.chat.id,
        text=f"<blockquote>‚è±Ô∏è Bot ƒë√£ ho·∫°t ƒë·ªông ƒë∆∞·ª£c:\n<b>{days} ng√†y {hours} gi·ªù {minutes} ph√∫t {sec} gi√¢y</b></blockquote>",
        parse_mode="HTML",
        reply_to_message_id=message.message_id
    )

@bot.message_handler(commands=["tuongtac"])
@increment_interaction_count
def tuongtac_command(message):
    """X·ª≠ l√Ω l·ªánh /tuongtac, hi·ªÉn th·ªã t·ªïng s·ªë l∆∞·ª£t t∆∞∆°ng t√°c c·ªßa bot."""
    sync_chat_to_server(message.chat)
    
    reply_text = (
        f"<b>üìä TH·ªêNG K√ä ZPROJECT BOT</b>\n\n"
        f"‚óè T·ªïng Th·ªëng K√™ Zproject Bot.\n\n"
        f"<b>T·ªïng s·ªë l∆∞·ª£t t∆∞∆°ng t√°c:</b> <code>{interaction_count}</code>\n"
        f"<i>L∆∞u √Ω: S·ªë L∆∞·ª£t T∆∞∆°ng T√°c C√†ng Cao Ch·ª©ng T·ªè ƒê·ªô Uy T√≠n C·ªßa Bot üéâ.</i>"
    )
    
    send_message_robustly(
        chat_id=message.chat.id,
        photo=TUONGTAC_IMAGE_URL,
        caption=reply_text,
        parse_mode="HTML",
        reply_to_message_id=message.message_id
    )

@bot.message_handler(commands=["noti"])
@increment_interaction_count
def send_noti(message):
    """X·ª≠ l√Ω l·ªánh /noti, cho ph√©p Admin g·ª≠i th√¥ng b√°o k√®m ·∫£nh (t√πy ch·ªçn) t·ªõi t·∫•t c·∫£ ng∆∞·ªùi d√πng/nh√≥m."""
    if message.from_user.id != ADMIN_ID:
        return send_message_robustly(message.chat.id, text="üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.", parse_mode="HTML", reply_to_message_id=message.message_id)

    text = message.text.replace("/noti", "").strip()

    photo_file_id = None
    if message.reply_to_message and message.reply_to_message.photo:
        photo_file_id = message.reply_to_message.photo[-1].file_id

    if not text and not photo_file_id:
        return send_message_robustly(message.chat.id, text="‚ö†Ô∏è S·ª≠ d·ª•ng: <code>/noti &lt;n·ªôi dung&gt;</code> ho·∫∑c reply v√†o ·∫£nh v√† d√πng <code>/noti &lt;n·ªôi dung&gt;</code>.", parse_mode="HTML", reply_to_message_id=message.message_id)

    notify_caption = f"<b>[!] TH√îNG B√ÅO T·ª™ ADMIN DEPZAI CUTO</b>\n\n{text}" if text else "<b>[!] TH√îNG B√ÅO</b>"

    ok, fail = 0, 0
    failed_ids = []

    all_recipients = USER_IDS.union({g["id"] for g in GROUP_INFOS})

    for uid in all_recipients:
        try:
            if photo_file_id:
                bot.send_photo(
                    chat_id=uid,
                    photo=photo_file_id,
                    caption=notify_caption,
                    parse_mode="HTML"
                )
            else:
                bot.send_message(
                    chat_id=uid,
                    text=notify_caption,
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )
            ok += 1
            time.sleep(0.1)
        except Exception as e:
            fail += 1
            failed_ids.append(uid)
            logging.error(f"Failed to send notification to {uid}: {e}")

    send_message_robustly(
        message.chat.id,
        text=f"‚úÖ G·ª≠i th√†nh c√¥ng: {ok} tin nh·∫Øn.\n‚ùå G·ª≠i th·∫•t b·∫°i: {fail} tin nh·∫Øn.\n"
             f"Danh s√°ch ID th·∫•t b·∫°i: <code>{failed_ids}</code>",
        parse_mode="HTML",
        reply_to_message_id=message.message_id
    )

@bot.message_handler(commands=["ngl"])
@increment_interaction_count
def spam_ngl_command(message):
    """X·ª≠ l√Ω l·ªánh /ngl ƒë·ªÉ g·ª≠i tin nh·∫Øn ·∫©n danh t·ªõi NGL.
       Khi l·ªói, s·∫Ω b·ªè qua l·ªánh n√†y cho ng∆∞·ªùi d√πng hi·ªán t·∫°i v√† ƒë·ª£i l·ªánh m·ªõi."""
    sync_chat_to_server(message.chat)

    args = message.text.split(maxsplit=3)

    if len(args) < 4:
        return send_message_robustly(message.chat.id, text="‚ö†Ô∏è S·ª≠ d·ª•ng: <code>/ngl &lt;username&gt; &lt;tin_nhan&gt; &lt;s·ªë_l·∫ßn&gt;</code>", parse_mode="HTML", reply_to_message_id=message.message_id)

    username = args[1]
    tinnhan = args[2]
    solan_str = args[3]

    try:
        solan = int(solan_str)
        if not (1 <= solan <= 50):
            return send_message_robustly(message.chat.id, text="‚ùó S·ªë l·∫ßn ph·∫£i t·ª´ 1 ƒë·∫øn 50.", parse_mode="HTML", reply_to_message_id=message.message_id)
    except ValueError:
        return send_message_robustly(message.chat.id, text="‚ùó S·ªë l·∫ßn ph·∫£i l√† m·ªôt s·ªë h·ª£p l·ªá, kh√¥ng ph·∫£i k√Ω t·ª±.", parse_mode="HTML", reply_to_message_id=message.message_id)

    ngl_api_url = f"https://zeusvr.x10.mx/ngl?api-key=dcbfree&username={username}&tinnhan={tinnhan}&solan={solan}"

    try:
        response = session.get(ngl_api_url) 
        response.raise_for_status()
        data = response.json()

        if data.get("status") == "success":
            total_sent = data["data"].get("total_sent", 0)
            failed_count = data["data"].get("failed", 0)

            reply_text = (
                f"<blockquote><b>‚úÖ ƒê√£ Attack NGL Th√†nh C√¥ng!</b></blockquote>\n\n"
                f"<b>üë§ Username:</b> <code>{username}</code>\n"
                f"<b>üí¨ Tin nh·∫Øn:</b> <code>{tinnhan}</code>\n"
                f"<b>üî¢ S·ªë l·∫ßn g·ª≠i:</b> <code>{total_sent}</code>\n"
                f"<b>‚ùå Th·∫•t b·∫°i:</b> <code>{failed_count}</code>"
            )

            send_message_robustly(
                chat_id=message.chat.id,
                photo=NGL_SUCCESS_IMAGE_URL,
                caption=reply_text,
                parse_mode="HTML",
                reply_to_message_id=message.message_id
            )
        else:
            error_message = data.get("message", "C√≥ l·ªói x·∫£y ra khi g·ªçi API NGL.")
            send_message_robustly(message.chat.id, text=f"‚ùå L·ªói NGL API: {error_message}", parse_mode="HTML", reply_to_message_id=message.message_id)

    except requests.exceptions.ReadTimeout as e:
        logging.error(f"L·ªói timeout khi g·ªçi NGL API cho ng∆∞·ªùi d√πng {message.from_user.id}: {e}")
        send_message_robustly(message.chat.id, text="‚ùå L·ªói: API NGL kh√¥ng ph·∫£n h·ªìi k·ªãp th·ªùi. Vui l√≤ng th·ª≠ l·∫°i sau.", parse_mode="HTML", reply_to_message_id=message.message_id)
    except requests.exceptions.ConnectionError as e:
        logging.error(f"L·ªói k·∫øt n·ªëi khi g·ªçi NGL API cho ng∆∞·ªùi d√πng {message.from_user.id}: {e}")
        send_message_robustly(message.chat.id, text=f"‚ùå L·ªói k·∫øt n·ªëi ƒë·∫øn NGL API: Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra l·∫°i sau.", parse_mode="HTML", reply_to_message_id=message.message_id)
    except requests.exceptions.RequestException as e:
        logging.error(f"L·ªói HTTP (4xx/5xx) ho·∫∑c request kh√°c khi g·ªçi NGL API cho ng∆∞·ªùi d√πng {message.from_user.id}: {e}")
        send_message_robustly(message.chat.id, text=f"‚ùå L·ªói khi g·ªçi NGL API: ƒê√£ c√≥ l·ªói x·∫£y ra t·ª´ m√°y ch·ªß NGL. Chi ti·∫øt: <code>{e}</code>", parse_mode="HTML", reply_to_message_id=message.message_id)
    except ValueError as e:
        logging.error(f"L·ªói ph√¢n t√≠ch JSON t·ª´ NGL API cho ng∆∞·ªùi d√πng {message.from_user.id}: {e}")
        send_message_robustly(message.chat.id, text="‚ùå L·ªói: Ph·∫£n h·ªìi API NGL kh√¥ng h·ª£p l·ªá.", parse_mode="HTML", reply_to_message_id=message.message_id)
    except Exception as e:
        logging.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi x·ª≠ l√Ω /ngl cho ng∆∞·ªùi d√πng {message.from_user.id}: {e}")
        send_message_robustly(message.chat.id, text=f"‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi x·ª≠ l√Ω l·ªánh spam NGL: <code>{e}</code>", parse_mode="HTML", reply_to_message_id=message.message_id)

@bot.message_handler(commands=["phanhoi"])
@increment_interaction_count
def send_feedback_to_admin(message):
    """X·ª≠ l√Ω l·ªánh /phanhoi, cho ph√©p ng∆∞·ªùi d√πng g·ª≠i ph·∫£n h·ªìi ƒë·∫øn admin."""
    sync_chat_to_server(message.chat)
    feedback_text = message.text.replace("/phanhoi", "").strip()

    if not feedback_text:
        return send_message_robustly(message.chat.id, text="‚ö†Ô∏è Vui l√≤ng nh·∫≠p n·ªôi dung ph·∫£n h·ªìi. V√≠ d·ª•: <code>/phanhoi Bot b·ªã l·ªói ·ªü l·ªánh /ask</code>", parse_mode="HTML", reply_to_message_id=message.message_id)

    user_info_for_admin = f"<a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a>"
    if message.from_user.last_name:
        user_info_for_admin += f" {message.from_user.last_name}"
    if message.from_user.username:
        user_info_for_admin += f" (@{message.from_user.username})"
    user_info_for_admin += f" (<code>{message.from_user.id}</code>)"

    chat_info_for_admin = f"ID Chat: <code>{message.chat.id}</code>\n" \
                          f"Lo·∫°i Chat: {message.chat.type}"
    if message.chat.type in ["group", "supergroup"]:
        chat_info_for_admin += f"\nT√™n Chat: {message.chat.title}"

    timestamp = datetime.now().strftime("%H:%M:%S ng√†y %d/%m/%Y")

    admin_notification = (
        f"<b>üìß PH·∫¢N H·ªíI M·ªöI T·ª™ NG∆Ø·ªúI D√ôNG</b>\n\n"
        f"<b>Ng∆∞·ªùi g·ª≠i:</b>\n{user_info_for_admin}\n"
        f"<b>Th√¥ng tin Chat:</b>\n{chat_info_for_admin}\n"
        f"<b>Th·ªùi gian:</b> <code>{timestamp}</code>\n\n"
        f"<b>N·ªôi dung ph·∫£n h·ªìi:</b>\n<blockquote>{html_escape(feedback_text)}</blockquote>\n\n"
        f"<i>ƒê·ªÉ ph·∫£n h·ªìi l·∫°i ng∆∞·ªùi d√πng n√†y, h√£y reply tin nh·∫Øn n√†y v√† d√πng l·ªánh <code>/adminph &lt;n·ªôi dung ph·∫£n h·ªìi&gt;</code></i>"
    )

    try:
        sent_message_to_admin = bot.send_message(
            chat_id=ADMIN_ID,
            text=admin_notification,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        bot.feedback_messages[sent_message_to_admin.message_id] = {
            'chat_id': message.chat.id,
            'user_id': message.from_user.id,
            'user_first_name': message.from_user.first_name,
            'feedback_text': feedback_text
        }
        
        send_message_robustly(message.chat.id, text="‚úÖ C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i ph·∫£n h·ªìi! Admin s·∫Ω xem x√©t s·ªõm nh·∫•t c√≥ th·ªÉ.", parse_mode="HTML", reply_to_message_id=message.message_id)
    except Exception as e:
        logging.error(f"L·ªói khi g·ª≠i ph·∫£n h·ªìi ƒë·∫øn admin: {e}")
        send_message_robustly(message.chat.id, text="‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ª≠i ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i sau.", parse_mode="HTML", reply_to_message_id=message.message_id)

@bot.message_handler(commands=["adminph"])
@increment_interaction_count
def admin_reply_to_feedback(message):
    """X·ª≠ l√Ω l·ªánh /adminph, cho ph√©p admin ph·∫£n h·ªìi l·∫°i ng∆∞·ªùi d√πng ƒë√£ g·ª≠i feedback."""
    if message.from_user.id != ADMIN_ID:
        return send_message_robustly(message.chat.id, text="üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.", parse_mode="HTML", reply_to_message_id=message.message_id)

    if not message.reply_to_message:
        return send_message_robustly(message.chat.id, text="‚ö†Ô∏è B·∫°n c·∫ßn reply v√†o tin nh·∫Øn ph·∫£n h·ªìi c·ªßa ng∆∞·ªùi d√πng ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.", parse_mode="HTML", reply_to_message_id=message.message_id)

    original_feedback_message_id = message.reply_to_message.message_id
    feedback_data = bot.feedback_messages.get(original_feedback_message_id)

    if not feedback_data:
        return send_message_robustly(message.chat.id, text="‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin chat c·ªßa ng∆∞·ªùi d√πng n√†y. C√≥ th·ªÉ tin nh·∫Øn qu√° c≈© ho·∫∑c bot ƒë√£ kh·ªüi ƒë·ªông l·∫°i.", parse_mode="HTML", reply_to_message_id=message.message_id)

    user_chat_id = feedback_data['chat_id']
    user_id_to_tag = feedback_data['user_id']
    user_name_to_tag = feedback_data['user_first_name']
    original_feedback_text = feedback_data['feedback_text']

    admin_response_text = message.text.replace("/adminph", "").strip()

    if not admin_response_text:
        return send_message_robustly(message.chat.id, text="‚ö†Ô∏è Vui l√≤ng nh·∫≠p n·ªôi dung ph·∫£n h·ªìi c·ªßa admin. V√≠ d·ª•: <code>/adminph C·∫£m ∆°n b·∫°n, ch√∫ng t√¥i ƒë√£ kh·∫Øc ph·ª•c l·ªói.</code>", parse_mode="HTML", reply_to_message_id=message.message_id)

    user_tag = f"<a href='tg://user?id={user_id_to_tag}'>{user_name_to_tag}</a>"

    admin_reply_to_user = (
        f"<b>üë®‚Äçüíª Admin ƒë√£ ph·∫£n h·ªìi b·∫°n {user_tag}!</b>\n\n"
        f"<b>N·ªôi dung ph·∫£n h·ªìi c·ªßa b·∫°n:</b>\n"
        f"<blockquote>{html_escape(original_feedback_text)}</blockquote>\n\n"
        f"<b>Ph·∫£n h·ªìi t·ª´ Admin:</b>\n"
        f"<blockquote>{html_escape(admin_response_text)}</blockquote>\n\n"
        f"<i>N·∫øu b·∫°n c√≥ th√™m c√¢u h·ªèi, vui l√≤ng g·ª≠i ph·∫£n h·ªìi m·ªõi qua l·ªánh <code>/phanhoi</code>.</i>"
    )

    try:
        bot.send_message(
            chat_id=user_chat_id,
            text=admin_reply_to_user,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        send_message_robustly(message.chat.id, text="‚úÖ ƒê√£ g·ª≠i ph·∫£n h·ªìi c·ªßa Admin ƒë·∫øn ng∆∞·ªùi d√πng th√†nh c√¥ng.", parse_mode="HTML", reply_to_message_id=message.message_id)
    except Exception as e:
        logging.error(f"L·ªói khi g·ª≠i ph·∫£n h·ªìi c·ªßa admin ƒë·∫øn ng∆∞·ªùi d√πng {user_chat_id}: {e}")
        send_message_robustly(message.chat.id, text="‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ª≠i ph·∫£n h·ªìi c·ªßa Admin ƒë·∫øn ng∆∞·ªùi d√πng.", parse_mode="HTML", reply_to_message_id=message.message_id)

@bot.message_handler(commands=["sever"])
@increment_interaction_count
def show_groups(message):
    """X·ª≠ l√Ω l·ªánh /sever, hi·ªÉn th·ªã danh s√°ch c√°c nh√≥m bot ƒëang tham gia (ch·ªâ Admin)."""
    if message.from_user.id != ADMIN_ID:
        return send_message_robustly(message.chat.id, text="üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.", parse_mode="HTML", reply_to_message_id=message.message_id)
    if not GROUP_INFOS:
        return send_message_robustly(message.chat.id, text="üì≠ Hi·ªán t·∫°i bot ch∆∞a c√≥ th√¥ng tin v·ªÅ nh√≥m n√†o.", parse_mode="HTML", reply_to_message_id=message.message_id)
    text = "<b>üì¶ Sever:</b>\n\n"
    for g in GROUP_INFOS:
        title = g.get("title", "Kh√¥ng r√µ t√™n nh√≥m")
        link = f"https://t.me/{g.get('username')}" if g.get("username") else "‚õî Kh√¥ng c√≥ link m·ªùi"
        text += f"üìå <b>{title}</b>\n{link}\n\n"
    send_message_robustly(message.chat.id, text=text, parse_mode="HTML", disable_web_page_preview=True, reply_to_message_id=message.message_id)


# L·ªánh t·∫°o mail 10 ph√∫t
@bot.message_handler(commands=['mail10p'])
@increment_interaction_count
def handle_mail10p(message):
    sync_chat_to_server(message.chat)
    user_id = message.chat.id
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ c√≥ mail ch∆∞a v√† c√≤n th·ªùi gian kh√¥ng
    if user_id in user_data:
        elapsed_time = int(time.time() - user_data[user_id]["created_at"])
        remaining_time = 600 - elapsed_time
        if remaining_time > 0:
            minutes = remaining_time // 60
            seconds = remaining_time % 60
            
            # G·ª≠i l·∫°i th√¥ng tin mail k√®m n√∫t "Xem H·ªôp Th∆∞"
            mail_info_text = (
                f"‚ö†Ô∏è B·∫°n ƒë√£ c√≥ m·ªôt mail 10 ph√∫t r·ªìi:\n"
                f"üìß `{user_data[user_id]['email']}`\n"
                f"‚è∞ Mail n√†y s·∫Ω h·∫øt h·∫°n sau {minutes} ph√∫t {seconds} gi√¢y."
            )
            markup = build_mail_buttons(user_id, 'mail_info')
            
            sent_msg = send_message_robustly(message.chat.id, 
                                            text=mail_info_text,
                                            parse_mode='Markdown',
                                            reply_markup=markup,
                                            reply_to_message_id=message.message_id)
            if sent_msg:
                bot.mail_messages_state[sent_msg.message_id] = {'chat_id': user_id, 'user_id': user_id, 'type': 'mail_info'}
            return
        else:
            # N·∫øu h·∫øt h·∫°n nh∆∞ng ch∆∞a b·ªã x√≥a, x√≥a n√≥ ƒëi
            del user_data[user_id]
            send_message_robustly(message.chat.id, "‚è∞ Mail 10 ph√∫t c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n, ƒëang t·∫°o mail m·ªõi...", parse_mode='Markdown', reply_to_message_id=message.message_id)


    email, pwd, token = create_temp_mail()

    if email:
        user_data[user_id] = {
            "email": email,
            "password": pwd,
            "token": token,
            "created_at": time.time()
        }
        
        mail_info_text = (
            f"‚úÖ Mail 10 ph√∫t c·ªßa b·∫°n l√†:\n"
            f"üìß `{email}`\n"
            f"‚è∞ H·∫øt h·∫°n sau 10 ph√∫t."
        )
        markup = build_mail_buttons(user_id, 'mail_info')
        
        sent_msg = send_message_robustly(message.chat.id, 
                                       text=mail_info_text, 
                                       parse_mode='Markdown',
                                       reply_markup=markup,
                                       reply_to_message_id=message.message_id)
        # L∆∞u tr·ªØ ID tin nh·∫Øn ƒë·ªÉ c√≥ th·ªÉ ch·ªânh s·ª≠a sau n√†y
        if sent_msg:
            bot.mail_messages_state[sent_msg.message_id] = {'chat_id': user_id, 'user_id': user_id, 'type': 'mail_info'}
        
        threading.Thread(target=auto_delete_email, args=(user_id,)).start()
    else:
        send_message_robustly(message.chat.id, "‚ùå Kh√¥ng th·ªÉ t·∫°o email. Vui l√≤ng th·ª≠ l·∫°i sau!", parse_mode='Markdown', reply_to_message_id=message.message_id)

# L·ªánh m·ªõi ƒë·ªÉ x√≥a mail 10 ph√∫t
@bot.message_handler(commands=['xoamail10p'])
@increment_interaction_count
def handle_xoamail10p(message):
    sync_chat_to_server(message.chat)
    user_id = message.chat.id

    if user_id in user_data:
        # X√≥a t√†i kho·∫£n Mail.tm n·∫øu c√≥ th·ªÉ (th√™m logic g·ªçi API Mail.tm n·∫øu c√≥ account_id)
        # V√≠ d·ª•:
        # try:
        #     account_info = user_data[user_id]
        #     if 'account_id' in account_info and 'token' in account_info:
        #         headers = {"Authorization": f"Bearer {account_info['token']}"}
        #         session.delete(f"https://api.mail.tm/accounts/{account_info['account_id']}", headers=headers)
        #         logging.info(f"ƒê√£ x√≥a t√†i kho·∫£n Mail.tm: {account_info['email']}")
        # except Exception as e:
        #     logging.error(f"L·ªói khi x√≥a t√†i kho·∫£n Mail.tm cho user {user_id}: {e}")

        del user_data[user_id]
        send_message_robustly(message.chat.id, "<i>üóëÔ∏è Mail 10 ph√∫t c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!</i>", parse_mode='HTML', reply_to_message_id=message.message_id)
    else:
        send_message_robustly(message.chat.id, "<i>‚ö†Ô∏è B·∫°n kh√¥ng c√≥ mail 10 ph√∫t n√†o ƒëang ho·∫°t ƒë·ªông ƒë·ªÉ x√≥a.<i>", parse_mode='HTML', reply_to_message_id=message.message_id)


# H√†m n·ªôi b·ªô ƒë·ªÉ l·∫•y n·ªôi dung h·ªôp th∆∞ v√† t·∫°o markup
def _get_inbox_content(user_id):
    info = user_data.get(user_id)

    if not info:
        return "<i>‚ùå B·∫°n ch∆∞a t·∫°o email. G√µ /mail10p ƒë·ªÉ t·∫°o nh√©!</i>", None, 'HTML'

    # Ki·ªÉm tra xem mail ƒë√£ h·∫øt h·∫°n ch∆∞a
    elapsed_time = int(time.time() - info["created_at"])
    if elapsed_time >= 600: # 10 ph√∫t
        # L·∫•y th√¥ng tin email tr∆∞·ªõc khi x√≥a
        expired_mail_address = info.get('address', 'kh√¥ng x√°c ƒë·ªãnh')
        
        del user_data[user_id]
        # Th√¥ng b√°o mail h·∫øt h·∫°n v·ªõi ƒë·ªãa ch·ªâ mail c·ª• th·ªÉ v√† th√¥ng tin v·ªÅ th∆∞
        # S·ª≠ d·ª•ng parser_mode HTML v√† tag ng∆∞·ªùi d√πng (gi·∫£ ƒë·ªãnh c√°ch tag v·ªõi ID)
        reply_text = (
            f"‚è∞ <b>Mail <code>{expired_mail_address}</code> c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n!</b> "
            f"<blockquote>T·∫•t c·∫£ th∆∞ c·ªßa mail n√†y s·∫Ω b·ªã x√≥a.</blockquote> "
            f"Vui l√≤ng t·∫°o mail m·ªõi b·∫±ng l·ªánh /mail10p."
        )
        # N·∫øu b·∫°n mu·ªën tag ng∆∞·ªùi d√πng c·ª• th·ªÉ, b·∫°n c·∫ßn c√≥ username ho·∫∑c full name c·ªßa h·ªç.
        # V√≠ d·ª•: f"<a href='tg://user?id={user_id}'>Ng∆∞·ªùi d√πng c·ªßa b·∫°n</a>"
        return reply_text, None, 'HTML'

    headers = {
        "Authorization": f"Bearer {info['token']}"
    }

    try:
        r = session.get("https://api.mail.tm/messages", headers=headers)
        r.raise_for_status() # Ki·ªÉm tra l·ªói HTTP
        messages = r.json().get("hydra:member", [])
        
        reply_text = ""
        if not messages:
            reply_text = "üì≠ H·ªôp th∆∞ c·ªßa b·∫°n hi·ªán ƒëang tr·ªëng."
        else:
            reply_text = f"üì• C√≥ {len(messages)} th∆∞ trong h·ªôp th∆∞:\n"
            for msg in messages:
                sender = msg['from']['address']
                subject = msg['subject']
                preview = msg['intro']
                
                sender_esc = html_escape(sender)
                subject_esc = html_escape(subject)
                preview_esc = html_escape(preview)

                reply_text += f"\nüë§ <b>T·ª´:</b> <code>{sender_esc}</code>\n" \
                              f"‚úâÔ∏è <b>Ch·ªß ƒë·ªÅ:</b> {subject_esc}\n" \
                              f"üìù <b>N·ªôi dung:</b> {preview_esc}\n"
        
        markup = build_mail_buttons(user_id, 'inbox')
        return reply_text, markup, 'HTML'

    except Exception as e:
        logging.error(f"L·ªói khi ki·ªÉm tra h·ªôp th∆∞ Mail.tm cho user {user_id}: {e}")
        return "‚ùå L·ªói khi ki·ªÉm tra h·ªôp th∆∞. Vui l√≤ng th·ª≠ l·∫°i sau.", None, 'Markdown'


# L·ªánh ki·ªÉm tra h·ªôp th∆∞ (v·∫´n gi·ªØ ƒë·ªÉ d√πng l·ªánh /hopthu)
@bot.message_handler(commands=['hopthu'])
@increment_interaction_count
def handle_hopthu(message):
    sync_chat_to_server(message.chat)
    user_id = message.chat.id
    
    text, markup, parse_mode = _get_inbox_content(user_id)
    sent_msg = send_message_robustly(message.chat.id, 
                                   text=text, 
                                   parse_mode=parse_mode, 
                                   reply_markup=markup,
                                   reply_to_message_id=message.message_id)
    if sent_msg:
        # N·∫øu g·ª≠i tin nh·∫Øn m·ªõi, l∆∞u tr·∫°ng th√°i l√† inbox
        bot.mail_messages_state[sent_msg.message_id] = {'chat_id': user_id, 'user_id': user_id, 'type': 'inbox'}


# H√†m m·ªõi ƒë·ªÉ ƒë·ªãnh d·∫°ng ƒë·∫ßu ra AI
def format_ai_response_html(text):
    """
    Ph√¢n t√≠ch vƒÉn b·∫£n t·ª´ AI, t√°ch code block v√† vƒÉn b·∫£n th√¥ng th∆∞·ªùng,
    sau ƒë√≥ ƒë·ªãnh d·∫°ng ch√∫ng v·ªõi HTML cho Telegram, ƒë·∫∑c bi·ªát l√† th·∫ª <code>.
    Tr·∫£ v·ªÅ danh s√°ch c√°c ph·∫ßn (text ho·∫∑c code) ƒë·ªÉ x·ª≠ l√Ω.
    """
    parts = []
    # Regex ƒë·ªÉ t√¨m ki·∫øm c√°c block code Markdown (```language\ncode\n```)
    code_blocks = re.split(r"```(?:\w+)?\n(.*?)```", text, flags=re.DOTALL)

    for i, part in enumerate(code_blocks):
        if i % 2 == 0:  # Ph·∫ßn vƒÉn b·∫£n (ho·∫∑c ph·∫ßn tr∆∞·ªõc code ƒë·∫ßu ti√™n, ho·∫∑c sau code cu·ªëi c√πng)
            if part:
                parts.append({"type": "text", "content": html_escape(part.strip()), "raw_content": part.strip()})
        else:  # Ph·∫ßn code (l√† n·ªôi dung c·ªßa group 1 t·ª´ regex)
            if part:
                formatted_code = f"<code>{html_escape(part.strip())}</code>"
                parts.append({"type": "code", "content": formatted_code, "raw_content": part.strip()})
    return parts


@bot.callback_query_handler(func=lambda call: call.data.startswith("copycode|"))
def copy_code_button(call):
    """X·ª≠ l√Ω n√∫t 'Copy Code'."""
    try:
        _, code_id = call.data.split("|", 1)
        code_content = bot.code_snippets.get(code_id)

        if code_content:
            bot.answer_callback_query(call.id, text="ƒê√£ sao ch√©p n·ªôi dung code!", show_alert=True)
            try:
                bot.send_message(
                    chat_id=call.message.chat.id,
                    text=f"```\n{code_content}\n```",
                    parse_mode="MarkdownV2",
                    reply_to_message_id=call.message.message_id
                )
            except telebot.apihelper.ApiTelegramException as e:
                logging.warning(f"Failed to send code snippet for copy to chat {call.message.chat.id}: {e}. Sending plain text.")
                bot.send_message(
                    chat_id=call.message.chat.id,
                    text=f"B·∫°n c√≥ th·ªÉ sao ch√©p ƒëo·∫°n code n√†y:\n\n{code_content}",
                    reply_to_message_id=call.message.message_id
                )
        else:
            bot.answer_callback_query(call.id, text="L·ªói: Kh√¥ng t√¨m th·∫•y n·ªôi dung code n√†y.", show_alert=True)
    except Exception as e:
        logging.error(f"L·ªói khi x·ª≠ l√Ω n√∫t copy code: {e}")
        bot.answer_callback_query(call.id, text="ƒê√£ x·∫£y ra l·ªói khi sao ch√©p code.", show_alert=True)


@bot.message_handler(commands=["ask"])
@increment_interaction_count
def ask_command(message):
    """X·ª≠ l√Ω l·ªánh /ask ƒë·ªÉ g·ª≠i c√¢u h·ªèi ƒë·∫øn Gemini AI. H·ªó tr·ª£ h·ªèi k√®m ·∫£nh."""
    sync_chat_to_server(message.chat)
    prompt = message.text.replace("/ask", "").strip()
    if not prompt:
        return send_message_robustly(message.chat.id, text="‚ùì B·∫°n ch∆∞a nh·∫≠p c√¢u h·ªèi r·ªìi ƒë√≥! Vui l√≤ng g√µ <code>/ask &lt;c√¢u h·ªèi c·ªßa b·∫°n&gt;</code>.", parse_mode="HTML", reply_to_message_id=message.message_id)

    try:
        msg_status = bot.send_message(message.chat.id, "ü§ñ", reply_to_message_id=message.message_id)
    except telebot.apihelper.ApiTelegramException as e:
        logging.warning(f"Failed to send initial 'thinking' message in chat {message.chat.id}: {e}. Proceeding without reply_to.")
        msg_status = bot.send_message(message.chat.id, "ü§ñ")

    user_id = message.from_user.id
    user_name = message.from_user.first_name
    memory = load_user_memory(user_id)

    try:
        prompt_data = session.get(REMOTE_PROMPT_URL, timeout=DEFAULT_TIMEOUT_GLOBAL).json()
        system_prompt = prompt_data.get("prompt", "B·∫°n l√† AI th√¥ng minh v√† h·ªØu √≠ch.")
    except Exception as e:
        logging.error(f"L·ªói t·∫£i prompt t·ª´ xa: {e}")
        system_prompt = "B·∫°n l√† AI th√¥ng minh v√† h·ªØu √≠ch."

    history_block = ""
    if memory:
        for item in memory[-5:]:
            history_block += f"Ng∆∞·ªùi d√πng h·ªèi: {item['question']}\nAI: {item['answer']}\n"

    full_prompt = f"{system_prompt}\n\n[Ng·ªØ c·∫£nh tr∆∞·ªõc ƒë√≥ v·ªõi {user_name}]\n{history_block}\nNg∆∞·ªùi d√πng hi·ªán t·∫°i h·ªèi: {prompt}"

    headers = {"Content-Type": "application/json"}
    parts = [{"text": full_prompt}]
    image_attached = False

    if message.reply_to_message and message.reply_to_message.photo:
        try:
            photo = message.reply_to_message.photo[-1]
            file_info = bot.get_file(photo.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            image = Image.open(BytesIO(downloaded_file))
            buffer = BytesIO()
            if image.mode in ("RGBA", "P"):
                image = image.convert("RGB")
            image.save(buffer, format="JPEG")
            base64_img = base64.b64encode(buffer.getvalue()).decode()
            parts.insert(0, {
                "inline_data": {
                    "mime_type": "image/jpeg",
                    "data": base64_img
                }
            })
            image_attached = True
        except Exception as e:
            logging.error(f"L·ªói x·ª≠ l√Ω ·∫£nh ƒë√≠nh k√®m: {e}")

    data = {"contents": [{"parts": parts}]}
    try:
        res = session.post(GEMINI_URL, headers=headers, json=data, timeout=DEFAULT_TIMEOUT_GLOBAL)
        res.raise_for_status()
        result = res.json()["candidates"][0]["content"]["parts"][0]["text"]
    except Exception as e:
        try:
            bot.edit_message_text(
                f"‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ªçi API Gemini:\n<pre>{html_escape(str(e))}</pre>",
                msg_status.chat.id,
                msg_status.message_id,
                parse_mode="HTML"
            )
        except telebot.apihelper.ApiTelegramException as edit_e:
            logging.warning(f"Failed to edit message {msg_status.message_id}: {edit_e}. Sending new error message.")
            send_message_robustly(message.chat.id, text=f"‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ªçi API Gemini:\n<pre>{html_escape(str(e))}</pre>", parse_mode="HTML")
        return

    entry = {
        "question": prompt,
        "answer": result,
        "created": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "with_image": image_attached,
        "name": message.from_user.first_name
    }
    memory.append(entry)
    save_user_memory(user_id, memory)

    try:
        session.post(
            f"{REMOTE_LOG_HOST}?uid={user_id}",
            data=json.dumps(memory, ensure_ascii=False),
            headers={"Content-Type": "application/json"},
            timeout=DEFAULT_TIMEOUT_GLOBAL
        )
    except Exception as e:
        logging.error(f"L·ªói g·ª≠i log t·ª´ xa: {e}")

    # --- X·ª≠ l√Ω ƒë·ªãnh d·∫°ng v√† g·ª≠i tin nh·∫Øn ---
    response_parts_structured = format_ai_response_html(result)
    reply_id = uuid.uuid4().hex[:6]
    bot.voice_map[reply_id] = result # L∆∞u to√†n b·ªô k·∫øt qu·∫£ g·ªëc cho TTS

    # T√≠nh to√°n t·ªïng ƒë·ªô d√†i c·ªßa n·ªôi dung (th√¥) ƒë·ªÉ quy·∫øt ƒë·ªãnh g·ª≠i file hay g·ª≠i tin nh·∫Øn
    total_raw_length = 0
    full_content_for_file = []
    for part in response_parts_structured:
        total_raw_length += len(part["raw_content"])
        if part["type"] == "text":
            full_content_for_file.append(part["raw_content"])
        elif part["type"] == "code":
            full_content_for_file.append(f"\n```\n{part['raw_content']}\n```\n")

    # Telegram c√≥ gi·ªõi h·∫°n 4096 k√Ω t·ª± cho tin nh·∫Øn v√† 1024 cho caption ·∫£nh/document.
    # S·ª≠ d·ª•ng ng∆∞·ª°ng an to√†n th·∫•p h∆°n ƒë·ªÉ quy·∫øt ƒë·ªãnh g·ª≠i file.
    # N·∫øu c√≥ nhi·ªÅu code block ho·∫∑c vƒÉn b·∫£n r·∫•t d√†i, g·ª≠i file s·∫Ω t·ªët h∆°n.
    if total_raw_length > 1500 or any(p["type"] == "code" for p in response_parts_structured):
        filename = f"zproject_{reply_id}.txt"
        with open(filename, "w", encoding="utf-8") as f:
            f.write("".join(full_content_for_file)) # Vi·∫øt to√†n b·ªô n·ªôi dung ƒë√£ gom l·∫°i

        with open(filename, "rb") as f:
            try:
                bot.send_document(
                    message.chat.id,
                    f,
                    caption=f"üìÑ Tr·∫£ l·ªùi qu√° d√†i ho·∫∑c c√≥ code block! M√¨nh ƒë√£ ƒë√≥ng g√≥i v√†o file <code>{filename}</code> nha {html_escape(message.from_user.first_name)}!\n\n"
                            f"<i>Vui l√≤ng t·∫£i xu·ªëng ƒë·ªÉ xem to√†n b·ªô n·ªôi dung.</i>",
                    parse_mode="HTML",
                    reply_to_message_id=message.message_id
                )
            except telebot.apihelper.ApiTelegramException as e:
                logging.warning(f"Failed to send document replying to message {message.message_id}: {e}. Sending without reply_to.")
                f.seek(0)
                bot.send_document(
                    message.chat.id,
                    f,
                    caption=f"üìÑ Tr·∫£ l·ªùi qu√° d√†i ho·∫∑c c√≥ code block! M√¨nh ƒë√£ ƒë√≥ng g√≥i v√†o file <code>{filename}</code> nha {html_escape(message.from_user.first_name)}!\n\n"
                            f"<i>Vui l√≤ng t·∫£i xu·ªëng ƒë·ªÉ xem to√†n b·ªô n·ªôi dung.</i>",
                    parse_mode="HTML"
                )
        os.remove(filename)
        # X√≥a tin nh·∫Øn "ƒëang x·ª≠ l√Ω" ban ƒë·∫ßu
        try:
            bot.delete_message(msg_status.chat.id, msg_status.message_id)
        except telebot.apihelper.ApiTelegramException as e:
            logging.warning(f"Failed to delete status message {msg_status.message_id}: {e}")

    else: # G·ª≠i tin nh·∫Øn th√¥ng th∆∞·ªùng n·∫øu kh√¥ng qu√° d√†i ho·∫∑c kh√¥ng c√≥ code block ri√™ng
        main_markup = build_reply_button(user_id, prompt, reply_id)
        current_message_text = f"ü§ñ <i>ZProject [WORMGPT] tr·∫£ l·ªùi:</i>\n\n"
        
        # N·∫øu c√≥ code block, ch√∫ng ta s·∫Ω g·ª≠i k√®m n√∫t copy ri√™ng l·∫ª
        # N·∫øu kh√¥ng c√≥ code block, n√∫t copy s·∫Ω kh√¥ng ƒë∆∞·ª£c t·∫°o
        
        # ƒê·ªÉ ƒë∆°n gi·∫£n h√≥a, n·∫øu kh√¥ng g·ª≠i file, ta s·∫Ω gom t·∫•t c·∫£ th√†nh 1 tin nh·∫Øn HTML
        # C√°c n√∫t copy code s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ri√™ng trong callback_query_handler
        
        combined_text_for_telegram = ""
        for part in response_parts_structured:
            if part["type"] == "text":
                combined_text_for_telegram += part["content"] + "\n\n" # Th√™m xu·ªëng d√≤ng gi·ªØa c√°c ƒëo·∫°n vƒÉn b·∫£n
            elif part["type"] == "code":
                # Th√™m n√∫t copy code v√†o markup ch√≠nh cho ph·∫ßn code ƒë√≥
                copy_id = uuid.uuid4().hex[:8]
                bot.code_snippets[copy_id] = part["raw_content"]
                
                # InlineKeyboardMarkup m·ªõi cho m·ªói code block
                code_markup = InlineKeyboardMarkup()
                code_markup.add(InlineKeyboardButton("üìÑ Sao ch√©p Code", callback_data=f"copycode|{copy_id}"))

                # G·ª≠i ph·∫ßn code block ri√™ng v·ªõi n√∫t copy c·ªßa n√≥
                try:
                    # G·ª≠i text tr∆∞·ªõc n·∫øu c√≥, r·ªìi g·ª≠i code sau
                    if combined_text_for_telegram.strip():
                        bot.edit_message_text( # C·ªë g·∫Øng edit tin nh·∫Øn status n·∫øu ch∆∞a b·ªã thay th·∫ø
                            current_message_text + combined_text_for_telegram.strip(),
                            msg_status.chat.id,
                            msg_status.message_id,
                            parse_mode="HTML"
                        )
                        msg_status = None # ƒê√£ s·ª≠ d·ª•ng tin nh·∫Øn status
                    
                    bot.send_message(
                        message.chat.id,
                        text=f"<b>Code:</b>\n{part['content']}", # ƒê√£ l√† HTML escaped
                        parse_mode="HTML",
                        reply_markup=code_markup,
                        reply_to_message_id=message.message_id # Reply v·ªÅ tin nh·∫Øn g·ªëc
                    )
                except telebot.apihelper.ApiTelegramException as e:
                    logging.warning(f"Failed to send code part in chat {message.chat.id}: {e}. Sending without reply_to.")
                    bot.send_message(
                        message.chat.id,
                        text=f"<b>Code:</b>\n{part['content']}",
                        parse_mode="HTML",
                        reply_markup=code_markup
                    )
                combined_text_for_telegram = "" # Reset sau khi g·ª≠i code
        
        # G·ª≠i ph·∫ßn vƒÉn b·∫£n cu·ªëi c√πng (n·∫øu c√≥) v√† c√°c n√∫t chung
        final_response_text = current_message_text + combined_text_for_telegram.strip()
        
        try:
            if msg_status: # N·∫øu tin nh·∫Øn status ban ƒë·∫ßu v·∫´n c√≤n
                bot.edit_message_text(
                    final_response_text,
                    msg_status.chat.id,
                    msg_status.message_id,
                    parse_mode="HTML",
                    reply_markup=main_markup
                )
            else: # N·∫øu tin nh·∫Øn status ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng (v√≠ d·ª• ƒë·ªÉ g·ª≠i ph·∫ßn text tr∆∞·ªõc code)
                bot.send_message(
                    message.chat.id,
                    text=final_response_text,
                    parse_mode="HTML",
                    reply_markup=main_markup,
                    reply_to_message_id=message.message_id # Reply v·ªÅ tin nh·∫Øn g·ªëc
                )
        except telebot.apihelper.ApiTelegramException as e:
            logging.warning(f"Failed to send/edit final message in chat {message.chat.id}: {e}. Sending as new message.")
            send_message_robustly(
                message.chat.id,
                text=final_response_text,
                parse_mode="HTML",
                reply_markup=main_markup,
                reply_to_message_id=message.message_id
            )
        except Exception as e:
            logging.error(f"Error in final message sending for /ask: {e}")
            send_message_robustly(message.chat.id, text=f"‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ª≠i k·∫øt qu·∫£: {e}", parse_mode="HTML", reply_to_message_id=message.message_id)


# --- N√öT CALLBACK C·ª¶A BOT ZPROJECT ---

@bot.callback_query_handler(func=lambda call: call.data.startswith("retry|"))
def retry_button(call):
    """X·ª≠ l√Ω n√∫t 'Tr·∫£ l·ªùi l·∫°i' t·ª´ c√¢u h·ªèi /ask."""
    try:
        _, uid, question = call.data.split("|", 2)
        if str(call.from_user.id) != uid:
            return bot.answer_callback_query(call.id, "üö´ B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi y√™u c·∫ßu c√¢u h·ªèi n√†y.", show_alert=True)

        # T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng message gi·∫£ l·∫≠p ƒë·ªÉ truy·ªÅn v√†o ask_command
        msg = SimpleNamespace(
            chat=call.message.chat,
            message_id=call.message.message_id,
            text="/ask " + question,
            from_user=call.from_user,
            reply_to_message=None # Gi·∫£ ƒë·ªãnh kh√¥ng c√≥ reply_to_message khi retry
        )

        bot.answer_callback_query(call.id, "üîÅ ƒêang th·ª≠ l·∫°i c√¢u h·ªèi...")
        try:
            bot.edit_message_text("ü§ñ ƒêang x·ª≠ l√Ω l·∫°i...", call.message.chat.id, call.message.message_id)
        except telebot.apihelper.ApiTelegramException as e:
            logging.warning(f"Failed to edit message {call.message.message_id} on retry: {e}. Sending new 'thinking' message.")
            bot.send_message(call.message.chat.id, "ü§ñ ƒêang x·ª≠ l√Ω l·∫°i...", reply_to_message_id=call.message.message_id)

        ask_command(msg)
    except Exception as e:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è L·ªói khi th·ª≠ l·∫°i!", show_alert=True)
        logging.error(f"[RETRY] L·ªói: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("tts|"))
def tts_button(call):
    """X·ª≠ l√Ω n√∫t 'Chuy·ªÉn sang Voice' t·ª´ c√¢u tr·∫£ l·ªùi /ask."""
    try:
        parts = call.data.split("|")
        uid = parts[1]
        reply_id = parts[2]

        if str(call.from_user.id) != uid:
            return bot.answer_callback_query(call.id, "üö´ B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi y√™u c·∫ßu voice n√†y.", show_alert=True)

        answer = bot.voice_map.get(reply_id)
        if not answer:
            return bot.answer_callback_query(call.id, "‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu gi·ªçng n√≥i.", show_alert=True)

        # X√≥a c√°c ƒë·ªãnh d·∫°ng HTML v√† Markdown ƒë·ªÉ gTTS ch·ªâ nh·∫≠n vƒÉn b·∫£n thu·∫ßn
        clean_text = re.sub(r"<code>.*?</code>", "", answer, flags=re.DOTALL)
        clean_text = re.sub(r"<[^>]+>", "", clean_text)
        clean_text = re.sub(r"```.*?```", "", clean_text, flags=re.DOTALL)
        clean_text = clean_text.replace('"', '').replace("'", '')

        text_to_speak = clean_text.strip()

        if not text_to_speak or len(text_to_speak) < 5:
            return bot.answer_callback_query(call.id, "‚ùó N·ªôi dung qu√° ng·∫Øn ho·∫∑c r·ªóng ƒë·ªÉ chuy·ªÉn voice.", show_alert=True)

        filename = f"zproject_tts_{reply_id}.mp3"
        tts = gTTS(text=text_to_speak, lang="vi", slow=False)
        tts.save(filename)

        with open(filename, "rb") as f:
            try:
                bot.send_voice(call.message.chat.id, f, caption="üó£Ô∏è ƒê√¢y l√† Voice ZProject:v", reply_to_message_id=call.message.message_id)
            except telebot.apihelper.ApiTelegramException as e:
                logging.warning(f"Failed to send voice replying to message {call.message.message_id}: {e}. Sending without reply_to.")
                f.seek(0)
                bot.send_voice(call.message.chat.id, f, caption="üó£Ô∏è ƒê√¢y l√† Voice ZProject:v")
        os.remove(filename)
        bot.answer_callback_query(call.id, "üéß Voice ƒë√£ ƒë∆∞·ª£c g·ª≠i!")
    except Exception as e:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è L·ªói khi t·∫°o voice.", show_alert=True)
        logging.error(f"[TTS] L·ªói: {e}")

# --- N√öT CALLBACK C·ª¶A MAIL.TM ---

def check_mail_owner(call, expected_user_id):
    """Ki·ªÉm tra xem ng∆∞·ªùi nh·∫•n n√∫t c√≥ ph·∫£i l√† ng∆∞·ªùi ƒë√£ t·∫°o mail kh√¥ng."""
    # Chuy·ªÉn expected_user_id sang int ƒë·ªÉ so s√°nh ch√≠nh x√°c
    if call.from_user.id != int(expected_user_id):
        bot.answer_callback_query(call.id, "üö´ Chat Ri√™ng V·ªõi Bot ƒê·ªÉ D√πng Ch·ª©c NƒÉng Mail10p .", show_alert=True)
        return False
    return True

@bot.callback_query_handler(func=lambda call: call.data.startswith("mailtm_inbox|"))
def show_inbox_button(call):
    user_id = call.message.chat.id
    expected_user_id = call.data.split("|")[1]

    if not check_mail_owner(call, expected_user_id):
        return

    bot.answer_callback_query(call.id, "ƒêang t·∫£i h·ªôp th∆∞...", show_alert=False)

    text, markup, parse_mode = _get_inbox_content(user_id)

    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode=parse_mode,
            reply_markup=markup
        )
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i tin nh·∫Øn
        bot.mail_messages_state[call.message.message_id]['type'] = 'inbox'
    except telebot.apihelper.ApiTelegramException as e:
        if "message is not modified" in str(e):
            logging.info(f"Message {call.message.message_id} in chat {call.message.chat.id} was not modified (inbox).")
        else:
            logging.error(f"L·ªói khi ch·ªânh s·ª≠a tin nh·∫Øn th√†nh h·ªôp th∆∞ cho user {user_id}: {e}")
            send_message_robustly(call.message.chat.id, text=text, parse_mode=parse_mode, reply_markup=markup)
            # X√≥a tr·∫°ng th√°i c≈© v√† th√™m tr·∫°ng th√°i m·ªõi
            if call.message.message_id in bot.mail_messages_state:
                del bot.mail_messages_state[call.message.message_id]
            sent_msg = send_message_robustly(call.message.chat.id, "‚ùå ƒê√£ c√≥ l·ªói khi c·∫≠p nh·∫≠t h·ªôp th∆∞. ƒê√¢y l√† tin nh·∫Øn m·ªõi.", parse_mode="HTML")
            if sent_msg:
                bot.mail_messages_state[sent_msg.message_id] = {'chat_id': user_id, 'user_id': user_id, 'type': 'inbox'}
            
    except Exception as e:
        logging.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi xem h·ªôp th∆∞: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è L·ªói khi xem h·ªôp th∆∞!", show_alert=True)


@bot.callback_query_handler(func=lambda call: call.data.startswith("mailtm_refresh|"))
def refresh_inbox_button(call):
    user_id = call.message.chat.id
    expected_user_id = call.data.split("|")[1]

    if not check_mail_owner(call, expected_user_id):
        return

    bot.answer_callback_query(call.id, "ƒêang l√†m m·ªõi h·ªôp th∆∞...", show_alert=False)

    text, markup, parse_mode = _get_inbox_content(user_id)

    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode=parse_mode,
            reply_markup=markup
        )
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i tin nh·∫Øn
        bot.mail_messages_state[call.message.message_id]['type'] = 'inbox'
    except telebot.apihelper.ApiTelegramException as e:
        if "message is not modified" in str(e):
            logging.info(f"Message {call.message.message_id} in chat {call.message.chat.id} was not modified (refresh inbox).")
        else:
            logging.error(f"L·ªói khi l√†m m·ªõi h·ªôp th∆∞ cho user {user_id}: {e}")
            send_message_robustly(call.message.chat.id, text=text, parse_mode=parse_mode, reply_markup=markup)
            # X√≥a tr·∫°ng th√°i c≈© v√† th√™m tr·∫°ng th√°i m·ªõi
            if call.message.message_id in bot.mail_messages_state:
                del bot.mail_messages_state[call.message.message_id]
            sent_msg = send_message_robustly(call.message.chat.id, "‚ùå ƒê√£ c√≥ l·ªói khi l√†m m·ªõi h·ªôp th∆∞. ƒê√¢y l√† tin nh·∫Øn m·ªõi.", parse_mode="HTML")
            if sent_msg:
                bot.mail_messages_state[sent_msg.message_id] = {'chat_id': user_id, 'user_id': user_id, 'type': 'inbox'}
    except Exception as e:
        logging.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi l√†m m·ªõi h·ªôp th∆∞: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è L·ªói khi l√†m m·ªõi h·ªôp th∆∞!", show_alert=True)


@bot.callback_query_handler(func=lambda call: call.data.startswith("mailtm_back|"))
def back_to_mail_info_button(call):
    user_id = call.message.chat.id
    expected_user_id = call.data.split("|")[1]

    if not check_mail_owner(call, expected_user_id):
        return
    
    bot.answer_callback_query(call.id, "Quay l·∫°i th√¥ng tin mail...", show_alert=False)

    info = user_data.get(user_id)

    if not info:
        text = "<i>‚ùå B·∫°n ch∆∞a t·∫°o email. G√µ /mail10p ƒë·ªÉ t·∫°o nh√©!</i>"
        markup = None
        parse_mode = 'HTML'
    else:
        elapsed_time = int(time.time() - info["created_at"])
        remaining_time = 600 - elapsed_time
        if remaining_time > 0:
            minutes = remaining_time // 60
            seconds = remaining_time % 60
            text = (
                f"<blockquote>‚úÖ Mail 10 ph√∫t c·ªßa b·∫°n l√†:\n"
                f"<code>üìß {info['email']}</code>\n"
                f"‚è∞ H·∫øt h·∫°n sau {minutes} ph√∫t {seconds} gi√¢y.</blockquote>"
            )
            markup = build_mail_buttons(user_id, 'mail_info')
            parse_mode = 'HTML'
        else:
            del user_data[user_id]
            text = "‚è∞ Mail 10 ph√∫t c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n! Vui l√≤ng t·∫°o mail m·ªõi b·∫±ng l·ªánh /mail10p."
            markup = None
            parse_mode = 'HTML'
    
    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode=parse_mode,
            reply_markup=markup
        )
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i tin nh·∫Øn
        bot.mail_messages_state[call.message.message_id]['type'] = 'mail_info'
    except telebot.apihelper.ApiTelegramException as e:
        if "message is not modified" in str(e):
            logging.info(f"Message {call.message.message_id} in chat {call.message.chat.id} was not modified (back to mail info).")
        else:
            logging.error(f"L·ªói khi ch·ªânh s·ª≠a tin nh·∫Øn v·ªÅ th√¥ng tin mail cho user {user_id}: {e}")
            send_message_robustly(call.message.chat.id, text=text, parse_mode=parse_mode, reply_markup=markup)
            # X√≥a tr·∫°ng th√°i c≈© v√† th√™m tr·∫°ng th√°i m·ªõi
            if call.message.message_id in bot.mail_messages_state:
                del bot.mail_messages_state[call.message.message_id]
            sent_msg = send_message_robustly(call.message.chat.id, "‚ùå ƒê√£ c√≥ l·ªói khi quay l·∫°i th√¥ng tin mail. ƒê√¢y l√† tin nh·∫Øn m·ªõi.", parse_mode="HTML")
            if sent_msg:
                bot.mail_messages_state[sent_msg.message_id] = {'chat_id': user_id, 'user_id': user_id, 'type': 'mail_info'}
    except Exception as e:
        logging.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi quay l·∫°i th√¥ng tin mail: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è L·ªói khi quay l·∫°i th√¥ng tin mail!", show_alert=True)

# === Webhook Flask ===
@app.route("/")
def index():
    """Trang ch·ªß ƒë∆°n gi·∫£n cho bi·∫øt bot ƒëang ho·∫°t ƒë·ªông."""
    return "<h3>üõ∞Ô∏è ZProject Bot ƒëang ho·∫°t ƒë·ªông!</h3>"

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    """ƒêi·ªÉm cu·ªëi webhook ƒë·ªÉ nh·∫≠n c·∫≠p nh·∫≠t t·ª´ Telegram."""
    try:
        update = telebot.types.Update.de_json(request.data.decode("utf-8"))
        bot.process_new_updates([update])
        return "OK", 200
    except Exception as e:
        logging.error(f"L·ªói webhook: {e}")
        return "Error", 500

# === Kh·ªüi ch·∫°y Bot ===
if __name__ == "__main__":
    try:
        webhook_info = bot.get_webhook_info()
        current_webhook_url = f"{APP_URL}/{TOKEN}"
        if webhook_info.url != current_webhook_url:
            logging.info(f"Webhook hi·ªán t·∫°i ({webhook_info.url}) kh√¥ng kh·ªõp v·ªõi URL mong mu·ªën ({current_webhook_url}). ƒêang x√≥a v√† ƒë·∫∑t l·∫°i webhook.")
            bot.remove_webhook()
            time.sleep(1)
            bot.set_webhook(url=current_webhook_url)
            logging.info(f"Webhook ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t t·ªõi: {current_webhook_url}")
        else:
            logging.info(f"Webhook ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t ch√≠nh x√°c t·ªõi: {current_webhook_url}")

        port = int(os.environ.get("PORT", 10000))
        app.run(host="0.0.0.0", port=port)
    except Exception as e:
        logging.critical(f"L·ªói nghi√™m tr·ªçng khi kh·ªüi ƒë·ªông bot: {e}")
