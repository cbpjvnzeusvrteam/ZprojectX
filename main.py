import os
import time
import logging
import requests
import re
import base64
import uuid
import json
from datetime import datetime
from io import BytesIO
from PIL import Image # ƒê·∫£m b·∫£o Pillow ƒë∆∞·ª£c c√†i ƒë·∫∑t n·∫øu d√πng ch·ª©c nƒÉng ·∫£nh
import random
import string
import threading # Th√™m import n√†y cho auto_delete_email v√† Locks
from telebot import types
from flask import Flask, request
from threading import Thread
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from types import SimpleNamespace

# --- C·∫•u h√¨nh logging ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)

# --- C·∫•u h√¨nh chung ---
# L·∫•y BOT_TOKEN t·ª´ bi·∫øn m√¥i tr∆∞·ªùng, ho·∫∑c d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ (ch·ªâ ƒë·ªÉ ph√°t tri·ªÉn)
TOKEN = os.environ.get("BOT_TOKEN", "7539540916:AAENFBF2B2dyXLITmEC2ccgLYim2t9vxOQk") # THAY B·∫∞NG TOKEN BOT C·ª¶A B·∫†N
ADMIN_ID = int(os.environ.get("ADMIN_ID", 5819094246)) # THAY B·∫∞NG ID ADMIN C·ª¶A B·∫†N

# ƒê·∫£m b·∫£o APP_URL l√† URL thu·∫ßn t√∫y, kh√¥ng c√≥ Markdown
APP_URL = os.environ.get("APP_URL", "https://zproject-111.onrender.com") # THAY B·∫∞NG URL APP C·ª¶A B·∫†N

logging.info(f"APP_URL ƒë∆∞·ª£c c·∫•u h√¨nh: {APP_URL}")

# THAY ƒê·ªîI QUAN TR·ªåNG: B·∫¨T CH·∫æ ƒê·ªò ƒêA LU·ªíNG
bot = telebot.TeleBot(TOKEN, threaded=True) # <<< ƒê√É CH·ªàNH S·ª¨A ·ªû ƒê√ÇY
app = Flask(__name__)
START_TIME = time.time()

# Bi·∫øn to√†n c·ª•c v√† c√°c Lock ƒë·ªÉ b·∫£o v·ªá truy c·∫≠p ƒëa lu·ªìng
USER_IDS = set()
GROUP_INFOS = []
user_data = {}
bot.feedback_messages = {}
bot.code_snippets = {}
bot.voice_map = {}
bot.mail_messages_state = {}
interaction_count = 0

# Kh·ªüi t·∫°o Locks cho c√°c bi·∫øn d√πng chung
user_data_lock = threading.Lock()
feedback_messages_lock = threading.Lock()
code_snippets_lock = threading.Lock()
voice_map_lock = threading.Lock()
mail_messages_state_lock = threading.Lock() # Th√™m lock cho bot.mail_messages_state
interaction_count_lock = threading.Lock()
user_group_info_lock = threading.Lock()


# --- C·∫•u h√¨nh Requests v·ªõi Retry v√† Timeout chung ---
session = requests.Session()
retries = Retry(total=3, backoff_factor=1, status_forcelist=[502, 503, 504])
adapter = HTTPAdapter(max_retries=retries)
session.mount("https://", adapter)
session.mount("http://", adapter)

DEFAULT_TIMEOUT_GLOBAL = 30 # Timeout m·∫∑c ƒë·ªãnh cho c√°c request kh√°c
NGL_REQUEST_TIMEOUT = 15 # Timeout ri√™ng cho NGL (c√≥ th·ªÉ ƒë·∫∑t ng·∫Øn h∆°n ƒë·ªÉ b·ªè qua nhanh)

# Ghi ƒë√® ph∆∞∆°ng th·ª©c request ƒë·ªÉ √°p d·ª•ng timeout m·∫∑c ƒë·ªãnh, nh∆∞ng NGL s·∫Ω d√πng timeout ri√™ng
class TimeoutSession(requests.Session):
    def request(self, method, url, **kwargs):
        # Apply NGL_REQUEST_TIMEOUT if it's an NGL URL, otherwise use DEFAULT_TIMEOUT_GLOBAL
        if "zeusvr.x10.mx/ngl" in url:
            kwargs.setdefault('timeout', NGL_REQUEST_TIMEOUT)
        else:
            kwargs.setdefault('timeout', DEFAULT_TIMEOUT_GLOBAL)
        return super(TimeoutSession, self).request(method, url, **kwargs)

session = TimeoutSession()
session.mount("https://", adapter)
session.mount("http://", adapter)

# --- C·∫•u h√¨nh Gemini API v√† Prompt t·ª´ xa ---
GEMINI_API_KEY = "AIzaSyDpmTfFibDyskBHwekOADtstWsPUCbIrzE" # THAY B·∫∞NG KH√ìA API GEMINI C·ª¶A B·∫†N
GEMINI_URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={GEMINI_API_KEY}"
REMOTE_PROMPT_URL = "https://zcode.x10.mx/prompt.json"
REMOTE_LOG_HOST = "https://zcode.x10.mx/save.php"

# --- URL ·∫£nh d√πng trong bot ---
NGL_SUCCESS_IMAGE_URL = "https://i.ibb.co/fV1srXJ8/9885878c-2a4b-4246-ae2e-fda17d735e2d.jpg"
START_IMAGE_URL = "https://i.ibb.co/MkQ2pTjv/ca68c4b2-60dc-4eb1-9a20-ebf2cc5c577f.jpg"
NOTI_IMAGE_URL = "https://i.ibb.co/QvrB4zMB/ca68c4b2-2a4b-4246-ae2e-fda17d735e2d.jpg"
TUONGTAC_IMAGE_URL = "https://i.ibb.co/YF4yRCBP/1751301092916.png"

# --- C√°c h√†m Dummy (C·∫ßn thay th·∫ø b·∫±ng logic th·ª±c t·∫ø c·ªßa b·∫°n) ---
def load_user_memory(user_id):
    """T·∫£i l·ªãch s·ª≠ tr√≤ chuy·ªán c·ªßa ng∆∞·ªùi d√πng."""
    # ƒê√¢y l√† h√†m dummy, h√£y thay th·∫ø b·∫±ng logic t·∫£i d·ªØ li·ªáu th·ª±c t·∫ø
    return []

def save_user_memory(user_id, memory):
    """L∆∞u l·ªãch s·ª≠ tr√≤ chuy·ªán c·ªßa ng∆∞·ªùi d√πng."""
    # ƒê√¢y l√† h√†m dummy, h√£y thay th·∫ø b·∫±ng logic l∆∞u d·ªØ li·ªáu th·ª±c t·∫ø
    pass

def html_escape(text):
    """ƒê·ªãnh d·∫°ng vƒÉn b·∫£n th√†nh HTML, tr√°nh l·ªói k√Ω t·ª± ƒë·∫∑c bi·ªát."""
    return text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;").replace('"', "&quot;").replace("'", "&#039;")

class gTTS:
    """Class dummy cho gTTS. Thay th·∫ø b·∫±ng th∆∞ vi·ªán gTTS th·ª±c t·∫ø n·∫øu b·∫°n mu·ªën ch·ª©c nƒÉng n√†y ho·∫°t ƒë·ªông."""
    def __init__(self, text, lang="vi", slow=False):
        self.text = text
        self.lang = lang
        self.slow = slow
    def save(self, filename):
        logging.info(f"Dummy gTTS: Saving '{self.text[:50]}...' to {filename}")
        with open(filename, "wb") as f:
            f.write(b"dummy_audio_data")

# --- C√°c h√†m h·ªó tr·ª£ cho ch·ª©c nƒÉng Mail.tm ---

# T·∫°o chu·ªói ng·∫´u nhi√™n
def random_string(length=3):
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=length))

# T·ª± ƒë·ªông x√≥a email sau 10 ph√∫t
def auto_delete_email(user_id):
    time.sleep(600)  # 10 ph√∫t
    with user_data_lock: # B·∫£o v·ªá truy c·∫≠p user_data
        if user_id in user_data:
            # TH·ª∞C HI·ªÜN X√ìA T√ÄI KHO·∫¢N TR√äN MAIL.TM N·∫æU C√ì TH·ªÇ
            # V√≠ d·ª• (c·∫ßn l∆∞u account_id v√† token v√†o user_data khi t·∫°o mail):
            # try:
            #     account_info = user_data[user_id]
            #     if 'account_id' in account_info and 'token' in account_info:
            #         headers = {"Authorization": f"Bearer {account_info['token']}"}
            #         session.delete(f"https://api.mail.tm/accounts/{account_info['account_id']}", headers=headers)
            #         logging.info(f"ƒê√£ x√≥a t√†i kho·∫£n Mail.tm: {account_info['email']}")
            # except Exception as e:
            #     logging.error(f"L·ªói khi x√≥a t√†i kho·∫£n Mail.tm cho user {user_id}: {e}")

            del user_data[user_id]
            send_message_robustly(user_id, "‚è∞ Mail 10 ph√∫t c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n!")

# L·∫•y domain c√≥ s·∫µn t·ª´ API mail.tm
def get_domain():
    # S·ª≠ d·ª•ng session ƒë√£ c·∫•u h√¨nh c·ªßa ZProject bot
    try:
        r = session.get("https://api.mail.tm/domains")
        r.raise_for_status() # Ki·ªÉm tra l·ªói HTTP
        domains = r.json()["hydra:member"]
        # L·ªçc c√°c domain c√≥ isActive = True
        active_domains = [d for d in domains if d.get('isActive', False)]
        if active_domains:
            return random.choice(active_domains)["domain"] # Ch·ªçn ng·∫´u nhi√™n m·ªôt domain
        return None
    except requests.exceptions.RequestException as e: # B·∫Øt l·ªói requests c·ª• th·ªÉ
        logging.error(f"L·ªói khi l·∫•y domain t·ª´ Mail.tm: {e}")
        return None
    except Exception as e: # B·∫Øt c√°c l·ªói kh√°c
        logging.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi l·∫•y domain t·ª´ Mail.tm: {e}")
        return None

# ƒêƒÉng k√Ω v√† l·∫•y token
def create_temp_mail():
    domain = get_domain()
    if not domain:
        return None, None, None

    email = f"zproject_{random_string()}@{domain}"
    password = random_string(12)

    try:
        # T·∫°o t√†i kho·∫£n
        r_acc = session.post("https://api.mail.tm/accounts", json={
            "address": email,
            "password": password
        })
        r_acc.raise_for_status()

        # ƒêƒÉng nh·∫≠p ƒë·ªÉ l·∫•y token
        r_token = session.post("https://api.mail.tm/token", json={
            "address": email,
            "password": password
        })
        r_token.raise_for_status()

        token = r_token.json()['token']
        return email, password, token
    except Exception as e:
        logging.error(f"L·ªói khi t·∫°o/ƒëƒÉng nh·∫≠p mail.tm: {e}")
        return None, None, None

# H√†m x√¢y d·ª±ng c√°c n√∫t cho Mail.tm
def build_mail_buttons(user_id, state):
    markup = InlineKeyboardMarkup()
    # Th√™m user_id v√†o callback_data ƒë·ªÉ ki·ªÉm tra quy·ªÅn
    if state == 'mail_info':
        markup.row(InlineKeyboardButton("üì© Xem H·ªôp Th∆∞", callback_data=f"mailtm_inbox|{user_id}"))
    elif state == 'inbox':
        markup.row(
            InlineKeyboardButton("üîÑ L√†m M·ªõi", callback_data=f"mailtm_refresh|{user_id}"),
            InlineKeyboardButton("‚Ü©Ô∏è Quay L·∫°i", callback_data=f"mailtm_back|{user_id}")
        )
    return markup


# === ƒê·ªìng b·ªô nh√≥m/ng∆∞·ªùi d√πng t·ª´ API ===
def sync_chat_to_server(chat):
    """ƒê·ªìng b·ªô th√¥ng tin chat (ng∆∞·ªùi d√πng/nh√≥m) l√™n server t·ª´ xa."""
    if chat.type not in ["private", "group", "supergroup"]:
        return
    try:
        payload = {
            "id": chat.id,
            "type": chat.type,
            "title": getattr(chat, "title", ""),
            "username": getattr(chat, "username", "")
        }
        response = session.post("https://zcode.x10.mx/apizproject.php", json=payload, timeout=DEFAULT_TIMEOUT_GLOBAL)
        response.raise_for_status()
        logging.info(f"Synced chat {chat.id} to server")
    except Exception as e:
        logging.error(f"Error syncing chat {chat.id}: {e}")

def update_id_list_loop():
    """V√≤ng l·∫∑p ƒë·ªãnh k·ª≥ ƒë·ªÉ c·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi d√πng v√† nh√≥m t·ª´ API."""
    global USER_IDS, GROUP_INFOS
    while True:
        try:
            response = session.get("https://zcode.x10.mx/group-idchat.json", timeout=DEFAULT_TIMEOUT_GLOBAL)
            response.raise_for_status()
            data = response.json()
            new_users = set(data.get("users", []))
            new_groups = data.get("groups", [])
            
            with user_group_info_lock: # B·∫£o v·ªá USER_IDS v√† GROUP_INFOS
                if new_users != USER_IDS or new_groups != GROUP_INFOS:
                    USER_IDS = new_users
                    GROUP_INFOS = new_groups
                    logging.info("Updated user and group lists")
        except Exception as e:
            logging.error(f"Error updating lists: {e}")
        time.sleep(10) # ƒê·ª£i 30 gi√¢y tr∆∞·ªõc khi c·∫≠p nh·∫≠t l·∫°i

# Kh·ªüi ch·∫°y lu·ªìng c·∫≠p nh·∫≠t ID
Thread(target=update_id_list_loop, daemon=True).start()

# --- H√†m h·ªó tr·ª£ cho /ask v√† callbacks ---
def build_reply_button(user_id, question, reply_id=None):
    """T·∫°o c√°c n√∫t ph·∫£n h·ªìi cho tin nh·∫Øn /ask."""
    # Gi·ªõi h·∫°n ƒë·ªô d√†i c·ªßa question ƒë·ªÉ tr√°nh l·ªói callback_data qu√° d√†i
    safe_q = (re.sub(r"[^\w\s]", "", question.strip())[:50] + '...') if len(question.strip()) > 50 else question.strip()
    
    markup = InlineKeyboardMarkup()
    buttons = [
        InlineKeyboardButton("üîÅ Tr·∫£ l·ªùi l·∫°i", callback_data=f"retry|{user_id}|{safe_q}")
    ]
    if reply_id:
        buttons.append(InlineKeyboardButton("üîä Chuy·ªÉn sang Voice", callback_data=f"tts|{user_id}|{reply_id}"))
    markup.row(*buttons)
    return markup

# Decorator ƒë·ªÉ tƒÉng interaction_count cho m·ªói l·ªánh
def increment_interaction_count(func):
    def wrapper(message, *args, **kwargs):
        global interaction_count
        with interaction_count_lock: # S·ª≠ d·ª•ng lock
            interaction_count += 1 # TƒÉng s·ªë l∆∞·ª£t t∆∞∆°ng t√°c
        return func(message, *args, **kwargs)
    return wrapper

# H√†m g·ª≠i tin nh·∫Øn c√≥ x·ª≠ l√Ω l·ªói reply_to_message_id
def send_message_robustly(chat_id, text=None, photo=None, caption=None, reply_markup=None, parse_mode="HTML", reply_to_message_id=None, disable_web_page_preview=None):
    try:
        if photo:
            return bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption=caption,
                reply_markup=reply_markup,
                parse_mode=parse_mode,
                reply_to_message_id=reply_to_message_id
            )
        else:
            return bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode,
                reply_to_message_id=reply_to_message_id,
                disable_web_page_preview=disable_web_page_preview
            )
    except telebot.apihelper.ApiTelegramException as e:
        if "message to be replied not found" in str(e):
            logging.warning(f"Failed to reply to message {reply_to_message_id} in chat {chat_id}: {e}. Sending as new message.")
            if photo:
                return bot.send_photo(
                    chat_id=chat_id,
                    photo=photo,
                    caption=caption,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
            else:
                return bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode,
                    disable_web_page_preview=disable_web_page_preview
                )
        else:
            logging.error(f"Error sending message to chat {chat_id}: {e}")
            raise

# === L·ªÜNH X·ª¨ L√ù TIN NH·∫ÆN ===

# --- TH√äM V√ÄO PH·∫¶N KHAI B√ÅO BI·∫æN TO√ÄN C·ª§C C·ª¶A BOT ZPROJECT C·ª¶A B·∫†N ---
import threading
import time
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging
import datetime
import random
import string
import re
import queue
import requests
from requests.exceptions import ProxyError

# C√†i ƒë·∫∑t c·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# Bi·∫øn to√†n c·ª•c cho qu·∫£n l√Ω tr·∫°ng th√°i c·ªßa l·ªánh /locket
# user_id: { 'step': 'waiting_for_target', 'target': None, 'message_id': None, 'chat_id': None, 'spam_thread': None, 'last_action_time': None, 'current_attack_count': 0 }
locket_states = {}
locket_states_lock = threading.Lock()

# Bi·∫øn to√†n c·ª•c cho Rate Limiting
LAST_LOCKET_COMMAND_TIME = {}
RATE_LIMIT_DURATION = 300 # 5 ph√∫t = 300 gi√¢y

# Bi·∫øn to√†n c·ª•c cho Proxy
proxy_queue = queue.Queue()
last_proxy_update_time = 0
proxy_update_interval = 300 # 5 ph√∫t

# ƒê·ªãnh nghƒ©a c√°c ngu·ªìn proxy mi·ªÖn ph√≠ v√† uy t√≠n (c·∫≠p nh·∫≠t n·∫øu c·∫ßn)
FREE_PROXY_SOURCES = [
    'https://api.proxyscrape.com/v2/?request=displayproxies&protocol=http&timeout=10000&country=all&ssl=all&anonymity=all',
    'https://api.proxyscrape.com/v2/?request=displayproxies&protocol=https&timeout=20000&country=all&ssl=all&anonymity=all',
    'https://raw.githubusercontent.com/Zaeem20/FREE_PROXIES_LIST/master/http.txt',
    'https://raw.githubusercontent.com/Zaeem20/FREE_PROXIES_LIST/master/https.txt',
    'https://raw.githubusercontent.com/monosans/proxy-list/main/proxies/http.txt',
    'https://raw.githubusercontent.com/clarketm/proxy-list/master/proxy-list-raw.txt',
    'https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/http.txt',
    'https://raw.githubusercontent.com/sunny9577/proxies/master/proxies.txt'
]



# --- TH√äM V√ÄO CODE BOT C·ª¶A B·∫†N (C√ôNG V·ªöI C√ÅC @bot.message_handler kh√°c) ---

@bot.message_handler(commands=["locket"])
# @increment_interaction_count # N·∫øu b·∫°n c√≥ h√†m n√†y ƒë·ªÉ ƒë·∫øm t∆∞∆°ng t√°c, h√£y b·ªè comment
def handle_locket_command(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    # Ki·ªÉm tra quy·ªÅn admin
    if user_id != ADMIN_ID:
        return send_message_robustly(chat_id, text="üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.", parse_mode="HTML", reply_to_message_id=message.message_id)

    # Ki·ªÉm tra rate limit
    with locket_states_lock:
        last_time = LAST_LOCKET_COMMAND_TIME.get(user_id)
        current_time = time.time()
        if last_time and (current_time - last_time < RATE_LIMIT_DURATION):
            remaining_time = int(RATE_LIMIT_DURATION - (current_time - last_time))
            return send_message_robustly(
                chat_id,
                text=f"‚è≥ Vui l√≤ng ch·ªù <b>{remaining_time} gi√¢y</b> n·ªØa tr∆∞·ªõc khi s·ª≠ d·ª•ng l·∫°i l·ªánh /locket.",
                parse_mode="HTML",
                reply_to_message_id=message.message_id
            )
        LAST_LOCKET_COMMAND_TIME[user_id] = current_time

    # X√≥a tr·∫°ng th√°i c≈© n·∫øu c√≥
    with locket_states_lock:
        if user_id in locket_states:
            del locket_states[user_id]

    # Tin nh·∫Øn ban ƒë·∫ßu: ƒêang ki·ªÉm tra...
    checking_msg = send_message_robustly(
        chat_id,
        text="‚è≥ ƒêang ki·ªÉm tra link/username Locket...",
        parse_mode="HTML",
        reply_to_message_id=message.message_id
    )

    if not checking_msg:
        logging.error(f"Failed to send initial checking message for user {user_id}")
        return

    # L∆∞u tr·∫°ng th√°i ban ƒë·∫ßu
    with locket_states_lock:
        locket_states[user_id] = {
            'step': 'waiting_for_target',
            'target': None,
            'message_id': checking_msg.message_id, # L∆∞u ID tin nh·∫Øn ƒë·ªÉ ch·ªânh s·ª≠a
            'chat_id': chat_id,
            'spam_thread': None, # Lu·ªìng spam s·∫Ω ƒë∆∞·ª£c l∆∞u ·ªü ƒë√¢y
            'current_attack_count': 0 # ƒê·∫øm s·ªë v√≤ng spam hi·ªán t·∫°i
        }

    # Tr√≠ch xu·∫•t username/link t·ª´ tin nh·∫Øn
    command_args = message.text.replace("/locket", "").strip()

    if not command_args:
        # Y√™u c·∫ßu ng∆∞·ªùi d√πng cung c·∫•p username/link
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=checking_msg.message_id,
            text="‚ö†Ô∏è Vui l√≤ng cung c·∫•p Username ho·∫∑c Link Locket. V√≠ d·ª•: <code>/locket wusthanhdieu</code> ho·∫∑c <code>/locket https://locket.cam/wusthanhdieu</code>",
            parse_mode="HTML"
        )
        return

    # B·∫Øt ƒë·∫ßu lu·ªìng ki·ªÉm tra Locket UID trong n·ªÅn
    threading.Thread(target=check_locket_target_thread, args=(user_id, command_args)).start()


def check_locket_target_thread(user_id, target_input):
    with locket_states_lock:
        state = locket_states.get(user_id)
        if not state:
            logging.error(f"State for user {user_id} not found during Locket target check.")
            return

    chat_id = state['chat_id']
    message_id = state['message_id']

    # S·ª≠ d·ª•ng h√†m _extract_uid_locket t·ª´ zlocket_bot_handler
    zlocket_bot_handler.messages = [] # X√≥a th√¥ng b√°o l·ªói c≈©
    locket_uid = zlocket_bot_handler._extract_uid_locket(target_input)

    if locket_uid:
        with locket_states_lock:
            state['target'] = locket_uid
            state['step'] = 'target_checked'
            locket_states[user_id] = state # C·∫≠p nh·∫≠t l·∫°i state

        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=f"‚úÖ ƒê√£ t√¨m th·∫•y Locket!\n\n"
                 f"<b>Locket UID:</b> <code>{locket_uid}</code>\n"
                 f"<b>Username/Link:</b> <code>{html_escape(target_input)}</code>\n\n"
                 "B·∫°n c√≥ mu·ªën kh·ªüi ƒë·ªông t·∫•n c√¥ng (spam k·∫øt b·∫°n) Locket n√†y kh√¥ng?",
            parse_mode="HTML",
            reply_markup=get_locket_action_markup()
        )
        logging.info(f"Locket target {locket_uid} found for user {user_id}")
    else:
        error_msg = "\n".join(zlocket_bot_handler.messages)
        if not error_msg:
            error_msg = "Kh√¥ng x√°c ƒë·ªãnh. Vui l√≤ng ki·ªÉm tra l·∫°i username/link."

        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=f"‚ùå Kh√¥ng t√¨m th·∫•y Locket ho·∫∑c Link kh√¥ng h·ª£p l·ªá.\n\n"
                 f"<b>L·ªói:</b> {html_escape(error_msg)}\n\n"
                 "Vui l√≤ng th·ª≠ l·∫°i v·ªõi l·ªánh <code>/locket &lt;username/link&gt;</code>.",
            parse_mode="HTML"
        )
        # X√≥a tr·∫°ng th√°i sau khi l·ªói
        with locket_states_lock:
            if user_id in locket_states:
                del locket_states[user_id]
        logging.warning(f"Locket target not found for user {user_id}: {error_msg}")


def get_locket_action_markup():
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üöÄ B·∫≠t Attack", callback_data="locket_action|start_attack"),
        InlineKeyboardButton("‚õîÔ∏è T·∫Øt Attack", callback_data="locket_action|cancel")
    )
    return markup


@bot.callback_query_handler(func=lambda call: call.data.startswith("locket_action|"))
def handle_locket_action_callback(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    action = call.data.split("|")[1]

    # ƒê·∫£m b·∫£o ch·ªâ ng∆∞·ªùi d√πng t·∫°o l·ªánh m·ªõi c√≥ th·ªÉ t∆∞∆°ng t√°c
    with locket_states_lock:
        state = locket_states.get(user_id)
        if not state or state['message_id'] != message_id:
            bot.answer_callback_query(call.id, "Phi√™n l√†m vi·ªác ƒë√£ h·∫øt ho·∫∑c b·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi t·∫°o l·ªánh n√†y.", show_alert=True)
            return

    bot.answer_callback_query(call.id) # G·ª≠i ph·∫£n h·ªìi callback ƒë·ªÉ t·∫Øt loading tr√™n n√∫t

    if action == "start_attack":
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="‚è≥ ƒêang kh·ªüi ƒë·ªông t·∫•n c√¥ng Locket...",
            parse_mode="HTML"
        )
        # B·∫Øt ƒë·∫ßu lu·ªìng t·∫•n c√¥ng spam
        spam_thread = threading.Thread(target=start_locket_attack_thread, args=(user_id,))
        spam_thread.daemon = True # ƒê·∫£m b·∫£o lu·ªìng s·∫Ω d·ª´ng khi bot d·ª´ng
        spam_thread.start()

        with locket_states_lock:
            state['spam_thread'] = spam_thread
            state['step'] = 'attacking'
            locket_states[user_id] = state # C·∫≠p nh·∫≠t l·∫°i state

    elif action == "cancel":
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="ƒê√£ h·ªßy y√™u c·∫ßu t·∫•n c√¥ng Locket.",
            parse_mode="HTML"
        )
        # X√≥a tr·∫°ng th√°i
        with locket_states_lock:
            if user_id in locket_states:
                del locket_states[user_id]


def start_locket_attack_thread(user_id):
    with locket_states_lock:
        state = locket_states.get(user_id)
        if not state or not state.get('target'):
            logging.error(f"Cannot start Locket attack: invalid state for user {user_id}")
            return

    chat_id = state['chat_id']
    message_id = state['message_id']
    target_uid = state['target']

    zlocket_bot_handler.TARGET_FRIEND_UID = target_uid
    zlocket_bot_handler.FIREBASE_APP_CHECK = zlocket_bot_handler._load_token_() # ƒê·∫£m b·∫£o token lu√¥n m·ªõi

    if not zlocket_bot_handler.FIREBASE_APP_CHECK:
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="‚ùå L·ªói: Kh√¥ng th·ªÉ l·∫•y token Locket. Vui l√≤ng th·ª≠ l·∫°i sau.",
            parse_mode="HTML"
        )
        with locket_states_lock:
            if user_id in locket_states:
                del locket_states[user_id]
        return

    # L·∫∑p l·∫°i 2-3 v√≤ng
    num_rounds = random.randint(2, 3)
    successful_rounds = 0

    for round_num in range(1, num_rounds + 1):
        with locket_states_lock:
            state = locket_states.get(user_id) # L·∫•y tr·∫°ng th√°i m·ªõi nh·∫•t
            if not state or state.get('step') != 'attacking':
                logging.info(f"Attack stopped prematurely for user {user_id}.")
                break # D·ª´ng v√≤ng l·∫∑p n·∫øu tr·∫°ng th√°i thay ƒë·ªïi

        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=f"üöÄ ƒêang t·∫•n c√¥ng Locket <b><code>{html_escape(target_uid)}</code></b>...\n"
                 f"V√≤ng: <b>{round_num}/{num_rounds}</b>\n"
                 f"T√†i kho·∫£n ƒë√£ t·∫°o: <b>{zlocket_bot_handler.successful_requests}</b>\n"
                 f"Y√™u c·∫ßu th·∫•t b·∫°i: <b>{zlocket_bot_handler.failed_requests}</b>",
            parse_mode="HTML"
        )

        # L·∫•y m·ªôt s·ªë l∆∞·ª£ng proxy nh·∫•t ƒë·ªãnh cho m·ªói v√≤ng t·∫•n c√¥ng
        # ƒê·ªÉ ƒë·∫£m b·∫£o ph√¢n ph·ªëi ƒë·ªÅu v√† kh√¥ng l√†m c·∫°n ki·ªát nhanh ch√≥ng
        num_proxies_per_round = 10 # S·ªë l∆∞·ª£ng proxy ƒë∆∞·ª£c l·∫•y t·ª´ queue cho m·ªói v√≤ng
        current_round_proxies = []
        for _ in range(num_proxies_per_round):
            proxy = get_next_proxy()
            if proxy:
                current_round_proxies.append(proxy)
            else:
                logging.warning(f"Not enough proxies for round {round_num}. Using {len(current_round_proxies)} available proxies.")
                break # Kh√¥ng c√≥ ƒë·ªß proxy, d√πng s·ªë l∆∞·ª£ng hi·ªán c√≥

        if not current_round_proxies:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f"‚ùå L·ªói: Kh√¥ng c√≥ proxy kh·∫£ d·ª•ng cho v√≤ng t·∫•n c√¥ng {round_num}. D·ª´ng t·∫•n c√¥ng.",
                parse_mode="HTML"
            )
            break

        threads = []
        stop_event_attack = threading.Event() # Event ƒë·ªÉ d·ª´ng c√°c lu·ªìng con n·∫øu c·∫ßn
        
        # Reset l·∫°i s·ªë li·ªáu th·ªëng k√™ cho m·ªói v√≤ng ƒë·ªÉ d·ªÖ theo d√µi h∆°n
        zlocket_bot_handler.successful_requests = 0
        zlocket_bot_handler.failed_requests = 0

        for i in range(len(current_round_proxies)): # Ch·ªâ c·∫ßn s·ªë l∆∞·ª£ng lu·ªìng b·∫±ng s·ªë proxy hi·ªán c√≥
            thread = threading.Thread(
                target=run_locket_spam_worker,
                args=(user_id, i, stop_event_attack)
            )
            threads.append(thread)
            thread.start()

        # Ch·ªù c√°c lu·ªìng ho√†n th√†nh trong v√≤ng n√†y
        for t in threads:
            t.join() # Ch·ªù t·ª´ng lu·ªìng ho√†n th√†nh

        if zlocket_bot_handler.successful_requests > 0:
            successful_rounds += 1
        
        time.sleep(5) # Ngh·ªâ gi·ªØa c√°c v√≤ng

    final_message = f"‚úÖ ƒê√£ ho√†n t·∫•t t·∫•n c√¥ng Locket <b><code>{html_escape(target_uid)}</code></b>!\n\n"
    if successful_rounds > 0:
        final_message += f"<b>T·ªïng s·ªë v√≤ng th√†nh c√¥ng:</b> {successful_rounds}/{num_rounds}\n"
        final_message += f"<b>T·ªïng t√†i kho·∫£n t·∫°o th√†nh c√¥ng:</b> {zlocket_bot_handler.successful_requests}\n"
        final_message += f"<b>T·ªïng y√™u c·∫ßu th·∫•t b·∫°i:</b> {zlocket_bot_handler.failed_requests}\n\n"
        final_message += "ƒê√£ k·∫øt th√∫c qu√° tr√¨nh attack."
    else:
        final_message = f"‚ùå Kh√¥ng th·ªÉ t·∫•n c√¥ng Locket <b><code>{html_escape(target_uid)}</code></b>.\n"
        final_message += "C√≥ th·ªÉ do kh√¥ng c√≥ proxy kh·∫£ d·ª•ng ho·∫∑c l·ªói k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i sau."


    bot.edit_message_text(
        chat_id=chat_id,
        message_id=message_id,
        text=final_message,
        parse_mode="HTML"
    )

    # X√≥a tr·∫°ng th√°i sau khi ho√†n th√†nh
    with locket_states_lock:
        if user_id in locket_states:
            del locket_states[user_id]


def run_locket_spam_worker(user_id, thread_id, stop_event):
    """
    H√†m worker cho m·ªói lu·ªìng spam Locket.
    M·ªói lu·ªìng s·∫Ω c·ªë g·∫Øng t·∫°o m·ªôt s·ªë l∆∞·ª£ng t√†i kho·∫£n/y√™u c·∫ßu k·∫øt b·∫°n nh·∫•t ƒë·ªãnh.
    """
    with locket_states_lock:
        state = locket_states.get(user_id)
    
    if not state:
        logging.error(f"Worker {thread_id} failed: No state for user {user_id}")
        return

    # M·ªói lu·ªìng s·∫Ω c·ªë g·∫Øng t·∫°o ACC_PER_THREAD t√†i kho·∫£n
    accounts_per_thread_target = random.randint(6, 10) # C√≥ th·ªÉ l·∫•y t·ª´ config.ACCOUNTS_PER_PROXY
    
    successful_accounts_in_thread = 0
    failed_attempts_in_thread = 0
    max_failed_attempts_per_thread = 5 # S·ªë l·∫ßn th·ª≠ l·∫°i t·ªëi ƒëa cho 1 lu·ªìng n·∫øu g·∫∑p l·ªói li√™n ti·∫øp

    while not stop_event.is_set() and \
          successful_accounts_in_thread < accounts_per_thread_target and \
          failed_attempts_in_thread < max_failed_attempts_per_thread:
        
        if stop_event.is_set():
            return

        prefix = f"[{thread_id:03d} | Register]"
        email = _rand_email_()
        password = _rand_pw_()
        
        payload = {
            "data": {
                "email": email,
                "password": password,
                "client_email_verif": True,
                "client_token": _rand_str_(40, chars=string.hexdigits.lower()),
                "platform": "ios"
            }
        }
        
        response_data = zlocket_bot_handler.excute(
            f"{zlocket_bot_handler.API_LOCKET_URL}/createAccountWithEmailPassword",
            headers=zlocket_bot_handler.headers_locket(),
            payload=payload,
            thread_id=thread_id,
            step="Register"
        )

        if stop_event.is_set():
            return

        if response_data == "no_proxy" or response_data == "proxy_dead" or response_data == "too_many_requests" or response_data is None:
            failed_attempts_in_thread += 1
            logging.warning(f"[{thread_id}] Proxy/Network issue or too many requests. Retrying. Attempts: {failed_attempts_in_thread}/{max_failed_attempts_per_thread}")
            time.sleep(1) # Ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi th·ª≠ l·∫°i
            continue
        
        if isinstance(response_data, dict) and response_data.get('result', {}).get('status') == 200:
            successful_accounts_in_thread += 1
            failed_attempts_in_thread = 0 # Reset l·ªói khi th√†nh c√¥ng

            id_token, local_id = step1b_sign_in(email, password, thread_id, None)
            if id_token and local_id:
                if step2_finalize_user(id_token, thread_id, None):
                    # G·ª≠i y√™u c·∫ßu k·∫øt b·∫°n ban ƒë·∫ßu
                    if step3_send_friend_request(id_token, thread_id, None):
                        # Boost th√™m 15 y√™u c·∫ßu
                        for _ in range(15):
                            if stop_event.is_set():
                                return
                            step3_send_friend_request(id_token, thread_id, None)
                    else:
                        logging.warning(f"[{thread_id}] Initial friend request failed for new account.")
                else:
                    logging.warning(f"[{thread_id}] Profile finalization failed for new account.")
            else:
                logging.warning(f"[{thread_id}] Authentication (step 1b) failed for new account.")
        else:
            failed_attempts_in_thread += 1
            logging.warning(f"[{thread_id}] Identity creation failed. Attempts: {failed_attempts_in_thread}/{max_failed_attempts_per_thread}. Response: {response_data}")
            # C√≥ th·ªÉ th√™m logic ki·ªÉm tra l·ªói c·ª• th·ªÉ t·ª´ response_data ƒë·ªÉ ƒë∆∞a ra h√†nh ƒë·ªông ph√π h·ª£p h∆°n

    logging.info(f"Worker {thread_id} finished. Created {successful_accounts_in_thread} accounts.")

@bot.message_handler(commands=["start"])
@increment_interaction_count
def start_cmd(message):
    """X·ª≠ l√Ω l·ªánh /start, hi·ªÉn th·ªã th√¥ng tin bot v√† c√°c li√™n k·∫øt."""
    logging.info(f"Received /start from user {message.from_user.id} in chat {message.chat.id}") # Th√™m log
    sync_chat_to_server(message.chat)
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üë§ Admin", url="https://t.me/zproject2"),
        InlineKeyboardButton("üì¢ Th√¥ng B√°o", url="https://t.me/zproject3"),
        InlineKeyboardButton("üí¨ Chat", url="https://t.me/zproject4")
    )
    send_message_robustly(
        message.chat.id,
        photo=START_IMAGE_URL,
        caption="<b>üöÄ ZProject Bot</b>\n\n"
                "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi D·ªãch V·ª• Zproject Bot ƒê∆∞·ª£c Make B·ªüi @zproject2\n "
                "‚óè Ch√∫ng T√¥i C√≥ C√°c D·ªãch V·ª• Nh∆∞ Treo Bot 24/7 Gi√° C·ª±c R·∫ª H∆°n VPS v√† M√°y ·∫¢o \n‚óè B·∫°n C√≥ Th·ªÉ Li√™n H·ªá Telegram @zproject2.\n"
                "--> G√µ /phanhoi ƒê·ªÉ Ph·∫£n H·ªìi L·ªói Ho·∫∑c C·∫ßn C·∫£i Ti·∫øn G√¨ ƒê√≥ Cho Bot, V√≠ D·ª• <code>/phanhoi L·ªói ·ªû L·ªánh Ask 503.</code>\n"
                "--> G√µ /help ƒë·ªÉ xem danh s√°ch c√°c l·ªánh.",
        reply_markup=markup,
        parse_mode="HTML",
        reply_to_message_id=message.message_id
    )

@bot.message_handler(commands=["help"])
@increment_interaction_count
def help_command(message):
    """X·ª≠ l√Ω l·ªánh /help, hi·ªÉn th·ªã menu c√°c l·ªánh."""
    logging.info(f"Received /help from user {message.from_user.id} in chat {message.chat.id}") # Th√™m log
    sync_chat_to_server(message.chat)
    help_text = (
        "<i>üìö Menu L·ªánh ZProject Bot</i>\n\n"
        "‚Ä¢  <code>/start</code> - Start Zproject Bot.\n"
        "‚Ä¢  <code>/help</code>  - Show Menu Zproject Bot.\n"
        "‚Ä¢  <code>/time</code>  - Uptime Zproject Bot.\n"
        "‚Ä¢  <code>/ask &lt;c√¢u h·ªèi&gt;</code> - H·ªèi AI ƒê∆∞·ª£c T√≠ch H·ª£p WormGpt V2.\n"
        "‚Ä¢  <code>/ngl &lt;username&gt; &lt;tin_nh·∫Øn&gt; &lt;s·ªë_l·∫ßn&gt;</code> - Spam Ngl.\n"
        "‚Ä¢  <code>/noti &lt;n·ªôi dung&gt;</code> - <i>(Ch·ªâ Admin)</i> G·ª≠i th√¥ng b√°o.\n"
        "‚Ä¢  <code>/sever</code> - <i>(Ch·ªâ Admin)</i> Sever Bot.\n"
        "‚Ä¢  <code>/tuongtac</code> - Xem t·ªïng s·ªë l∆∞·ª£t t∆∞∆°ng t√°c c·ªßa bot.\n"
        "‚Ä¢  <code>/phanhoi</code> - G·ª≠i Ph·∫£n H·ªìi L·ªói Ho·∫∑c Ch·ª©c NƒÉng C·∫ßn C·∫£i Ti·∫øn.\n"
        "‚Ä¢  <code>/ping</code> - Xem Ping Sever Bot.\n"
        "‚Ä¢  <code>/mail10p</code> - T·∫°o mail 10 ph√∫t d√πng 1 l·∫ßn.\n"
        "‚Ä¢  <code>/hopthu</code> - Xem h·ªôp th∆∞ c·ªßa mail 10 ph√∫t ƒë√£ t·∫°o.\n"
        "‚Ä¢  <code>/xoamail10p</code> - X√≥a mail 10 ph√∫t hi·ªán t·∫°i c·ªßa b·∫°n." # Th√™m l·ªánh m·ªõi
    )
    send_message_robustly(
        chat_id=message.chat.id,
        photo=NGL_SUCCESS_IMAGE_URL,
        caption=help_text,
        parse_mode="HTML",
        reply_to_message_id=message.message_id
    )


@bot.message_handler(commands=["time"])
@increment_interaction_count
def time_cmd(message):
    """X·ª≠ l√Ω l·ªánh /time, hi·ªÉn th·ªã th·ªùi gian ho·∫°t ƒë·ªông c·ªßa bot."""
    logging.info(f"Received /time from user {message.from_user.id} in chat {message.chat.id}") # Th√™m log
    sync_chat_to_server(message.chat)
    now = time.time()
    seconds = int(now - START_TIME)
    days = seconds // 86400
    hours = (seconds % 86400) // 3600
    minutes = (seconds % 3600) // 60
    sec = seconds % 60
    send_message_robustly(
        message.chat.id,
        text=f"<blockquote>‚è±Ô∏è Bot ƒë√£ ho·∫°t ƒë·ªông ƒë∆∞·ª£c:\n<b>{days} ng√†y {hours} gi·ªù {minutes} ph√∫t {sec} gi√¢y</b></blockquote>",
        parse_mode="HTML",
        reply_to_message_id=message.message_id
    )

@bot.message_handler(commands=["tuongtac"])
@increment_interaction_count
def tuongtac_command(message):
    """X·ª≠ l√Ω l·ªánh /tuongtac, hi·ªÉn th·ªã t·ªïng s·ªë l∆∞·ª£t t∆∞∆°ng t√°c c·ªßa bot."""
    logging.info(f"Received /tuongtac from user {message.from_user.id} in chat {message.chat.id}") # Th√™m log
    sync_chat_to_server(message.chat)
    
    with interaction_count_lock: # ƒê·ªçc bi·∫øn ƒë∆∞·ª£c b·∫£o v·ªá
        current_interaction_count = interaction_count

    reply_text = (
        f"<b>üìä TH·ªêNG K√ä ZPROJECT BOT</b>\n\n"
        f"‚óè T·ªïng Th·ªëng K√™ Zproject Bot.\n\n"
        f"<b>T·ªïng s·ªë l∆∞·ª£t t∆∞∆°ng t√°c:</b> <code>{current_interaction_count}</code>\n"
        f"<i>L∆∞u √Ω: S·ªë L∆∞·ª£t T∆∞∆°ng T√°c C√†ng Cao Ch·ª©ng T·ªè ƒê·ªô Uy T√≠n C·ªßa Bot üéâ.</i>"
    )
    
    send_message_robustly(
        chat_id=message.chat.id,
        photo=TUONGTAC_IMAGE_URL,
        caption=reply_text,
        parse_mode="HTML",
        reply_to_message_id=message.message_id
    )
# Th√™m v√†o ph·∫ßn Bi·∫øn to√†n c·ª•c v√† c√°c Lock
# ... (gi·ªØ nguy√™n c√°c lock c≈©) ...
noti_states_lock = threading.Lock() # Th√™m lock m·ªõi cho bot.noti_states
bot.noti_states = {} # L∆∞u tr·∫°ng th√°i t·∫°o th√¥ng b√°o c·ªßa admin

# ... (c√°c h√†m kh√°c) ...

@bot.message_handler(commands=["noti"])
@increment_interaction_count
def send_noti(message):
    """X·ª≠ l√Ω l·ªánh /noti, cho ph√©p Admin g·ª≠i th√¥ng b√°o k√®m ·∫£nh (t√πy ch·ªçn) t·ªõi t·∫•t c·∫£ ng∆∞·ªùi d√πng/nh√≥m."""
    logging.info(f"Received /noti from user {message.from_user.id} in chat {message.chat.id}") # Th√™m log
    if message.from_user.id != ADMIN_ID:
        return send_message_robustly(message.chat.id, text="üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.", parse_mode="HTML", reply_to_message_id=message.message_id)

    text = message.text.replace("/noti", "").strip()

    photo_file_id = None
    if message.reply_to_message and message.reply_to_message.photo:
        photo_file_id = message.reply_to_message.photo[-1].file_id

    if not text and not photo_file_id:
        return send_message_robustly(message.chat.id, text="‚ö†Ô∏è S·ª≠ d·ª•ng: <code>/noti &lt;n·ªôi dung&gt;</code> ho·∫∑c reply v√†o ·∫£nh v√† d√πng <code>/noti &lt;n·ªôi dung&gt;</code>.", parse_mode="HTML", reply_to_message_id=message.message_id)

    notify_caption = f"<b>[!] TH√îNG B√ÅO T·ª™ ADMIN DEPZAI CUTO</b>\n\n{text}\n\n<i>G·ª≠i B·ªüi Admin @Zproject2</i>" if text else "<b>[!] TH√îNG B√ÅO</b>"

    with noti_states_lock: # B·∫£o v·ªá truy c·∫≠p bot.noti_states
        bot.noti_states[message.chat.id] = {
            'caption': notify_caption,
            'photo_file_id': photo_file_id,
            'original_message_id': message.message_id, # L∆∞u ID tin nh·∫Øn g·ªëc ƒë·ªÉ reply
            'button_text': None,
            'button_url': None
        }

    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("‚úÖ C√≥", callback_data="noti_add_button|yes"),
        InlineKeyboardButton("‚ùå Kh√¥ng", callback_data="noti_add_button|no")
    )

    send_message_robustly(
        message.chat.id,
        text="B·∫°n c√≥ mu·ªën th√™m n√∫t (button) v√†o th√¥ng b√°o n√†y kh√¥ng?",
        reply_markup=markup,
        parse_mode="HTML",
        reply_to_message_id=message.message_id
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("noti_add_button|"))
def noti_add_button(call):
    """X·ª≠ l√Ω vi·ªác admin ch·ªçn th√™m n√∫t v√†o th√¥ng b√°o."""
    user_id = call.message.chat.id
    
    # ƒê·∫£m b·∫£o ch·ªâ admin m·ªõi c√≥ th·ªÉ d√πng n√∫t n√†y
    if user_id != ADMIN_ID:
        bot.answer_callback_query(call.id, "üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng n√∫t n√†y.", show_alert=True)
        return

    _, choice = call.data.split("|")

    with noti_states_lock:
        noti_info = bot.noti_states.get(user_id)

    if not noti_info:
        bot.answer_callback_query(call.id, "ƒê√£ x·∫£y ra l·ªói ho·∫∑c phi√™n l√†m vi·ªác ƒë√£ h·∫øt. Vui l√≤ng th·ª≠ l·∫°i l·ªánh /noti.", show_alert=True)
        return

    if choice == "yes":
        bot.answer_callback_query(call.id, "B·∫°n ƒë√£ ch·ªçn th√™m n√∫t.", show_alert=False)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="Tuy·ªát v·ªùi! H√£y g·ª≠i cho t√¥i **t√™n c·ªßa n√∫t** b·∫°n mu·ªën hi·ªÉn th·ªã (v√≠ d·ª•: `Tham gia nh√≥m`).",
            parse_mode="HTML"
        )
        # ƒê·∫∑t b∆∞·ªõc ti·∫øp theo l√† ch·ªù t√™n n√∫t
        bot.register_next_step_handler(call.message, process_button_text)
    else: # choice == "no"
        bot.answer_callback_query(call.id, "B·∫°n ƒë√£ ch·ªçn kh√¥ng th√™m n√∫t.", show_alert=False)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="ƒêang g·ª≠i th√¥ng b√°o...",
            parse_mode="HTML"
        )
        # G·ª≠i th√¥ng b√°o ngay l·∫≠p t·ª©c
        send_final_notification(user_id)


def process_button_text(message):
    """X·ª≠ l√Ω t√™n n√∫t ƒë∆∞·ª£c admin g·ª≠i."""
    user_id = message.chat.id
    with noti_states_lock:
        noti_info = bot.noti_states.get(user_id)

    if not noti_info:
        send_message_robustly(user_id, "ƒê√£ x·∫£y ra l·ªói ho·∫∑c phi√™n l√†m vi·ªác ƒë√£ h·∫øt. Vui l√≤ng th·ª≠ l·∫°i l·ªánh /noti.", parse_mode="HTML")
        return

    button_text = message.text.strip()
    if not button_text:
        send_message_robustly(user_id, "‚ö†Ô∏è T√™n n√∫t kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng. Vui l√≤ng g·ª≠i l·∫°i t√™n n√∫t.", parse_mode="HTML", reply_to_message_id=message.message_id)
        bot.register_next_step_handler(message, process_button_text)
        return

    with noti_states_lock:
        noti_info['button_text'] = button_text
        bot.noti_states[user_id] = noti_info # C·∫≠p nh·∫≠t l·∫°i state

    send_message_robustly(
        user_id,
        f"ƒê√£ l∆∞u t√™n n√∫t: <b>{html_escape(button_text)}</b>. B√¢y gi·ªù h√£y g·ª≠i cho t√¥i **URL** m√† n√∫t s·∫Ω d·∫´n ƒë·∫øn (v√≠ d·ª•: `https://t.me/zproject3`).",
        parse_mode="HTML",
        reply_to_message_id=message.message_id
    )
    # ƒê·∫∑t b∆∞·ªõc ti·∫øp theo l√† ch·ªù URL
    bot.register_next_step_handler(message, process_button_url)


def process_button_url(message):
    """X·ª≠ l√Ω URL c·ªßa n√∫t ƒë∆∞·ª£c admin g·ª≠i v√† g·ª≠i th√¥ng b√°o cu·ªëi c√πng."""
    user_id = message.chat.id
    with noti_states_lock:
        noti_info = bot.noti_states.get(user_id)

    if not noti_info:
        send_message_robustly(user_id, "ƒê√£ x·∫£y ra l·ªói ho·∫∑c phi√™n l√†m vi·ªác ƒë√£ h·∫øt. Vui l√≤ng th·ª≠ l·∫°i l·ªánh /noti.", parse_mode="HTML")
        return

    button_url = message.text.strip()
    if not button_url or not (button_url.startswith("http://") or button_url.startswith("https://")):
        send_message_robustly(user_id, "‚ö†Ô∏è URL kh√¥ng h·ª£p l·ªá. Vui l√≤ng g·ª≠i l·∫°i m·ªôt URL ƒë·∫ßy ƒë·ªß (v√≠ d·ª•: `https://t.me/zproject3`).", parse_mode="HTML", reply_to_message_id=message.message_id)
        bot.register_next_step_handler(message, process_button_url)
        return

    with noti_states_lock:
        noti_info['button_url'] = button_url
        bot.noti_states[user_id] = noti_info # C·∫≠p nh·∫≠t l·∫°i state

    send_message_robustly(
        user_id,
        "ƒê√£ l∆∞u URL. ƒêang ti·∫øn h√†nh g·ª≠i th√¥ng b√°o...",
        parse_mode="HTML",
        reply_to_message_id=message.message_id
    )

    send_final_notification(user_id)


def send_final_notification(admin_id):
    """H√†m th·ª±c hi·ªán g·ª≠i th√¥ng b√°o cu·ªëi c√πng t·ªõi t·∫•t c·∫£ ng∆∞·ªùi nh·∫≠n."""
    with noti_states_lock:
        noti_info = bot.noti_states.pop(admin_id, None) # L·∫•y v√† x√≥a state

    if not noti_info:
        send_message_robustly(admin_id, "ƒê√£ x·∫£y ra l·ªói khi g·ª≠i th√¥ng b√°o. Th√¥ng tin kh√¥ng t·ªìn t·∫°i.", parse_mode="HTML")
        return

    notify_caption = noti_info['caption']
    photo_file_id = noti_info['photo_file_id']
    button_text = noti_info['button_text']
    button_url = noti_info['button_url']
    original_message_id = noti_info['original_message_id']

    markup = None
    if button_text and button_url:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(button_text, url=button_url))

    ok_users_count, ok_groups_count = 0, 0
    failed_count = 0
    failed_details = [] # L∆∞u chi ti·∫øt l·ªói (ID, username/title, l·ªói)
    
    with user_group_info_lock: # ƒê·ªçc bi·∫øn ƒë∆∞·ª£c b·∫£o v·ªá
        all_users = list(USER_IDS)
        all_groups = list(GROUP_INFOS)

    # G·ª≠i t·ªõi t·∫•t c·∫£ ng∆∞·ªùi d√πng
    for uid in all_users:
        try:
            if photo_file_id:
                bot.send_photo(
                    chat_id=uid,
                    photo=photo_file_id,
                    caption=notify_caption,
                    parse_mode="HTML",
                    reply_markup=markup
                )
            else:
                bot.send_message(
                    chat_id=uid,
                    text=notify_caption,
                    parse_mode="HTML",
                    disable_web_page_preview=True,
                    reply_markup=markup
                )
            ok_users_count += 1
            time.sleep(0.1)
        except Exception as e:
            failed_count += 1
            failed_details.append(f"Ng∆∞·ªùi d√πng ID: <code>{uid}</code> (L·ªói: {html_escape(str(e))})")
            logging.error(f"Failed to send notification to user {uid}: {e}")

    # G·ª≠i t·ªõi t·∫•t c·∫£ nh√≥m
    for group in all_groups:
        group_id = group["id"]
        group_title = group.get("title", "Kh√¥ng r√µ t√™n nh√≥m")
        group_username = group.get("username", "") # C√≥ th·ªÉ kh√¥ng c√≥ username
        
        try:
            if photo_file_id:
                bot.send_photo(
                    chat_id=group_id,
                    photo=photo_file_id,
                    caption=notify_caption,
                    parse_mode="HTML",
                    reply_markup=markup
                )
            else:
                bot.send_message(
                    chat_id=group_id,
                    text=notify_caption,
                    parse_mode="HTML",
                    disable_web_page_preview=True,
                    reply_markup=markup
                )
            ok_groups_count += 1
            time.sleep(0.1)
        except Exception as e:
            failed_count += 1
            group_display = f"{group_title} (ID: <code>{group_id}</code>)"
            if group_username:
                group_display += f" (@{group_username})"
            failed_details.append(f"Nh√≥m: {group_display} (L·ªói: {html_escape(str(e))})")
            logging.error(f"Failed to send notification to group {group_id}: {e}")

    total_sent = ok_users_count + ok_groups_count
    
    result_text = (
        f"‚úÖ G·ª≠i th√†nh c√¥ng: {total_sent} tin nh·∫Øn (ƒê·∫øn <b>{ok_users_count}</b> ng∆∞·ªùi d√πng v√† <b>{ok_groups_count}</b> nh√≥m).\n"
        f"‚ùå G·ª≠i th·∫•t b·∫°i: {failed_count} tin nh·∫Øn.\n\n"
    )

    if failed_count > 0:
        result_text += "<b>‚ö†Ô∏è Chi ti·∫øt th·∫•t b·∫°i:</b>\n"
        for detail in failed_details:
            result_text += f"- {detail}\n"
    else:
        result_text += "üéâ T·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!"

    send_message_robustly(
        admin_id,
        text=result_text,
        parse_mode="HTML",
        reply_to_message_id=original_message_id # Reply v·ªÅ tin nh·∫Øn /noti g·ªëc
    )


@bot.message_handler(commands=["phanhoi"])
@increment_interaction_count
def send_feedback_to_admin(message):
    """X·ª≠ l√Ω l·ªánh /phanhoi, cho ph√©p ng∆∞·ªùi d√πng g·ª≠i ph·∫£n h·ªìi ƒë·∫øn admin."""
    logging.info(f"Received /phanhoi from user {message.from_user.id} in chat {message.chat.id}") # Th√™m log
    sync_chat_to_server(message.chat)
    feedback_text = message.text.replace("/phanhoi", "").strip()

    if not feedback_text:
        return send_message_robustly(message.chat.id, text="‚ö†Ô∏è Vui l√≤ng nh·∫≠p n·ªôi dung ph·∫£n h·ªìi. V√≠ d·ª•: <code>/phanhoi Bot b·ªã l·ªói ·ªü l·ªánh /ask</code>", parse_mode="HTML", reply_to_message_id=message.message_id)

    user_info_for_admin = f"<a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a>"
    if message.from_user.last_name:
        user_info_for_admin += f" {message.from_user.last_name}"
    if message.from_user.username:
        user_info_for_admin += f" (@{message.from_user.username})"
    user_info_for_admin += f" (<code>{message.from_user.id}</code>)"

    chat_info_for_admin = f"ID Chat: <code>{message.chat.id}</code>\n" \
                          f"Lo·∫°i Chat: {message.chat.type}"
    if message.chat.type in ["group", "supergroup"]:
        chat_info_for_admin += f"\nT√™n Chat: {message.chat.title}"

    timestamp = datetime.now().strftime("%H:%M:%S ng√†y %d/%m/%Y")

    admin_notification = (
        f"<b>üìß PH·∫¢N H·ªíI M·ªöI T·ª™ NG∆Ø·ªúI D√ôNG</b>\n\n"
        f"<b>Ng∆∞·ªùi g·ª≠i:</b>\n{user_info_for_admin}\n"
        f"<b>Th√¥ng tin Chat:</b>\n{chat_info_for_admin}\n"
        f"<b>Th·ªùi gian:</b> <code>{timestamp}</code>\n\n"
        f"<b>N·ªôi dung ph·∫£n h·ªìi:</b>\n<blockquote>{html_escape(feedback_text)}</blockquote>\n\n"
        f"<i>ƒê·ªÉ ph·∫£n h·ªìi l·∫°i ng∆∞·ªùi d√πng n√†y, h√£y reply tin nh·∫Øn n√†y v√† d√πng l·ªánh <code>/adminph &lt;n·ªôi dung ph·∫£n h·ªìi&gt;</code></i>"
    )

    try:
        sent_message_to_admin = bot.send_message(
            chat_id=ADMIN_ID,
            text=admin_notification,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        with feedback_messages_lock: # B·∫£o v·ªá truy c·∫≠p bot.feedback_messages
            bot.feedback_messages[sent_message_to_admin.message_id] = {
                'chat_id': message.chat.id,
                'user_id': message.from_user.id,
                'user_first_name': message.from_user.first_name,
                'feedback_text': feedback_text
            }
        
        send_message_robustly(message.chat.id, text="‚úÖ C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i ph·∫£n h·ªìi! Admin s·∫Ω xem x√©t s·ªõm nh·∫•t c√≥ th·ªÉ.", parse_mode="HTML", reply_to_message_id=message.message_id)
    except Exception as e:
        logging.error(f"L·ªói khi g·ª≠i ph·∫£n h·ªìi ƒë·∫øn admin: {e}")
        send_message_robustly(message.chat.id, text="‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ª≠i ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i sau.", parse_mode="HTML", reply_to_message_id=message.message_id)

@bot.message_handler(commands=["adminph"])
@increment_interaction_count
def admin_reply_to_feedback(message):
    """X·ª≠ l√Ω l·ªánh /adminph, cho ph√©p admin ph·∫£n h·ªìi l·∫°i ng∆∞·ªùi d√πng ƒë√£ g·ª≠i feedback."""
    logging.info(f"Received /adminph from user {message.from_user.id} in chat {message.chat.id}") # Th√™m log
    if message.from_user.id != ADMIN_ID:
        return send_message_robustly(message.chat.id, text="üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.", parse_mode="HTML", reply_to_message_id=message.message_id)

    if not message.reply_to_message:
        return send_message_robustly(message.chat.id, text="‚ö†Ô∏è B·∫°n c·∫ßn reply v√†o tin nh·∫Øn ph·∫£n h·ªìi c·ªßa ng∆∞·ªùi d√πng ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.", parse_mode="HTML", reply_to_message_id=message.message_id)

    original_feedback_message_id = message.reply_to_message.message_id
    with feedback_messages_lock: # B·∫£o v·ªá truy c·∫≠p bot.feedback_messages
        feedback_data = bot.feedback_messages.get(original_feedback_message_id)

    if not feedback_data:
        return send_message_robustly(message.chat.id, text="‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin chat c·ªßa ng∆∞·ªùi d√πng n√†y. C√≥ th·ªÉ tin nh·∫Øn qu√° c≈© ho·∫∑c bot ƒë√£ kh·ªüi ƒë·ªông l·∫°i.", parse_mode="HTML", reply_to_message_id=message.message_id)

    user_chat_id = feedback_data['chat_id']
    user_id_to_tag = feedback_data['user_id']
    user_name_to_tag = feedback_data['user_first_name']
    original_feedback_text = feedback_data['feedback_text']

    admin_response_text = message.text.replace("/adminph", "").strip()

    if not admin_response_text:
        return send_message_robustly(message.chat.id, text="‚ö†Ô∏è Vui l√≤ng nh·∫≠p n·ªôi dung ph·∫£n h·ªìi c·ªßa admin. V√≠ d·ª•: <code>/adminph C·∫£m ∆°n b·∫°n, ch√∫ng t√¥i ƒë√£ kh·∫Øc ph·ª•c l·ªói.</code>", parse_mode="HTML", reply_to_message_id=message.message_id)

    user_tag = f"<a href='tg://user?id={user_id_to_tag}'>{user_name_to_tag}</a>"

    admin_reply_to_user = (
        f"<b>üë®‚Äçüíª Admin ƒë√£ ph·∫£n h·ªìi b·∫°n {user_tag}!</b>\n\n"
        f"<b>N·ªôi dung ph·∫£n h·ªìi c·ªßa b·∫°n:</b>\n"
        f"<blockquote>{html_escape(original_feedback_text)}</blockquote>\n\n"
        f"<b>Ph·∫£n h·ªìi t·ª´ Admin:</b>\n"
        f"<blockquote>{html_escape(admin_response_text)}</blockquote>\n\n"
        f"<i>N·∫øu b·∫°n c√≥ th√™m c√¢u h·ªèi, vui l√≤ng g·ª≠i ph·∫£n h·ªìi m·ªõi qua l·ªánh <code>/phanhoi</code>.</i>"
    )

    try:
        bot.send_message(
            chat_id=user_chat_id,
            text=admin_reply_to_user,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        send_message_robustly(message.chat.id, text="‚úÖ ƒê√£ g·ª≠i ph·∫£n h·ªìi c·ªßa Admin ƒë·∫øn ng∆∞·ªùi d√πng th√†nh c√¥ng.", parse_mode="HTML", reply_to_message_id=message.message_id)
    except Exception as e:
        logging.error(f"L·ªói khi g·ª≠i ph·∫£n h·ªìi c·ªßa admin ƒë·∫øn ng∆∞·ªùi d√πng {user_chat_id}: {e}")
        send_message_robustly(message.chat.id, text="‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ª≠i ph·∫£n h·ªìi c·ªßa Admin ƒë·∫øn ng∆∞·ªùi d√πng.", parse_mode="HTML", reply_to_message_id=message.message_id)


@bot.message_handler(commands=["sever"])
@increment_interaction_count
def show_groups(message):
    """X·ª≠ l√Ω l·ªánh /sever, hi·ªÉn th·ªã danh s√°ch c√°c nh√≥m bot ƒëang tham gia (ch·ªâ Admin)."""
    logging.info(f"Received /sever from user {message.from_user.id} in chat {message.chat.id}") # Th√™m log
    if message.from_user.id != ADMIN_ID:
        return send_message_robustly(message.chat.id, text="üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.", parse_mode="HTML", reply_to_message_id=message.message_id)
    
    with user_group_info_lock: # ƒê·ªçc bi·∫øn ƒë∆∞·ª£c b·∫£o v·ªá
        if not GROUP_INFOS:
            return send_message_robustly(message.chat.id, text="üì≠ Hi·ªán t·∫°i bot ch∆∞a c√≥ th√¥ng tin v·ªÅ nh√≥m n√†o.", parse_mode="HTML", reply_to_message_id=message.message_id)
        
        text = "<b>üì¶ Sever:</b>\n\n"
        for g in GROUP_INFOS:
            title = g.get("title", "Kh√¥ng r√µ t√™n nh√≥m")
            link = f"https://t.me/{g.get('username')}" if g.get("username") else "‚õî Kh√¥ng c√≥ link m·ªùi"
            text += f"üìå <b>{title}</b>\n{link}\n\n"
    
    send_message_robustly(message.chat.id, text=text, parse_mode="HTML", disable_web_page_preview=True, reply_to_message_id=message.message_id)


# L·ªánh t·∫°o mail 10 ph√∫t
@bot.message_handler(commands=['mail10p'])
@increment_interaction_count
def handle_mail10p(message):
    logging.info(f"Received /mail10p from user {message.from_user.id} in chat {message.chat.id}") # Th√™m log
    sync_chat_to_server(message.chat)
    user_id = message.chat.id
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ c√≥ mail ch∆∞a v√† c√≤n th·ªùi gian kh√¥ng
    with user_data_lock: # B·∫£o v·ªá truy c·∫≠p user_data
        if user_id in user_data:
            elapsed_time = int(time.time() - user_data[user_id]["created_at"])
            remaining_time = 600 - elapsed_time
            if remaining_time > 0:
                minutes = remaining_time // 60
                seconds = remaining_time % 60
                
                # G·ª≠i l·∫°i th√¥ng tin mail k√®m n√∫t "Xem H·ªôp Th∆∞"
                mail_info_text = (
                    f"‚ö†Ô∏è B·∫°n ƒë√£ c√≥ m·ªôt mail 10 ph√∫t r·ªìi:\n"
                    f"üìß `{user_data[user_id]['email']}`\n"
                    f"‚è∞ Mail n√†y s·∫Ω h·∫øt h·∫°n sau {minutes} ph√∫t {seconds} gi√¢y."
                )
                markup = build_mail_buttons(user_id, 'mail_info')
                
                sent_msg = send_message_robustly(message.chat.id, 
                                                text=mail_info_text,
                                                parse_mode='Markdown',
                                                reply_markup=markup,
                                                reply_to_message_id=message.message_id)
                with mail_messages_state_lock: # B·∫£o v·ªá truy c·∫≠p bot.mail_messages_state
                    if sent_msg:
                        bot.mail_messages_state[sent_msg.message_id] = {'chat_id': user_id, 'user_id': user_id, 'type': 'mail_info'}
                return
            else:
                # N·∫øu h·∫øt h·∫°n nh∆∞ng ch∆∞a b·ªã x√≥a, x√≥a n√≥ ƒëi
                del user_data[user_id]
                send_message_robustly(message.chat.id, "‚è∞ Mail 10 ph√∫t c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n, ƒëang t·∫°o mail m·ªõi...", parse_mode='Markdown', reply_to_message_id=message.message_id)


    email, pwd, token = create_temp_mail()

    if email:
        with user_data_lock: # B·∫£o v·ªá truy c·∫≠p user_data
            user_data[user_id] = {
                "email": email,
                "password": pwd,
                "token": token,
                "created_at": time.time()
            }
        
        mail_info_text = (
            f"‚úÖ Mail 10 ph√∫t c·ªßa b·∫°n l√†:\n"
            f"üìß `{email}`\n"
            f"‚è∞ H·∫øt h·∫°n sau 10 ph√∫t."
        )
        markup = build_mail_buttons(user_id, 'mail_info')
        
        sent_msg = send_message_robustly(message.chat.id, 
                                       text=mail_info_text, 
                                       parse_mode='Markdown',
                                       reply_markup=markup,
                                       reply_to_message_id=message.message_id)
        # L∆∞u tr·ªØ ID tin nh·∫Øn ƒë·ªÉ c√≥ th·ªÉ ch·ªânh s·ª≠a sau n√†y
        with mail_messages_state_lock: # B·∫£o v·ªá truy c·∫≠p bot.mail_messages_state
            if sent_msg:
                bot.mail_messages_state[sent_msg.message_id] = {'chat_id': user_id, 'user_id': user_id, 'type': 'mail_info'}
        
        threading.Thread(target=auto_delete_email, args=(user_id,)).start()
    else:
        send_message_robustly(message.chat.id, "‚ùå Kh√¥ng th·ªÉ t·∫°o email. Vui l√≤ng th·ª≠ l·∫°i sau!", parse_mode='Markdown', reply_to_message_id=message.message_id)


# H√†m x·ª≠ l√Ω l·ªánh /ping
@bot.message_handler(commands=['ping'])
def ping_command(message):
    start_time = time.time()
    
    # G·ª≠i tin nh·∫Øn t·∫°m th·ªùi ƒë·ªÉ t√≠nh ping
    sent_message = bot.send_message(message.chat.id, "ƒêang ƒêo Ping Sever Bot...", parse_mode='HTML')
    
    end_time = time.time()
    
    # T√≠nh to√°n ping (th·ªùi gian g·ª≠i v√† nh·∫≠n tin nh·∫Øn)
    ping_ms = round((end_time - start_time) * 1000)

    # T·∫°o n·ªôi dung tin nh·∫Øn HTML
    html_message = f"""
<blockquote>
    <b>‚ö° Ping Sever Bot hi·ªán t·∫°i:</b> <i>{ping_ms}ms</i>
</blockquote>
"""
    # T·∫°o n√∫t inline
    keyboard = types.InlineKeyboardMarkup()
    refresh_button = types.InlineKeyboardButton("‚ôªÔ∏è L√†m m·ªõi Ping", callback_data='refresh_ping')
    keyboard.add(refresh_button)

    # Ch·ªânh s·ª≠a tin nh·∫Øn ban ƒë·∫ßu v·ªõi th√¥ng tin ping v√† n√∫t
    bot.edit_message_text(chat_id=message.chat.id, 
                          message_id=sent_message.message_id,
                          text=html_message, 
                          reply_markup=keyboard, 
                          parse_mode='HTML')

# H√†m x·ª≠ l√Ω khi n√∫t "L√†m m·ªõi Ping" ƒë∆∞·ª£c nh·∫•n
@bot.callback_query_handler(func=lambda call: call.data == 'refresh_ping')
def refresh_ping_callback(call):
    # B√°o hi·ªáu ƒë√£ nh·∫≠n callback
    bot.answer_callback_query(call.id) 

    start_time = time.time()
    
    # Ch·ªânh s·ª≠a tin nh·∫Øn ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i "ƒêang l√†m m·ªõi"
    # ƒê√¢y l√† m·ªôt thao t√°c I/O, th·ªùi gian th·ª±c hi·ªán c√≥ th·ªÉ ƒë∆∞·ª£c d√πng ƒë·ªÉ ∆∞·ªõc l∆∞·ª£ng ping.
    bot.edit_message_text(chat_id=call.message.chat.id, 
                          message_id=call.message.message_id,
                          text="ƒêang l√†m m·ªõi ping...", 
                          parse_mode='HTML')

    end_time = time.time()
    
    ping_ms = round((end_time - start_time) * 1000)

    html_message = f"""
<blockquote>
    <b>‚ö° Ping Sever Bot Hi·ªán T·∫°i hi·ªán t·∫°i:</b> <i>{ping_ms}ms</i>
</blockquote>
"""
    keyboard = types.InlineKeyboardMarkup()
    refresh_button = types.InlineKeyboardButton("‚ôªÔ∏è L√†m m·ªõi Ping", callback_data='refresh_ping')
    keyboard.add(refresh_button)

    # Ch·ªânh s·ª≠a l·∫°i tin nh·∫Øn v·ªõi th√¥ng tin ping m·ªõi v√† n√∫t
    bot.edit_message_text(chat_id=call.message.chat.id, 
                          message_id=call.message.message_id,
                          text=html_message, 
                          reply_markup=keyboard, 
                          parse_mode='HTML')


# L·ªánh m·ªõi ƒë·ªÉ x√≥a mail 10 ph√∫t
@bot.message_handler(commands=['xoamail10p'])
@increment_interaction_count
def handle_xoamail10p(message):
    logging.info(f"Received /xoamail10p from user {message.from_user.id} in chat {message.chat.id}") # Th√™m log
    sync_chat_to_server(message.chat)
    user_id = message.chat.id

    with user_data_lock: # B·∫£o v·ªá truy c·∫≠p user_data
        if user_id in user_data:
            # X√≥a t√†i kho·∫£n Mail.tm n·∫øu c√≥ th·ªÉ (th√™m logic g·ªçi API Mail.tm n·∫øu c√≥ account_id)
            # V√≠ d·ª•:
            # try:
            #     account_info = user_data[user_id]
            #     if 'account_id' in account_info and 'token' in account_info:
            #         headers = {"Authorization": f"Bearer {account_info['token']}"}
            #         session.delete(f"https://api.mail.tm/accounts/{account_info['account_id']}", headers=headers)
            #         logging.info(f"ƒê√£ x√≥a t√†i kho·∫£n Mail.tm: {account_info['email']}")
            # except Exception as e:
            #     logging.error(f"L·ªói khi x√≥a t√†i kho·∫£n Mail.tm cho user {user_id}: {e}")

            del user_data[user_id]
            send_message_robustly(message.chat.id, "<i>üóëÔ∏è Mail 10 ph√∫t c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!</i>", parse_mode='HTML', reply_to_message_id=message.message_id)
        else:
            send_message_robustly(message.chat.id, "<i>‚ö†Ô∏è B·∫°n kh√¥ng c√≥ mail 10 ph√∫t n√†o ƒëang ho·∫°t ƒë·ªông ƒë·ªÉ x√≥a.<i>", parse_mode='HTML', reply_to_message_id=message.message_id)


# H√†m n·ªôi b·ªô ƒë·ªÉ l·∫•y n·ªôi dung h·ªôp th∆∞ v√† t·∫°o markup
def _get_inbox_content(user_id):
    with user_data_lock: # B·∫£o v·ªá truy c·∫≠p user_data
        info = user_data.get(user_id)

    if not info:
        return "<i>‚ùå B·∫°n ch∆∞a t·∫°o email. G√µ /mail10p ƒë·ªÉ t·∫°o nh√©!</i>", None, 'HTML'

    # Ki·ªÉm tra xem mail ƒë√£ h·∫øt h·∫°n ch∆∞a
    elapsed_time = int(time.time() - info["created_at"])
    if elapsed_time >= 600: # 10 ph√∫t
        # L·∫•y th√¥ng tin email tr∆∞·ªõc khi x√≥a
        expired_mail_address = info.get('email', 'kh√¥ng x√°c ƒë·ªãnh') # D√πng 'email' thay v√¨ 'address'

        with user_data_lock: # B·∫£o v·ªá truy c·∫≠p user_data khi x√≥a
            del user_data[user_id]
        
        reply_text = (
            f"‚è∞ <b>Mail <code>{expired_mail_address}</code> c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n!</b> "
            f"<blockquote>T·∫•t c·∫£ th∆∞ c·ªßa mail n√†y s·∫Ω b·ªã x√≥a.</blockquote> "
            f"Vui l√≤ng t·∫°o mail m·ªõi b·∫±ng l·ªánh /mail10p."
        )
        return reply_text, None, 'HTML'

    headers = {
        "Authorization": f"Bearer {info['token']}"
    }

    try:
        r = session.get("https://api.mail.tm/messages", headers=headers)
        r.raise_for_status() # Ki·ªÉm tra l·ªói HTTP
        messages = r.json().get("hydra:member", [])
        
        reply_text = ""
        if not messages:
            reply_text = "üì≠ H·ªôp th∆∞ c·ªßa b·∫°n hi·ªán ƒëang tr·ªëng."
        else:
            reply_text = f"üì• C√≥ {len(messages)} th∆∞ trong h·ªôp th∆∞:\n"
            for msg in messages:
                sender = msg['from']['address']
                subject = msg['subject']
                preview = msg['intro']
                
                sender_esc = html_escape(sender)
                subject_esc = html_escape(subject)
                preview_esc = html_escape(preview)

                reply_text += f"\nüë§ <b>T·ª´:</b> <code>{sender_esc}</code>\n" \
                              f"‚úâÔ∏è <b>Ch·ªß ƒë·ªÅ:</b> {subject_esc}\n" \
                              f"üìù <b>N·ªôi dung:</b> {preview_esc}\n"
        
        markup = build_mail_buttons(user_id, 'inbox')
        return reply_text, markup, 'HTML'

    except Exception as e:
        logging.error(f"L·ªói khi ki·ªÉm tra h·ªôp th∆∞ Mail.tm cho user {user_id}: {e}")
        return "‚ùå L·ªói khi ki·ªÉm tra h·ªôp th∆∞. Vui l√≤ng th·ª≠ l·∫°i sau.", None, 'Markdown'


# L·ªánh ki·ªÉm tra h·ªôp th∆∞ (v·∫´n gi·ªØ ƒë·ªÉ d√πng l·ªánh /hopthu)
@bot.message_handler(commands=['hopthu'])
@increment_interaction_count
def handle_hopthu(message):
    logging.info(f"Received /hopthu from user {message.from_user.id} in chat {message.chat.id}") # Th√™m log
    sync_chat_to_server(message.chat)
    user_id = message.chat.id
    
    text, markup, parse_mode = _get_inbox_content(user_id)
    sent_msg = send_message_robustly(message.chat.id, 
                                   text=text, 
                                   parse_mode=parse_mode, 
                                   reply_markup=markup,
                                   reply_to_message_id=message.message_id)
    with mail_messages_state_lock: # B·∫£o v·ªá truy c·∫≠p bot.mail_messages_state
        if sent_msg:
            # N·∫øu g·ª≠i tin nh·∫Øn m·ªõi, l∆∞u tr·∫°ng th√°i l√† inbox
            bot.mail_messages_state[sent_msg.message_id] = {'chat_id': user_id, 'user_id': user_id, 'type': 'inbox'}


# H√†m m·ªõi ƒë·ªÉ ƒë·ªãnh d·∫°ng ƒë·∫ßu ra AI
def format_ai_response_html(text):
    """
    Ph√¢n t√≠ch vƒÉn b·∫£n t·ª´ AI, t√°ch code block v√† vƒÉn b·∫£n th√¥ng th∆∞·ªùng,
    sau ƒë√≥ ƒë·ªãnh d·∫°ng ch√∫ng v·ªõi HTML cho Telegram, ƒë·∫∑c bi·ªát l√† th·∫ª <code>.
    Tr·∫£ v·ªÅ danh s√°ch c√°c ph·∫ßn (text ho·∫∑c code) ƒë·ªÉ x·ª≠ l√Ω.
    """
    parts = []
    # Regex ƒë·ªÉ t√¨m ki·∫øm c√°c block code Markdown (```language\ncode\n```)
    code_blocks = re.split(r"```(?:\w+)?\n(.*?)```", text, flags=re.DOTALL)

    for i, part in enumerate(code_blocks):
        if i % 2 == 0:  # Ph·∫ßn vƒÉn b·∫£n (ho·∫∑c ph·∫ßn tr∆∞·ªõc code ƒë·∫ßu ti√™n, ho·∫∑c sau code cu·ªëi c√πng)
            if part:
                parts.append({"type": "text", "content": html_escape(part.strip()), "raw_content": part.strip()})
        else:  # Ph·∫ßn code (l√† n·ªôi dung c·ªßa group 1 t·ª´ regex)
            if part:
                formatted_code = f"<code>{html_escape(part.strip())}</code>"
                parts.append({"type": "code", "content": formatted_code, "raw_content": part.strip()})
    return parts


@bot.callback_query_handler(func=lambda call: call.data.startswith("copycode|"))
def copy_code_button(call):
    """X·ª≠ l√Ω n√∫t 'Copy Code'."""
    try:
        _, code_id = call.data.split("|", 1)
        with code_snippets_lock: # B·∫£o v·ªá truy c·∫≠p bot.code_snippets
            code_content = bot.code_snippets.get(code_id)

        if code_content:
            bot.answer_callback_query(call.id, text="ƒê√£ sao ch√©p n·ªôi dung code!", show_alert=True)
            try:
                bot.send_message(
                    chat_id=call.message.chat.id,
                    text=f"```\n{code_content}\n```",
                    parse_mode="MarkdownV2",
                    reply_to_message_id=call.message.message_id
                )
            except telebot.apihelper.ApiTelegramException as e:
                logging.warning(f"Failed to send code snippet for copy to chat {call.message.chat.id}: {e}. Sending plain text.")
                bot.send_message(
                    chat_id=call.message.chat.id,
                    text=f"B·∫°n c√≥ th·ªÉ sao ch√©p ƒëo·∫°n code n√†y:\n\n{code_content}",
                    reply_to_message_id=call.message.message_id
                )
        else:
            bot.answer_callback_query(call.id, text="L·ªói: Kh√¥ng t√¨m th·∫•y n·ªôi dung code n√†y.", show_alert=True)
    except Exception as e:
        logging.error(f"L·ªói khi x·ª≠ l√Ω n√∫t copy code: {e}")
        bot.answer_callback_query(call.id, text="ƒê√£ x·∫£y ra l·ªói khi sao ch√©p code.", show_alert=True)


@bot.message_handler(commands=["ask"])
@increment_interaction_count
def ask_command(message):
    """X·ª≠ l√Ω l·ªánh /ask ƒë·ªÉ g·ª≠i c√¢u h·ªèi ƒë·∫øn Gemini AI. H·ªó tr·ª£ h·ªèi k√®m ·∫£nh."""
    logging.info(f"Received /ask from user {message.from_user.id} in chat {message.chat.id}") # Th√™m log
    sync_chat_to_server(message.chat)
    prompt = message.text.replace("/ask", "").strip()
    if not prompt:
        return send_message_robustly(message.chat.id, text="‚ùì B·∫°n ch∆∞a nh·∫≠p c√¢u h·ªèi r·ªìi ƒë√≥! Vui l√≤ng g√µ <code>/ask &lt;c√¢u h·ªèi c·ªßa b·∫°n&gt;</code>.", parse_mode="HTML", reply_to_message_id=message.message_id)

    try:
        msg_status = bot.send_message(message.chat.id, "ü§ñ", reply_to_message_id=message.message_id)
    except telebot.apihelper.ApiTelegramException as e:
        logging.warning(f"Failed to send initial 'thinking' message in chat {message.chat.id}: {e}. Proceeding without reply_to.")
        msg_status = bot.send_message(message.chat.id, "ü§ñ")

    user_id = message.from_user.id
    user_name = message.from_user.first_name
    memory = load_user_memory(user_id)

    try:
        prompt_data = session.get(REMOTE_PROMPT_URL, timeout=DEFAULT_TIMEOUT_GLOBAL).json()
        system_prompt = prompt_data.get("prompt", "B·∫°n l√† AI th√¥ng minh v√† h·ªØu √≠ch.")
    except Exception as e:
        logging.error(f"L·ªói t·∫£i prompt t·ª´ xa: {e}")
        system_prompt = "B·∫°n l√† AI th√¥ng minh v√† h·ªØu √≠ch."

    history_block = ""
    if memory:
        for item in memory[-5:]:
            history_block += f"Ng∆∞·ªùi d√πng h·ªèi: {item['question']}\nAI: {item['answer']}\n"

    full_prompt = f"{system_prompt}\n\n[Ng·ªØ c·∫£nh tr∆∞·ªõc ƒë√≥ v·ªõi {user_name}]\n{history_block}\nNg∆∞·ªùi d√πng hi·ªán t·∫°i h·ªèi: {prompt}"

    headers = {"Content-Type": "application/json"}
    parts = [{"text": full_prompt}]
    image_attached = False

    if message.reply_to_message and message.reply_to_message.photo:
        try:
            photo = message.reply_to_message.photo[-1]
            file_info = bot.get_file(photo.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            image = Image.open(BytesIO(downloaded_file))
            buffer = BytesIO()
            if image.mode in ("RGBA", "P"):
                image = image.convert("RGB")
            image.save(buffer, format="JPEG")
            base64_img = base64.b64encode(buffer.getvalue()).decode()
            parts.insert(0, {
                "inline_data": {
                    "mime_type": "image/jpeg",
                    "data": base64_img
                }
            })
            image_attached = True
        except Exception as e:
            logging.error(f"L·ªói x·ª≠ l√Ω ·∫£nh ƒë√≠nh k√®m: {e}")

    data = {"contents": [{"parts": parts}]}
    try:
        res = session.post(GEMINI_URL, headers=headers, json=data, timeout=DEFAULT_TIMEOUT_GLOBAL)
        res.raise_for_status()
        result = res.json()["candidates"][0]["content"]["parts"][0]["text"]
    except Exception as e:
        try:
            bot.edit_message_text(
                f"‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ªçi API Gemini:\n<pre>{html_escape(str(e))}</pre>",
                msg_status.chat.id,
                msg_status.message_id,
                parse_mode="HTML"
            )
        except telebot.apihelper.ApiTelegramException as edit_e:
            logging.warning(f"Failed to edit message {msg_status.message_id}: {edit_e}. Sending new error message.")
            send_message_robustly(message.chat.id, text=f"‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ªçi API Gemini:\n<pre>{html_escape(str(e))}</pre>", parse_mode="HTML")
        return

    entry = {
        "question": prompt,
        "answer": result,
        "created": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "with_image": image_attached,
        "name": message.from_user.first_name
    }
    memory.append(entry)
    save_user_memory(user_id, memory)

    try:
        session.post(
            f"{REMOTE_LOG_HOST}?uid={user_id}",
            data=json.dumps(memory, ensure_ascii=False),
            headers={"Content-Type": "application/json"},
            timeout=DEFAULT_TIMEOUT_GLOBAL
        )
    except Exception as e:
        logging.error(f"L·ªói g·ª≠i log t·ª´ xa: {e}")

    # --- X·ª≠ l√Ω ƒë·ªãnh d·∫°ng v√† g·ª≠i tin nh·∫Øn ---
    response_parts_structured = format_ai_response_html(result)
    reply_id = uuid.uuid4().hex[:6]
    
    with voice_map_lock: # B·∫£o v·ªá truy c·∫≠p bot.voice_map
        bot.voice_map[reply_id] = result # L∆∞u to√†n b·ªô k·∫øt qu·∫£ g·ªëc cho TTS

    # T√≠nh to√°n t·ªïng ƒë·ªô d√†i c·ªßa n·ªôi dung (th√¥) ƒë·ªÉ quy·∫øt ƒë·ªãnh g·ª≠i file hay g·ª≠i tin nh·∫Øn
    total_raw_length = 0
    full_content_for_file = []
    for part in response_parts_structured:
        total_raw_length += len(part["raw_content"])
        if part["type"] == "text":
            full_content_for_file.append(part["raw_content"])
        elif part["type"] == "code":
            full_content_for_file.append(f"\n```\n{part['raw_content']}\n```\n")

    # Telegram c√≥ gi·ªõi h·∫°n 4096 k√Ω t·ª± cho tin nh·∫Øn v√† 1024 cho caption ·∫£nh/document.
    # S·ª≠ d·ª•ng ng∆∞·ª°ng an to√†n th·∫•p h∆°n ƒë·ªÉ quy·∫øt ƒë·ªãnh g·ª≠i file.
    # N·∫øu c√≥ nhi·ªÅu code block ho·∫∑c vƒÉn b·∫£n r·∫•t d√†i, g·ª≠i file s·∫Ω t·ªët h∆°n.
    if total_raw_length > 1500 or any(p["type"] == "code" for p in response_parts_structured):
        filename = f"zproject_{reply_id}.txt"
        with open(filename, "w", encoding="utf-8") as f:
            f.write("".join(full_content_for_file)) # Vi·∫øt to√†n b·ªô n·ªôi dung ƒë√£ gom l·∫°i

        with open(filename, "rb") as f:
            try:
                bot.send_document(
                    message.chat.id,
                    f,
                    caption=f"üìÑ Tr·∫£ l·ªùi qu√° d√†i ho·∫∑c c√≥ code block! M√¨nh ƒë√£ ƒë√≥ng g√≥i v√†o file <code>{filename}</code> nha {html_escape(message.from_user.first_name)}!\n\n"
                            f"<i>Vui l√≤ng t·∫£i xu·ªëng ƒë·ªÉ xem to√†n b·ªô n·ªôi dung.</i>",
                    parse_mode="HTML",
                    reply_to_message_id=message.message_id
                )
            except telebot.apihelper.ApiTelegramException as e:
                logging.warning(f"Failed to send document replying to message {message.message_id}: {e}. Sending without reply_to.")
                f.seek(0)
                bot.send_document(
                    message.chat.id,
                    f,
                    caption=f"üìÑ Tr·∫£ l·ªùi qu√° d√†i ho·∫∑c c√≥ code block! M√¨nh ƒë√£ ƒë√≥ng g√≥i v√†o file <code>{filename}</code> nha {html_escape(message.from_user.first_name)}!\n\n"
                            f"<i>Vui l√≤ng t·∫£i xu·ªëng ƒë·ªÉ xem to√†n b·ªô n·ªôi dung.</i>",
                    parse_mode="HTML"
                )
        os.remove(filename)
        # X√≥a tin nh·∫Øn "ƒëang x·ª≠ l√Ω" ban ƒë·∫ßu
        try:
            bot.delete_message(msg_status.chat.id, msg_status.message_id)
        except telebot.apihelper.ApiTelegramException as e:
            logging.warning(f"Failed to delete status message {msg_status.message_id}: {e}")

    else: # G·ª≠i tin nh·∫Øn th√¥ng th∆∞·ªùng n·∫øu kh√¥ng qu√° d√†i ho·∫∑c kh√¥ng c√≥ code block ri√™ng
        main_markup = build_reply_button(user_id, prompt, reply_id)
        current_message_text = f"ü§ñ <i>ZProject [WORMGPT] tr·∫£ l·ªùi:</i>\n\n"
        
        combined_text_for_telegram = ""
        for part in response_parts_structured:
            if part["type"] == "text":
                combined_text_for_telegram += part["content"] + "\n\n" # Th√™m xu·ªëng d√≤ng gi·ªØa c√°c ƒëo·∫°n vƒÉn b·∫£n
            elif part["type"] == "code":
                # Th√™m n√∫t copy code v√†o markup ch√≠nh cho ph·∫ßn code ƒë√≥
                copy_id = uuid.uuid4().hex[:8]
                with code_snippets_lock: # B·∫£o v·ªá truy c·∫≠p bot.code_snippets
                    bot.code_snippets[copy_id] = part["raw_content"]
                
                # InlineKeyboardMarkup m·ªõi cho m·ªói code block
                code_markup = InlineKeyboardMarkup()
                code_markup.add(InlineKeyboardButton("üìÑ Sao ch√©p Code", callback_data=f"copycode|{copy_id}"))

                # G·ª≠i ph·∫ßn code block ri√™ng v·ªõi n√∫t copy c·ªßa n√≥
                try:
                    # G·ª≠i text tr∆∞·ªõc n·∫øu c√≥, r·ªìi g·ª≠i code sau
                    if combined_text_for_telegram.strip():
                        bot.edit_message_text( # C·ªë g·∫Øng edit tin nh·∫Øn status n·∫øu ch∆∞a b·ªã thay th·∫ø
                            current_message_text + combined_text_for_telegram.strip(),
                            msg_status.chat.id,
                            msg_status.message_id,
                            parse_mode="HTML"
                        )
                        msg_status = None # ƒê√£ s·ª≠ d·ª•ng tin nh·∫Øn status
                    
                    bot.send_message(
                        message.chat.id,
                        text=f"<b>Code:</b>\n{part['content']}", # ƒê√£ l√† HTML escaped
                        parse_mode="HTML",
                        reply_markup=code_markup,
                        reply_to_message_id=message.message_id # Reply v·ªÅ tin nh·∫Øn g·ªëc
                    )
                except telebot.apihelper.ApiTelegramException as e:
                    logging.warning(f"Failed to send code part in chat {message.chat.id}: {e}. Sending without reply_to.")
                    bot.send_message(
                        message.chat.id,
                        text=f"<b>Code:</b>\n{part['content']}",
                        parse_mode="HTML",
                        reply_markup=code_markup
                    )
                combined_text_for_telegram = "" # Reset sau khi g·ª≠i code
        
        # G·ª≠i ph·∫ßn vƒÉn b·∫£n cu·ªëi c√πng (n·∫øu c√≥) v√† c√°c n√∫t chung
        final_response_text = current_message_text + combined_text_for_telegram.strip()
        
        try:
            if msg_status: # N·∫øu tin nh·∫Øn status ban ƒë·∫ßu v·∫´n c√≤n
                bot.edit_message_text(
                    final_response_text,
                    msg_status.chat.id,
                    msg_status.message_id,
                    parse_mode="HTML",
                    reply_markup=main_markup
                )
            else: # N·∫øu tin nh·∫Øn status ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng (v√≠ d·ª• ƒë·ªÉ g·ª≠i ph·∫ßn text tr∆∞·ªõc code)
                bot.send_message(
                    message.chat.id,
                    text=final_response_text,
                    parse_mode="HTML",
                    reply_markup=main_markup,
                    reply_to_message_id=message.message_id # Reply v·ªÅ tin nh·∫Øn g·ªëc
                )
        except telebot.apihelper.ApiTelegramException as e:
            logging.warning(f"Failed to send/edit final message in chat {message.chat.id}: {e}. Sending as new message.")
            send_message_robustly(
                message.chat.id,
                text=final_response_text,
                parse_mode="HTML",
                reply_markup=main_markup,
                reply_to_message_id=message.message_id
            )
        except Exception as e:
            logging.error(f"Error in final message sending for /ask: {e}")
            send_message_robustly(message.chat.id, text=f"‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ª≠i k·∫øt qu·∫£: {e}", parse_mode="HTML", reply_to_message_id=message.message_id)


# --- N√öT CALLBACK C·ª¶A BOT ZPROJECT ---

@bot.callback_query_handler(func=lambda call: call.data.startswith("retry|"))
def retry_button(call):
    """X·ª≠ l√Ω n√∫t 'Tr·∫£ l·ªùi l·∫°i' t·ª´ c√¢u h·ªèi /ask."""
    try:
        _, uid, question = call.data.split("|", 2)
        if str(call.from_user.id) != uid:
            return bot.answer_callback_query(call.id, "üö´ B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi y√™u c·∫ßu c√¢u h·ªèi n√†y.", show_alert=True)

        # T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng message gi·∫£ l·∫≠p ƒë·ªÉ truy·ªÅn v√†o ask_command
        msg = SimpleNamespace(
            chat=call.message.chat,
            message_id=call.message.message_id,
            text="/ask " + question,
            from_user=call.from_user,
            reply_to_message=None # Gi·∫£ ƒë·ªãnh kh√¥ng c√≥ reply_to_message khi retry
        )

        bot.answer_callback_query(call.id, "üîÅ ƒêang th·ª≠ l·∫°i c√¢u h·ªèi...")
        try:
            bot.edit_message_text("ü§ñ ƒêang x·ª≠ l√Ω l·∫°i...", call.message.chat.id, call.message.message_id)
        except telebot.apihelper.ApiTelegramException as e:
            logging.warning(f"Failed to edit message {call.message.message_id} on retry: {e}. Sending new 'thinking' message.")
            bot.send_message(call.message.chat.id, "ü§ñ ƒêang x·ª≠ l√Ω l·∫°i...", reply_to_message_id=call.message.message_id)

        # G·ªçi h√†m x·ª≠ l√Ω l·ªánh /ask (ƒë∆∞·ª£c b·ªçc b·ªüi decorator @increment_interaction_count)
        # Ch·∫°y trong m·ªôt lu·ªìng ri√™ng ƒë·ªÉ kh√¥ng ch·∫∑n callback
        Thread(target=ask_command, args=(msg,)).start()

    except Exception as e:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è L·ªói khi th·ª≠ l·∫°i!", show_alert=True)
        logging.error(f"[RETRY] L·ªói: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("tts|"))
def tts_button(call):
    """X·ª≠ l√Ω n√∫t 'Chuy·ªÉn sang Voice' t·ª´ c√¢u tr·∫£ l·ªùi /ask."""
    try:
        parts = call.data.split("|")
        uid = parts[1]
        reply_id = parts[2]

        if str(call.from_user.id) != uid:
            return bot.answer_callback_query(call.id, "üö´ B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi y√™u c·∫ßu voice n√†y.", show_alert=True)

        with voice_map_lock: # B·∫£o v·ªá truy c·∫≠p bot.voice_map
            answer = bot.voice_map.get(reply_id)
        if not answer:
            return bot.answer_callback_query(call.id, "‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu gi·ªçng n√≥i.", show_alert=True)

        # X√≥a c√°c ƒë·ªãnh d·∫°ng HTML v√† Markdown ƒë·ªÉ gTTS ch·ªâ nh·∫≠n vƒÉn b·∫£n thu·∫ßn
        clean_text = re.sub(r"<code>.*?</code>", "", answer, flags=re.DOTALL)
        clean_text = re.sub(r"<[^>]+>", "", clean_text)
        clean_text = re.sub(r"```.*?```", "", clean_text, flags=re.DOTALL)
        clean_text = clean_text.replace('"', '').replace("'", '')

        text_to_speak = clean_text.strip()

        if not text_to_speak or len(text_to_speak) < 5:
            return bot.answer_callback_query(call.id, "‚ùó N·ªôi dung qu√° ng·∫Øn ho·∫∑c r·ªóng ƒë·ªÉ chuy·ªÉn voice.", show_alert=True)

        filename = f"zproject_tts_{reply_id}.mp3"
        tts = gTTS(text=text_to_speak, lang="vi", slow=False)
        tts.save(filename)

        with open(filename, "rb") as f:
            try:
                bot.send_voice(call.message.chat.id, f, caption="üó£Ô∏è ƒê√¢y l√† Voice ZProject:v", reply_to_message_id=call.message.message_id)
            except telebot.apihelper.ApiTelegramException as e:
                logging.warning(f"Failed to send voice replying to message {call.message.message_id}: {e}. Sending without reply_to.")
                f.seek(0)
                bot.send_voice(call.message.chat.id, f, caption="üó£Ô∏è ƒê√¢y l√† Voice ZProject:v")
        os.remove(filename)
        bot.answer_callback_query(call.id, "üéß Voice ƒë√£ ƒë∆∞·ª£c g·ª≠i!")
    except Exception as e:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è L·ªói khi t·∫°o voice.", show_alert=True)
        logging.error(f"[TTS] L·ªói: {e}")

# --- N√öT CALLBACK C·ª¶A MAIL.TM ---

def check_mail_owner(call, expected_user_id):
    """Ki·ªÉm tra xem ng∆∞·ªùi nh·∫•n n√∫t c√≥ ph·∫£i l√† ng∆∞·ªùi ƒë√£ t·∫°o mail kh√¥ng."""
    # Chuy·ªÉn expected_user_id sang int ƒë·ªÉ so s√°nh ch√≠nh x√°c
    if call.from_user.id != int(expected_user_id):
        bot.answer_callback_query(call.id, "üö´ Chat Ri√™ng V·ªõi Bot ƒê·ªÉ D√πng Ch·ª©c NƒÉng Mail10p .", show_alert=True)
        return False
    return True

@bot.callback_query_handler(func=lambda call: call.data.startswith("mailtm_inbox|"))
def show_inbox_button(call):
    user_id = call.message.chat.id
    expected_user_id = call.data.split("|")[1]

    if not check_mail_owner(call, expected_user_id):
        return

    bot.answer_callback_query(call.id, "ƒêang t·∫£i h·ªôp th∆∞...", show_alert=False)

    text, markup, parse_mode = _get_inbox_content(user_id)

    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode=parse_mode,
            reply_markup=markup
        )
        with mail_messages_state_lock: # B·∫£o v·ªá truy c·∫≠p bot.mail_messages_state
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i tin nh·∫Øn
            if call.message.message_id in bot.mail_messages_state:
                bot.mail_messages_state[call.message.message_id]['type'] = 'inbox'
    except telebot.apihelper.ApiTelegramException as e:
        if "message is not modified" in str(e):
            logging.info(f"Message {call.message.message_id} in chat {call.message.chat.id} was not modified (inbox).")
        else:
            logging.error(f"L·ªói khi ch·ªânh s·ª≠a tin nh·∫Øn th√†nh h·ªôp th∆∞ cho user {user_id}: {e}")
            # N·∫øu edit kh√¥ng th√†nh c√¥ng, th·ª≠ g·ª≠i tin nh·∫Øn m·ªõi
            send_message_robustly(call.message.chat.id, text=text, parse_mode=parse_mode, reply_markup=markup)
            # X√≥a tr·∫°ng th√°i c≈© v√† th√™m tr·∫°ng th√°i m·ªõi
            with mail_messages_state_lock: # B·∫£o v·ªá truy c·∫≠p bot.mail_messages_state
                if call.message.message_id in bot.mail_messages_state:
                    del bot.mail_messages_state[call.message.message_id]
                sent_msg = send_message_robustly(call.message.chat.id, "‚ùå ƒê√£ c√≥ l·ªói khi c·∫≠p nh·∫≠t h·ªôp th∆∞. ƒê√¢y l√† tin nh·∫Øn m·ªõi.", parse_mode="HTML")
                if sent_msg:
                    bot.mail_messages_state[sent_msg.message_id] = {'chat_id': user_id, 'user_id': user_id, 'type': 'inbox'}
            
    except Exception as e:
        logging.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi xem h·ªôp th∆∞: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è L·ªói khi xem h·ªôp th∆∞!", show_alert=True)


@bot.callback_query_handler(func=lambda call: call.data.startswith("mailtm_refresh|"))
def refresh_inbox_button(call):
    user_id = call.message.chat.id
    expected_user_id = call.data.split("|")[1]

    if not check_mail_owner(call, expected_user_id):
        return

    bot.answer_callback_query(call.id, "ƒêang l√†m m·ªõi h·ªôp th∆∞...", show_alert=False)

    text, markup, parse_mode = _get_inbox_content(user_id)

    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode=parse_mode,
            reply_markup=markup
        )
        with mail_messages_state_lock: # B·∫£o v·ªá truy c·∫≠p bot.mail_messages_state
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i tin nh·∫Øn
            if call.message.message_id in bot.mail_messages_state:
                bot.mail_messages_state[call.message.message_id]['type'] = 'inbox'
    except telebot.apihelper.ApiTelegramException as e:
        if "message is not modified" in str(e):
            logging.info(f"Message {call.message.message_id} in chat {call.message.chat.id} was not modified (refresh inbox).")
        else:
            logging.error(f"L·ªói khi l√†m m·ªõi h·ªôp th∆∞ cho user {user_id}: {e}")
            send_message_robustly(call.message.chat.id, text=text, parse_mode=parse_mode, reply_markup=markup)
            with mail_messages_state_lock: # B·∫£o v·ªá truy c·∫≠p bot.mail_messages_state
                # X√≥a tr·∫°ng th√°i c≈© v√† th√™m tr·∫°ng th√°i m·ªõi
                if call.message.message_id in bot.mail_messages_state:
                    del bot.mail_messages_state[call.message.message_id]
                sent_msg = send_message_robustly(call.message.chat.id, "‚ùå ƒê√£ c√≥ l·ªói khi l√†m m·ªõi h·ªôp th∆∞. ƒê√¢y l√† tin nh·∫Øn m·ªõi.", parse_mode="HTML")
                if sent_msg:
                    bot.mail_messages_state[sent_msg.message_id] = {'chat_id': user_id, 'user_id': user_id, 'type': 'inbox'}
    except Exception as e:
        logging.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi l√†m m·ªõi h·ªôp th∆∞: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è L·ªói khi l√†m m·ªõi h·ªôp th∆∞!", show_alert=True)


@bot.callback_query_handler(func=lambda call: call.data.startswith("mailtm_back|"))
def back_to_mail_info_button(call):
    user_id = call.message.chat.id
    expected_user_id = call.data.split("|")[1]

    if not check_mail_owner(call, expected_user_id):
        return
    
    bot.answer_callback_query(call.id, "Quay l·∫°i th√¥ng tin mail...", show_alert=False)

    with user_data_lock: # B·∫£o v·ªá truy c·∫≠p user_data
        info = user_data.get(user_id)

    if not info:
        text = "<i>‚ùå B·∫°n ch∆∞a t·∫°o email. G√µ /mail10p ƒë·ªÉ t·∫°o nh√©!</i>"
        markup = None
        parse_mode = 'HTML'
    else:
        elapsed_time = int(time.time() - info["created_at"])
        remaining_time = 600 - elapsed_time
        if remaining_time > 0:
            minutes = remaining_time // 60
            seconds = remaining_time % 60
            text = (
                f"<blockquote>‚úÖ Mail 10 ph√∫t c·ªßa b·∫°n l√†:\n"
                f"<code>üìß {info['email']}</code>\n"
                f"‚è∞ H·∫øt h·∫°n sau {minutes} ph√∫t {seconds} gi√¢y.</blockquote>"
            )
            markup = build_mail_buttons(user_id, 'mail_info')
            parse_mode = 'HTML'
        else:
            with user_data_lock: # B·∫£o v·ªá truy c·∫≠p user_data khi x√≥a
                del user_data[user_id]
            text = "‚è∞ Mail 10 ph√∫t c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n! Vui l√≤ng t·∫°o mail m·ªõi b·∫±ng l·ªánh /mail10p."
            markup = None
            parse_mode = 'HTML'
    
    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode=parse_mode,
            reply_markup=markup
        )
        with mail_messages_state_lock: # B·∫£o v·ªá truy c·∫≠p bot.mail_messages_state
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i tin nh·∫Øn
            if call.message.message_id in bot.mail_messages_state:
                bot.mail_messages_state[call.message.message_id]['type'] = 'mail_info'
    except telebot.apihelper.ApiTelegramException as e:
        if "message is not modified" in str(e):
            logging.info(f"Message {call.message.message_id} in chat {call.message.chat.id} was not modified (back to mail info).")
        else:
            logging.error(f"L·ªói khi ch·ªânh s·ª≠a tin nh·∫Øn v·ªÅ th√¥ng tin mail cho user {user_id}: {e}")
            send_message_robustly(call.message.chat.id, text=text, parse_mode=parse_mode, reply_markup=markup)
            with mail_messages_state_lock: # B·∫£o v·ªá truy c·∫≠p bot.mail_messages_state
                # X√≥a tr·∫°ng th√°i c≈© v√† th√™m tr·∫°ng th√°i m·ªõi
                if call.message.message_id in bot.mail_messages_state:
                    del bot.mail_messages_state[call.message.message_id]
                sent_msg = send_message_robustly(call.message.chat.id, "‚ùå ƒê√£ c√≥ l·ªói khi quay l·∫°i th√¥ng tin mail. ƒê√¢y l√† tin nh·∫Øn m·ªõi.", parse_mode="HTML")
                if sent_msg:
                    bot.mail_messages_state[sent_msg.message_id] = {'chat_id': user_id, 'user_id': user_id, 'type': 'mail_info'}
    except Exception as e:
        logging.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi quay l·∫°i th√¥ng tin mail: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è L·ªói khi quay l·∫°i th√¥ng tin mail!", show_alert=True)

# === Webhook Flask ===
@app.route("/")
def index():
    """Trang ch·ªß ƒë∆°n gi·∫£n cho bi·∫øt bot ƒëang ho·∫°t ƒë·ªông."""
    return "<h3>üõ∞Ô∏è ZProject Bot ƒëang ho·∫°t ƒë·ªông!</h3>"

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    """ƒêi·ªÉm cu·ªëi webhook ƒë·ªÉ nh·∫≠n c·∫≠p nh·∫≠t t·ª´ Telegram."""
    try:
        # X·ª≠ l√Ω update trong m·ªôt lu·ªìng ri√™ng n·∫øu bot ƒë∆∞·ª£c kh·ªüi t·∫°o v·ªõi threaded=True
        update = telebot.types.Update.de_json(request.data.decode("utf-8"))
        bot.process_new_updates([update]) # Khi threaded=True, m·ªói update s·∫Ω sinh ra m·ªôt lu·ªìng ri√™ng
        return "OK", 200
    except Exception as e:
        logging.error(f"L·ªói webhook: {e}")
        return "Error", 500

# === Kh·ªüi ch·∫°y Bot ===
if __name__ == "__main__":
    try:
        webhook_info = bot.get_webhook_info()
        current_webhook_url = f"{APP_URL}/{TOKEN}"
        if webhook_info.url != current_webhook_url:
            logging.info(f"Webhook hi·ªán t·∫°i ({webhook_info.url}) kh√¥ng kh·ªõp v·ªõi URL mong mu·ªën ({current_webhook_url}). ƒêang x√≥a v√† ƒë·∫∑t l·∫°i webhook.")
            bot.remove_webhook()
            time.sleep(1)
            bot.set_webhook(url=current_webhook_url)
            logging.info(f"Webhook ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t t·ªõi: {current_webhook_url}")
        else:
            logging.info(f"Webhook ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t ch√≠nh x√°c t·ªõi: {current_webhook_url}")

        port = int(os.environ.get("PORT", 10000))
        app.run(host="0.0.0.0", port=port)
    except Exception as e:
        logging.critical(f"L·ªói nghi√™m tr·ªçng khi kh·ªüi ƒë·ªông bot: {e}")

